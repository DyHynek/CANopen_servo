
loop_back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08012df4  08012df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013a64  08013a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013a6c  08013a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013a70  08013a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000052c  24000000  08013a74  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f6c  2400052c  08013fa0  0001552c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002498  08013fa0  00016498  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001552c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004003e  00000000  00000000  0001555a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c8b  00000000  00000000  00055598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021e0  00000000  00000000  0005d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a2a  00000000  00000000  0005f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041bf4  00000000  00000000  00060e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003673d  00000000  00000000  000a2a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016fc66  00000000  00000000  000d9163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00248dc9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009724  00000000  00000000  00248e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000045  00000000  00000000  00252530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400052c 	.word	0x2400052c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012ddc 	.word	0x08012ddc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000530 	.word	0x24000530
 80002dc:	08012ddc 	.word	0x08012ddc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <canopen_app_user_init>:

void canopen_app_user_init(CANopenNodeSTM32* canopenNode,
							FDCAN_HandleTypeDef* __CANHandle,
							void (*HWInitFunction)(void),
							TIM_HandleTypeDef* __timerHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
 80003bc:	603b      	str	r3, [r7, #0]
	canopenNode->CANHandle = __CANHandle;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	68ba      	ldr	r2, [r7, #8]
 80003c2:	609a      	str	r2, [r3, #8]
	canopenNode->HWInitFunction = HWInitFunction;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	60da      	str	r2, [r3, #12]
	canopenNode->timerHandle = __timerHandle;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	605a      	str	r2, [r3, #4]
	canopenNode->desiredNodeID = 0x24;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	2224      	movs	r2, #36	@ 0x24
 80003d4:	701a      	strb	r2, [r3, #0]
	canopenNode->baudrate = 1000;
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003dc:	805a      	strh	r2, [r3, #2]

	 canopen_app_init(canopenNode);
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f005 ff86 	bl	80062f0 <canopen_app_init>
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <canopen_app_user_config>:

void canopen_app_user_config(CANopenNodeSTM32* canopenNode)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	CO_mapping_user(canopenNode);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 fb9d 	bl	8000b34 <CO_mapping_user>
	SDO_SetParam(canopenNode, 1, PROFILE_POSITION_MODE);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2101      	movs	r1, #1
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f000 fd7c 	bl	8000efc <SDO_SetParam>
	//SDO_SetParam(canopenNode, 2, PROFILE_POSITION_MODE);
	PDS_execute(canopenNode, 1);
 8000404:	2101      	movs	r1, #1
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 f9f0 	bl	80007ec <PDS_execute>
	//PDS_execute(canopenNode, 2);
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <GetTemperature>:
#include "GetTemperature_ci.h"
#include "response_ci.h"

void GetTemperature(char **argv, uint8_t argv_num)
{                              
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
	if(argv_num < 2 )            
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d805      	bhi.n	8000432 <GetTemperature+0x1e>
	{                            
		response_print("don't enough argv, argv = %d", argv_num);
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	4619      	mov	r1, r3
 800042a:	480d      	ldr	r0, [pc, #52]	@ (8000460 <GetTemperature+0x4c>)
 800042c:	f000 f86a 	bl	8000504 <response_print>
		return;                    
 8000430:	e013      	b.n	800045a <GetTemperature+0x46>
	}
	if(argv_num > 2 )            
 8000432:	78fb      	ldrb	r3, [r7, #3]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d905      	bls.n	8000444 <GetTemperature+0x30>
	{                            
		response_print("too much argv, argv = %d", argv_num);
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4619      	mov	r1, r3
 800043c:	4809      	ldr	r0, [pc, #36]	@ (8000464 <GetTemperature+0x50>)
 800043e:	f000 f861 	bl	8000504 <response_print>
		return;                    
 8000442:	e00a      	b.n	800045a <GetTemperature+0x46>
	}
	if(argv_num == 2 )            
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d107      	bne.n	800045a <GetTemperature+0x46>
	{ 
//		response_print("data\n");
		response_print("test = %s\n", argv[1]);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3304      	adds	r3, #4
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4619      	mov	r1, r3
 8000452:	4805      	ldr	r0, [pc, #20]	@ (8000468 <GetTemperature+0x54>)
 8000454:	f000 f856 	bl	8000504 <response_print>
//		uint8_t channel = atoi(argv[1]);
//		response_print("temperature = %f\n", LM35_Gettemp(channel));
		return;                    
 8000458:	bf00      	nop
	}	
}
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	08012df4 	.word	0x08012df4
 8000464:	08012e14 	.word	0x08012e14
 8000468:	08012e30 	.word	0x08012e30

0800046c <chartohex>:
    memcpy(&buffer[*index], &value, sizeOfvalue);
    *index += sizeOfvalue;
}

uint32_t chartohex(char *value)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
    char *endptr;
    uint32_t num  = strtol(value, &endptr, 10);
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	220a      	movs	r2, #10
 800047a:	4619      	mov	r1, r3
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f011 fb03 	bl	8011a88 <strtol>
 8000482:	4603      	mov	r3, r0
 8000484:	60fb      	str	r3, [r7, #12]
    if (*endptr != '\0') {
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <chartohex+0x28>
        return -1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	e000      	b.n	8000496 <chartohex+0x2a>
    } else {
        return num;
 8000494:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000496:	4618      	mov	r0, r3
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <running_servo>:



void running_servo(char **argv, uint8_t argv_num)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]

//	uint8_t node_id_1 = chartohex(argv[1]);
//	uint32_t targetP_1 = chartohex(argv[2]);
//	uint8_t node_id_2 = chartohex(argv[3]);
//	uint32_t targetP_2 = chartohex(argv[4]);
	 Params.node_id_1 = chartohex(argv[1]);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3304      	adds	r3, #4
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ffda 	bl	800046c <chartohex>
 80004b8:	4603      	mov	r3, r0
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <running_servo+0x60>)
 80004be:	701a      	strb	r2, [r3, #0]
	 Params.targetP_1 = chartohex(argv[2]);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3308      	adds	r3, #8
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ffd0 	bl	800046c <chartohex>
 80004cc:	4603      	mov	r3, r0
 80004ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <running_servo+0x60>)
 80004d0:	6053      	str	r3, [r2, #4]
	 Params.node_id_2 = chartohex(argv[3]);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	330c      	adds	r3, #12
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ffc7 	bl	800046c <chartohex>
 80004de:	4603      	mov	r3, r0
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <running_servo+0x60>)
 80004e4:	721a      	strb	r2, [r3, #8]
	 Params.targetP_2 = chartohex(argv[4]);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3310      	adds	r3, #16
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffbd 	bl	800046c <chartohex>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a02      	ldr	r2, [pc, #8]	@ (8000500 <running_servo+0x60>)
 80004f6:	60d3      	str	r3, [r2, #12]
//    store_to_buffer(targetP_1, buffer, &index, sizeof(uint32_t));
//    store_to_buffer(node_id_2, buffer, &index, sizeof(uint8_t));
//    store_to_buffer(targetP_2, buffer, &index, sizeof(uint32_t));

//    response_print("%02X %02X %02X %02X\n",Params.node_id_1, Params.node_id_2, Params.targetP_1, Params.targetP_2);
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	24000548 	.word	0x24000548

08000504 <response_print>:
#include "stdarg.h"

//static UART_HandleTypeDef *huart_print;

void response_print(const char* str, ...)
{ 
 8000504:	b40f      	push	{r0, r1, r2, r3}
 8000506:	b580      	push	{r7, lr}
 8000508:	b09c      	sub	sp, #112	@ 0x70
 800050a:	af00      	add	r7, sp, #0
	char stringArray[100];  //100: so ky tu trong 1 tham so
	uint8_t cdc_send_flag = 1;
 800050c:	2301      	movs	r3, #1
 800050e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	
	va_list args;
	va_start(args, str);
 8000512:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000516:	603b      	str	r3, [r7, #0]
	vsprintf(stringArray, str, args);
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800051e:	4618      	mov	r0, r3
 8000520:	f011 fd08 	bl	8011f34 <vsiprintf>
	va_end(args);

	uint32_t time_print_data = HAL_GetTick();
 8000524:	f007 fa0e 	bl	8007944 <HAL_GetTick>
 8000528:	66b8      	str	r0, [r7, #104]	@ 0x68
//	                cdc_send_flag = 0;
//	                break;
//	            }
//	        }
//	    }
	CDC_Transmit_FS((uint8_t *)stringArray, strlen(stringArray));
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fee1 	bl	80002f4 <strlen>
 8000532:	4603      	mov	r3, r0
 8000534:	b29a      	uxth	r2, r3
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4611      	mov	r1, r2
 800053a:	4618      	mov	r0, r3
 800053c:	f010 fccc 	bl	8010ed8 <CDC_Transmit_FS>
}
 8000540:	bf00      	nop
 8000542:	3770      	adds	r7, #112	@ 0x70
 8000544:	46bd      	mov	sp, r7
 8000546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800054a:	b004      	add	sp, #16
 800054c:	4770      	bx	lr

0800054e <write_SDO>:
}

CO_SDO_abortCode_t write_SDO(CO_SDOclient_t *SDO_C, uint8_t nodeId,
                             uint16_t index, uint8_t subIndex,
                             uint8_t *data, size_t dataSize)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b08c      	sub	sp, #48	@ 0x30
 8000552:	af04      	add	r7, sp, #16
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	4608      	mov	r0, r1
 8000558:	4611      	mov	r1, r2
 800055a:	461a      	mov	r2, r3
 800055c:	4603      	mov	r3, r0
 800055e:	70fb      	strb	r3, [r7, #3]
 8000560:	460b      	mov	r3, r1
 8000562:	803b      	strh	r3, [r7, #0]
 8000564:	4613      	mov	r3, r2
 8000566:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;
    bool_t bufferPartial = false;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]

    // setup client (this can be skipped, if remote device is the same)
    SDO_ret = CO_SDOclient_setup(SDO_C,
                                 CO_CAN_ID_SDO_CLI + nodeId,
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
    SDO_ret = CO_SDOclient_setup(SDO_C,
 8000572:	4619      	mov	r1, r3
                                 CO_CAN_ID_SDO_SRV + nodeId,
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
    SDO_ret = CO_SDOclient_setup(SDO_C,
 800057a:	461a      	mov	r2, r3
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f003 fbc8 	bl	8003d14 <CO_SDOclient_setup>
 8000584:	4603      	mov	r3, r0
 8000586:	76fb      	strb	r3, [r7, #27]
                                 nodeId);
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 8000588:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <write_SDO+0x48>
        return -1;
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	e041      	b.n	800061a <write_SDO+0xcc>
    }

    // initiate download
    SDO_ret = CO_SDOclientDownloadInitiate(SDO_C, index, subIndex,
 8000596:	78ba      	ldrb	r2, [r7, #2]
 8000598:	8839      	ldrh	r1, [r7, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f003 fc28 	bl	8003dfc <CO_SDOclientDownloadInitiate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	76fb      	strb	r3, [r7, #27]
                                           dataSize, 1000, false);
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 80005b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <write_SDO+0x70>
        return -1;
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	e02d      	b.n	800061a <write_SDO+0xcc>
    }

    // fill data
    size_t nWritten = CO_SDOclientDownloadBufWrite(SDO_C, data, dataSize);
 80005be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f003 fc57 	bl	8003e76 <CO_SDOclientDownloadBufWrite>
 80005c8:	6178      	str	r0, [r7, #20]
    if (nWritten < dataSize) {
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d201      	bcs.n	80005d6 <write_SDO+0x88>
        bufferPartial = true;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]
        // If SDO Fifo buffer is too small, data can be refilled in the loop.
    }

    //download data
    do {
        uint32_t timeDifference_us = 10000;
 80005d6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80005da:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientDownload(SDO_C,
 80005e0:	2300      	movs	r3, #0
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2300      	movs	r3, #0
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	2200      	movs	r2, #0
 80005f2:	6939      	ldr	r1, [r7, #16]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f003 fc5b 	bl	8003eb0 <CO_SDOclientDownload>
 80005fa:	4603      	mov	r3, r0
 80005fc:	76fb      	strb	r3, [r7, #27]
                                       timeDifference_us,
                                       false,
                                       bufferPartial,
                                       &abortCode,
                                       NULL, NULL);
        if (SDO_ret < 0) {
 80005fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000602:	2b00      	cmp	r3, #0
 8000604:	da01      	bge.n	800060a <write_SDO+0xbc>
            return abortCode;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	e007      	b.n	800061a <write_SDO+0xcc>
        }

        HAL_Delay(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f007 f9a6 	bl	800795c <HAL_Delay>
    } while(SDO_ret > 0);
 8000610:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dcde      	bgt.n	80005d6 <write_SDO+0x88>

    return CO_SDO_AB_NONE;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <Switch_On_Disabled>:

static uint8_t data[4];

void Switch_On_Disabled(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
	data[0] = 0x00;
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <Switch_On_Disabled+0x48>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <Switch_On_Disabled+0x48>)
 8000638:	2200      	movs	r2, #0
 800063a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <Switch_On_Disabled+0x48>)
 800063e:	2200      	movs	r2, #0
 8000640:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8000642:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <Switch_On_Disabled+0x48>)
 8000644:	2200      	movs	r2, #0
 8000646:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800064e:	78f9      	ldrb	r1, [r7, #3]
 8000650:	2302      	movs	r3, #2
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <Switch_On_Disabled+0x48>)
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	f246 0240 	movw	r2, #24640	@ 0x6040
 800065e:	f7ff ff76 	bl	800054e <write_SDO>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	24000558 	.word	0x24000558

08000670 <Ready_to_Switch_On>:
void Ready_to_Switch_On(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x06;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <Ready_to_Switch_On+0x48>)
 800067e:	2206      	movs	r2, #6
 8000680:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <Ready_to_Switch_On+0x48>)
 8000684:	2200      	movs	r2, #0
 8000686:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 8000688:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <Ready_to_Switch_On+0x48>)
 800068a:	2200      	movs	r2, #0
 800068c:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <Ready_to_Switch_On+0x48>)
 8000690:	2200      	movs	r2, #0
 8000692:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800069a:	78f9      	ldrb	r1, [r7, #3]
 800069c:	2302      	movs	r3, #2
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <Ready_to_Switch_On+0x48>)
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	f246 0240 	movw	r2, #24640	@ 0x6040
 80006aa:	f7ff ff50 	bl	800054e <write_SDO>
	}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	24000558 	.word	0x24000558

080006bc <Switch_On>:
void Switch_On(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x07;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <Switch_On+0x48>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <Switch_On+0x48>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <Switch_On+0x48>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <Switch_On+0x48>)
 80006dc:	2200      	movs	r2, #0
 80006de:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80006e6:	78f9      	ldrb	r1, [r7, #3]
 80006e8:	2302      	movs	r3, #2
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <Switch_On+0x48>)
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	f246 0240 	movw	r2, #24640	@ 0x6040
 80006f6:	f7ff ff2a 	bl	800054e <write_SDO>
	}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	24000558 	.word	0x24000558

08000708 <Operation_Enabled>:
void Operation_Enabled(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af02      	add	r7, sp, #8
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x0F;
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <Operation_Enabled+0x48>)
 8000716:	220f      	movs	r2, #15
 8000718:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <Operation_Enabled+0x48>)
 800071c:	2200      	movs	r2, #0
 800071e:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 8000720:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <Operation_Enabled+0x48>)
 8000722:	2200      	movs	r2, #0
 8000724:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <Operation_Enabled+0x48>)
 8000728:	2200      	movs	r2, #0
 800072a:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000732:	78f9      	ldrb	r1, [r7, #3]
 8000734:	2302      	movs	r3, #2
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <Operation_Enabled+0x48>)
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2300      	movs	r3, #0
 800073e:	f246 0240 	movw	r2, #24640	@ 0x6040
 8000742:	f7ff ff04 	bl	800054e <write_SDO>
	}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	24000558 	.word	0x24000558

08000754 <setbit6to1>:
void setbit6to1(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x4F;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <setbit6to1+0x48>)
 8000762:	224f      	movs	r2, #79	@ 0x4f
 8000764:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <setbit6to1+0x48>)
 8000768:	2200      	movs	r2, #0
 800076a:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <setbit6to1+0x48>)
 800076e:	2200      	movs	r2, #0
 8000770:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <setbit6to1+0x48>)
 8000774:	2200      	movs	r2, #0
 8000776:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800077e:	78f9      	ldrb	r1, [r7, #3]
 8000780:	2302      	movs	r3, #2
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <setbit6to1+0x48>)
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2300      	movs	r3, #0
 800078a:	f246 0240 	movw	r2, #24640	@ 0x6040
 800078e:	f7ff fede 	bl	800054e <write_SDO>
	}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	24000558 	.word	0x24000558

080007a0 <setbit4to1>:
void setbit4to1(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x5F;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <setbit4to1+0x48>)
 80007ae:	225f      	movs	r2, #95	@ 0x5f
 80007b0:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <setbit4to1+0x48>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <setbit4to1+0x48>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <setbit4to1+0x48>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80007ca:	78f9      	ldrb	r1, [r7, #3]
 80007cc:	2302      	movs	r3, #2
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <setbit4to1+0x48>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	f246 0240 	movw	r2, #24640	@ 0x6040
 80007da:	f7ff feb8 	bl	800054e <write_SDO>
	}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	24000558 	.word	0x24000558

080007ec <PDS_execute>:

void PDS_execute(CANopenNodeSTM32* __canopenNode, uint8_t node_id)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	Switch_On_Disabled(__canopenNode, node_id);
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff11 	bl	8000624 <Switch_On_Disabled>
	Ready_to_Switch_On(__canopenNode, node_id);
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff32 	bl	8000670 <Ready_to_Switch_On>
	Switch_On(__canopenNode, node_id);
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff53 	bl	80006bc <Switch_On>
	Operation_Enabled(__canopenNode, node_id);
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff74 	bl	8000708 <Operation_Enabled>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <Disable_PDO>:

void Disable_PDO(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
 8000834:	4613      	mov	r3, r2
 8000836:	70bb      	strb	r3, [r7, #2]
	 data[0] = 0x00;
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <Disable_PDO+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	 data[1] = 0x00;
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <Disable_PDO+0x54>)
 8000840:	2200      	movs	r2, #0
 8000842:	705a      	strb	r2, [r3, #1]
	 data[2] = 0x00;
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <Disable_PDO+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	709a      	strb	r2, [r3, #2]
	 data[3] = 0x80;
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <Disable_PDO+0x54>)
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x01, data, 4);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000856:	78bb      	ldrb	r3, [r7, #2]
 8000858:	b29a      	uxth	r2, r3
 800085a:	f241 33ff 	movw	r3, #5119	@ 0x13ff
 800085e:	4413      	add	r3, r2
 8000860:	b29a      	uxth	r2, r3
 8000862:	78f9      	ldrb	r1, [r7, #3]
 8000864:	2304      	movs	r3, #4
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <Disable_PDO+0x54>)
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2301      	movs	r3, #1
 800086e:	f7ff fe6e 	bl	800054e <write_SDO>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24000558 	.word	0x24000558

08000880 <set_COB_ID>:
void set_COB_ID(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
 800088c:	4613      	mov	r3, r2
 800088e:	70bb      	strb	r3, [r7, #2]
	uint32_t COB_ID_PDO = CO_CAN_ID_RPDO_1 + (number_PDO-1)*0x100 + __node_id;
 8000890:	78bb      	ldrb	r3, [r7, #2]
 8000892:	3301      	adds	r3, #1
 8000894:	021a      	lsls	r2, r3, #8
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	4413      	add	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]
	data[0] = COB_ID_PDO 		& 0xFFU;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <set_COB_ID+0x64>)
 80008a2:	701a      	strb	r2, [r3, #0]
	data[1] = (COB_ID_PDO>>8) 	& 0xFFU;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <set_COB_ID+0x64>)
 80008ac:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <set_COB_ID+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	709a      	strb	r2, [r3, #2]
	data[3] = 0x80;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <set_COB_ID+0x64>)
 80008b6:	2280      	movs	r2, #128	@ 0x80
 80008b8:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x01, data, 4);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f241 33ff 	movw	r3, #5119	@ 0x13ff
 80008c8:	4413      	add	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	78f9      	ldrb	r1, [r7, #3]
 80008ce:	2304      	movs	r3, #4
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <set_COB_ID+0x64>)
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2301      	movs	r3, #1
 80008d8:	f7ff fe39 	bl	800054e <write_SDO>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	24000558 	.word	0x24000558

080008e8 <set_transmission_type>:
void set_transmission_type(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
 80008f4:	4613      	mov	r3, r2
 80008f6:	70bb      	strb	r3, [r7, #2]
	data[0] = CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC 		& 0xFFU;
 80008f8:	4b10      	ldr	r3, [pc, #64]	@ (800093c <set_transmission_type+0x54>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <set_transmission_type+0x54>)
 8000900:	2200      	movs	r2, #0
 8000902:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <set_transmission_type+0x54>)
 8000906:	2200      	movs	r2, #0
 8000908:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <set_transmission_type+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x02, data, 2);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000916:	78bb      	ldrb	r3, [r7, #2]
 8000918:	b29a      	uxth	r2, r3
 800091a:	f241 33ff 	movw	r3, #5119	@ 0x13ff
 800091e:	4413      	add	r3, r2
 8000920:	b29a      	uxth	r2, r3
 8000922:	78f9      	ldrb	r1, [r7, #3]
 8000924:	2302      	movs	r3, #2
 8000926:	9301      	str	r3, [sp, #4]
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <set_transmission_type+0x54>)
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2302      	movs	r3, #2
 800092e:	f7ff fe0e 	bl	800054e <write_SDO>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	24000558 	.word	0x24000558

08000940 <deactivating_mapping>:
void deactivating_mapping(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af02      	add	r7, sp, #8
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
 800094c:	4613      	mov	r3, r2
 800094e:	70bb      	strb	r3, [r7, #2]
	data[0] = 0x00;
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <deactivating_mapping+0x54>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <deactivating_mapping+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 800095c:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <deactivating_mapping+0x54>)
 800095e:	2200      	movs	r2, #0
 8000960:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <deactivating_mapping+0x54>)
 8000964:	2200      	movs	r2, #0
 8000966:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1600_RXPDO_1_MAPPING+(number_PDO-1), 0x00, data, 2);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800096e:	78bb      	ldrb	r3, [r7, #2]
 8000970:	b29a      	uxth	r2, r3
 8000972:	f241 53ff 	movw	r3, #5631	@ 0x15ff
 8000976:	4413      	add	r3, r2
 8000978:	b29a      	uxth	r2, r3
 800097a:	78f9      	ldrb	r1, [r7, #3]
 800097c:	2302      	movs	r3, #2
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <deactivating_mapping+0x54>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	f7ff fde2 	bl	800054e <write_SDO>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	24000558 	.word	0x24000558

08000998 <mapping_object>:
void mapping_object(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO, uint32_t __ObjectToMapping, uint8_t __subIndexToMapping)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af02      	add	r7, sp, #8
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	72fb      	strb	r3, [r7, #11]
 80009a6:	4613      	mov	r3, r2
 80009a8:	72bb      	strb	r3, [r7, #10]
	data[0] = __ObjectToMapping			& 0xFFU;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <mapping_object+0x64>)
 80009b0:	701a      	strb	r2, [r3, #0]
	data[1] = (__ObjectToMapping>>8)	& 0xFFU;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <mapping_object+0x64>)
 80009ba:	705a      	strb	r2, [r3, #1]
	data[2] = (__ObjectToMapping>>16)	& 0xFFU;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	0c1b      	lsrs	r3, r3, #16
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <mapping_object+0x64>)
 80009c4:	709a      	strb	r2, [r3, #2]
	data[3] = (__ObjectToMapping>>24)	& 0xFFU;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	0e1b      	lsrs	r3, r3, #24
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <mapping_object+0x64>)
 80009ce:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1600_RXPDO_1_MAPPING+(number_PDO-1), __subIndexToMapping, data, 4);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80009d6:	7abb      	ldrb	r3, [r7, #10]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f241 53ff 	movw	r3, #5631	@ 0x15ff
 80009de:	4413      	add	r3, r2
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009e6:	7af9      	ldrb	r1, [r7, #11]
 80009e8:	2404      	movs	r4, #4
 80009ea:	9401      	str	r4, [sp, #4]
 80009ec:	4c03      	ldr	r4, [pc, #12]	@ (80009fc <mapping_object+0x64>)
 80009ee:	9400      	str	r4, [sp, #0]
 80009f0:	f7ff fdad 	bl	800054e <write_SDO>
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	24000558 	.word	0x24000558

08000a00 <Active_mapping>:
void Active_mapping(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	70bb      	strb	r3, [r7, #2]
	data[0] = 0x01;
 8000a10:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <Active_mapping+0x54>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <Active_mapping+0x54>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <Active_mapping+0x54>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <Active_mapping+0x54>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1600_RXPDO_1_MAPPING+(number_PDO-1), 0x00, data, 2);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000a2e:	78bb      	ldrb	r3, [r7, #2]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f241 53ff 	movw	r3, #5631	@ 0x15ff
 8000a36:	4413      	add	r3, r2
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	78f9      	ldrb	r1, [r7, #3]
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <Active_mapping+0x54>)
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	f7ff fd82 	bl	800054e <write_SDO>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000558 	.word	0x24000558

08000a58 <Enable_PDO>:
void Enable_PDO(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
 8000a64:	4613      	mov	r3, r2
 8000a66:	70bb      	strb	r3, [r7, #2]
	uint32_t COB_ID_PDO = CO_CAN_ID_RPDO_1 + (number_PDO-1)*0x100 + __node_id;
 8000a68:	78bb      	ldrb	r3, [r7, #2]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	021a      	lsls	r2, r3, #8
 8000a6e:	78fb      	ldrb	r3, [r7, #3]
 8000a70:	4413      	add	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
	data[0] = COB_ID_PDO 		& 0xFFU;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <Enable_PDO+0x64>)
 8000a7a:	701a      	strb	r2, [r3, #0]
	data[1] = (COB_ID_PDO>>8) 	& 0xFFU;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <Enable_PDO+0x64>)
 8000a84:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <Enable_PDO+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <Enable_PDO+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x01, data, 4);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000a98:	78bb      	ldrb	r3, [r7, #2]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f241 33ff 	movw	r3, #5119	@ 0x13ff
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	78f9      	ldrb	r1, [r7, #3]
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <Enable_PDO+0x64>)
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f7ff fd4d 	bl	800054e <write_SDO>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24000558 	.word	0x24000558

08000ac0 <PDO_mapping>:

void PDO_mapping(CANopenNodeSTM32* __canopenNode, uint8_t node_id, uint8_t NumberOfPDO, uint32_t ObjectToMapping, uint8_t subIndexToMapping)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	72fb      	strb	r3, [r7, #11]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	72bb      	strb	r3, [r7, #10]
//	CO_NMT_sendCommand(__canopenNode->canOpenStack->NMT, CO_NMT_RESET_NODE, node_id);
//	HAL_Delay(1000);
//	CO_NMT_sendCommand(__canopenNode->canOpenStack->NMT, CO_NMT_ENTER_PRE_OPERATIONAL, node_id);
//	HAL_Delay(50);

	Disable_PDO(__canopenNode, node_id, NumberOfPDO);
 8000ad2:	7aba      	ldrb	r2, [r7, #10]
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fea5 	bl	8000828 <Disable_PDO>
	set_COB_ID(__canopenNode, node_id, NumberOfPDO);
 8000ade:	7aba      	ldrb	r2, [r7, #10]
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f7ff fecb 	bl	8000880 <set_COB_ID>
	set_transmission_type(__canopenNode, node_id, NumberOfPDO);
 8000aea:	7aba      	ldrb	r2, [r7, #10]
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	4619      	mov	r1, r3
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff fef9 	bl	80008e8 <set_transmission_type>
	deactivating_mapping(__canopenNode, node_id, NumberOfPDO);
 8000af6:	7aba      	ldrb	r2, [r7, #10]
 8000af8:	7afb      	ldrb	r3, [r7, #11]
 8000afa:	4619      	mov	r1, r3
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff ff1f 	bl	8000940 <deactivating_mapping>
	mapping_object(__canopenNode, node_id, NumberOfPDO, ObjectToMapping, subIndexToMapping);
 8000b02:	7aba      	ldrb	r2, [r7, #10]
 8000b04:	7af9      	ldrb	r1, [r7, #11]
 8000b06:	7e3b      	ldrb	r3, [r7, #24]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f7ff ff43 	bl	8000998 <mapping_object>
	Active_mapping(__canopenNode, node_id, NumberOfPDO);
 8000b12:	7aba      	ldrb	r2, [r7, #10]
 8000b14:	7afb      	ldrb	r3, [r7, #11]
 8000b16:	4619      	mov	r1, r3
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff ff71 	bl	8000a00 <Active_mapping>
	Enable_PDO(__canopenNode, node_id, NumberOfPDO);
 8000b1e:	7aba      	ldrb	r2, [r7, #10]
 8000b20:	7afb      	ldrb	r3, [r7, #11]
 8000b22:	4619      	mov	r1, r3
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff ff97 	bl	8000a58 <Enable_PDO>

//	CO_NMT_sendCommand(__canopenNode->canOpenStack->NMT, CO_NMT_ENTER_OPERATIONAL, node_id);
//	HAL_Delay(50);
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <CO_mapping_user>:

void CO_mapping_user(CANopenNodeSTM32* canopenNode)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_RESET_NODE, 1);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	2201      	movs	r2, #1
 8000b44:	2181      	movs	r1, #129	@ 0x81
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f926 	bl	8001d98 <CO_NMT_sendCommand>
	HAL_Delay(1000);
 8000b4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b50:	f006 ff04 	bl	800795c <HAL_Delay>
	//CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_RESET_NODE, 2);
	//HAL_Delay(1000);
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_PRE_OPERATIONAL, 1);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2180      	movs	r1, #128	@ 0x80
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f91a 	bl	8001d98 <CO_NMT_sendCommand>
	HAL_Delay(50);
 8000b64:	2032      	movs	r0, #50	@ 0x32
 8000b66:	f006 fef9 	bl	800795c <HAL_Delay>
//	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_PRE_OPERATIONAL, 2);
//	HAL_Delay(50);

	// Active RPDO_1
	PDO_mapping(canopenNode, 1, 1, 0x60400010, 0x01);
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <CO_mapping_user+0xa4>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	2101      	movs	r1, #1
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ffa3 	bl	8000ac0 <PDO_mapping>
	//PDO_mapping(canopenNode, 2, 1, 0x60400010, 0x01);
	// Active RPDO_2
	PDO_mapping(canopenNode, 1, 2, 0x607A0020, 0x01);
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <CO_mapping_user+0xa8>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	2101      	movs	r1, #1
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff9b 	bl	8000ac0 <PDO_mapping>
	//PDO_mapping(canopenNode, 2, 2, 0x607A0020, 0x01);
	//Active RPDO_3
	PDO_mapping(canopenNode, 1, 3, 0x60810020, 0x01);
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <CO_mapping_user+0xac>)
 8000b90:	2203      	movs	r2, #3
 8000b92:	2101      	movs	r1, #1
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff93 	bl	8000ac0 <PDO_mapping>
	//PDO_mapping(canopenNode, 2, 3, 0x60810020, 0x01);
	//Active RPDO_4
	PDO_mapping(canopenNode, 1, 4, 0x60830010, 0x01);
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <CO_mapping_user+0xb0>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff8b 	bl	8000ac0 <PDO_mapping>
	//PDO_mapping(canopenNode, 2, 4, 0x60830010, 0x01);
	//Active RPDO_5
	PDO_mapping(canopenNode, 1, 5, 0x60840010, 0x01);
 8000baa:	2301      	movs	r3, #1
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <CO_mapping_user+0xb4>)
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff83 	bl	8000ac0 <PDO_mapping>
	//PDO_mapping(canopenNode, 2, 5, 0x60840010, 0x01);
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_OPERATIONAL, 1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 f8e7 	bl	8001d98 <CO_NMT_sendCommand>
	HAL_Delay(50);
 8000bca:	2032      	movs	r0, #50	@ 0x32
 8000bcc:	f006 fec6 	bl	800795c <HAL_Delay>
//	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_OPERATIONAL, 2);
//	HAL_Delay(50);
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	60400010 	.word	0x60400010
 8000bdc:	607a0020 	.word	0x607a0020
 8000be0:	60810020 	.word	0x60810020
 8000be4:	60830010 	.word	0x60830010
 8000be8:	60840010 	.word	0x60840010

08000bec <SDO_TargetPossition>:


void SDO_TargetPossition(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, int32_t TargetPosition)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	72fb      	strb	r3, [r7, #11]
	data[0] = TargetPosition		& 0xFFU;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <SDO_TargetPossition+0x58>)
 8000c00:	701a      	strb	r2, [r3, #0]
	data[1] = (TargetPosition>>8)	& 0xFFU;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	121b      	asrs	r3, r3, #8
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <SDO_TargetPossition+0x58>)
 8000c0a:	705a      	strb	r2, [r3, #1]
	data[2] = (TargetPosition>>16)	& 0xFFU;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	141b      	asrs	r3, r3, #16
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <SDO_TargetPossition+0x58>)
 8000c14:	709a      	strb	r2, [r3, #2]
	data[3] = (TargetPosition>>24)	& 0xFFU;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	0e1b      	lsrs	r3, r3, #24
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <SDO_TargetPossition+0x58>)
 8000c1e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x607A, 0x00, data, 4);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000c26:	7af9      	ldrb	r1, [r7, #11]
 8000c28:	2304      	movs	r3, #4
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <SDO_TargetPossition+0x58>)
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2300      	movs	r3, #0
 8000c32:	f246 027a 	movw	r2, #24698	@ 0x607a
 8000c36:	f7ff fc8a 	bl	800054e <write_SDO>
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24000558 	.word	0x24000558

08000c48 <SDO_ProfileVelocity>:

void SDO_ProfileVelocity(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t Velocity)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	460b      	mov	r3, r1
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	72fb      	strb	r3, [r7, #11]
	data[0] = Velocity			& 0xFFU;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <SDO_ProfileVelocity+0x58>)
 8000c5c:	701a      	strb	r2, [r3, #0]
	data[1] = (Velocity>>8)	    & 0xFFU;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <SDO_ProfileVelocity+0x58>)
 8000c66:	705a      	strb	r2, [r3, #1]
	data[2] = (Velocity>>16)	& 0xFFU;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0c1b      	lsrs	r3, r3, #16
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <SDO_ProfileVelocity+0x58>)
 8000c70:	709a      	strb	r2, [r3, #2]
	data[3] = (Velocity>>24)	& 0xFFU;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0e1b      	lsrs	r3, r3, #24
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <SDO_ProfileVelocity+0x58>)
 8000c7a:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6081, 0x00, data, 4);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000c82:	7af9      	ldrb	r1, [r7, #11]
 8000c84:	2304      	movs	r3, #4
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <SDO_ProfileVelocity+0x58>)
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f246 0281 	movw	r2, #24705	@ 0x6081
 8000c92:	f7ff fc5c 	bl	800054e <write_SDO>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000558 	.word	0x24000558

08000ca4 <SDO_EndVelocity>:
void SDO_EndVelocity(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, int16_t EndVelocity)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	803b      	strh	r3, [r7, #0]
	data[0] = EndVelocity			& 0xFFU;
 8000cb4:	883b      	ldrh	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <SDO_EndVelocity+0x48>)
 8000cba:	701a      	strb	r2, [r3, #0]
	data[1] = (EndVelocity>>8)	& 0xFFU;
 8000cbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cc0:	121b      	asrs	r3, r3, #8
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <SDO_EndVelocity+0x48>)
 8000cc8:	705a      	strb	r2, [r3, #1]
//	data[2] = (EndVelocity>>16)	& 0xFFU;
//	data[3] = (EndVelocity>>24)	& 0xFFU;
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x60FF, 0x00, data, 2);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000cd0:	78f9      	ldrb	r1, [r7, #3]
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <SDO_EndVelocity+0x48>)
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f246 02ff 	movw	r2, #24831	@ 0x60ff
 8000ce0:	f7ff fc35 	bl	800054e <write_SDO>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000558 	.word	0x24000558

08000cf0 <Electronic_Gear_Molecule>:
void Electronic_Gear_Molecule(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t value)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af02      	add	r7, sp, #8
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	72fb      	strb	r3, [r7, #11]
	data[0] = value			& 0xFFU;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <Electronic_Gear_Molecule+0x58>)
 8000d04:	701a      	strb	r2, [r3, #0]
	data[1] = (value>>8)	& 0xFFU;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <Electronic_Gear_Molecule+0x58>)
 8000d0e:	705a      	strb	r2, [r3, #1]
	data[2] = (value>>16)	& 0xFFU;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <Electronic_Gear_Molecule+0x58>)
 8000d18:	709a      	strb	r2, [r3, #2]
	data[3] = (value>>24)	& 0xFFU;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0e1b      	lsrs	r3, r3, #24
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <Electronic_Gear_Molecule+0x58>)
 8000d22:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6093, 0x01, data, 4);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2a:	7af9      	ldrb	r1, [r7, #11]
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <Electronic_Gear_Molecule+0x58>)
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2301      	movs	r3, #1
 8000d36:	f246 0293 	movw	r2, #24723	@ 0x6093
 8000d3a:	f7ff fc08 	bl	800054e <write_SDO>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000558 	.word	0x24000558

08000d4c <Electronic_Gear_Denominator>:
void Electronic_Gear_Denominator(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t value)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	460b      	mov	r3, r1
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	72fb      	strb	r3, [r7, #11]
	data[0] = value			& 0xFFU;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <Electronic_Gear_Denominator+0x58>)
 8000d60:	701a      	strb	r2, [r3, #0]
	data[1] = (value>>8)	& 0xFFU;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <Electronic_Gear_Denominator+0x58>)
 8000d6a:	705a      	strb	r2, [r3, #1]
	data[2] = (value>>16)	& 0xFFU;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <Electronic_Gear_Denominator+0x58>)
 8000d74:	709a      	strb	r2, [r3, #2]
	data[3] = (value>>24)	& 0xFFU;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0e1b      	lsrs	r3, r3, #24
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <Electronic_Gear_Denominator+0x58>)
 8000d7e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6093, 0x02, data, 4);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d86:	7af9      	ldrb	r1, [r7, #11]
 8000d88:	2304      	movs	r3, #4
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <Electronic_Gear_Denominator+0x58>)
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2302      	movs	r3, #2
 8000d92:	f246 0293 	movw	r2, #24723	@ 0x6093
 8000d96:	f7ff fbda 	bl	800054e <write_SDO>
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24000558 	.word	0x24000558

08000da8 <SDO_ProfileAcceleration>:

void SDO_ProfileAcceleration(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t Acceleration)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	460b      	mov	r3, r1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	72fb      	strb	r3, [r7, #11]
	data[0] = Acceleration			& 0xFFU;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <SDO_ProfileAcceleration+0x58>)
 8000dbc:	701a      	strb	r2, [r3, #0]
	data[1] = (Acceleration>>8)	& 0xFFU;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <SDO_ProfileAcceleration+0x58>)
 8000dc6:	705a      	strb	r2, [r3, #1]
	data[2] = (Acceleration>>16)	& 0xFFU;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0c1b      	lsrs	r3, r3, #16
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <SDO_ProfileAcceleration+0x58>)
 8000dd0:	709a      	strb	r2, [r3, #2]
	data[3] = (Acceleration>>24)	& 0xFFU;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	0e1b      	lsrs	r3, r3, #24
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <SDO_ProfileAcceleration+0x58>)
 8000dda:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6083, 0x00, data, 4);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000de2:	7af9      	ldrb	r1, [r7, #11]
 8000de4:	2304      	movs	r3, #4
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <SDO_ProfileAcceleration+0x58>)
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	f246 0283 	movw	r2, #24707	@ 0x6083
 8000df2:	f7ff fbac 	bl	800054e <write_SDO>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000558 	.word	0x24000558

08000e04 <SDO_ProfileDeceleration>:
void SDO_ProfileDeceleration(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t Deceleration)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	72fb      	strb	r3, [r7, #11]
	data[0] = Deceleration			& 0xFFU;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <SDO_ProfileDeceleration+0x58>)
 8000e18:	701a      	strb	r2, [r3, #0]
	data[1] = (Deceleration>>8)		& 0xFFU;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <SDO_ProfileDeceleration+0x58>)
 8000e22:	705a      	strb	r2, [r3, #1]
	data[2] = (Deceleration>>16)	& 0xFFU;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	0c1b      	lsrs	r3, r3, #16
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <SDO_ProfileDeceleration+0x58>)
 8000e2c:	709a      	strb	r2, [r3, #2]
	data[3] = (Deceleration>>24)	& 0xFFU;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	0e1b      	lsrs	r3, r3, #24
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <SDO_ProfileDeceleration+0x58>)
 8000e36:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6084, 0x00, data, 4);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000e3e:	7af9      	ldrb	r1, [r7, #11]
 8000e40:	2304      	movs	r3, #4
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <SDO_ProfileDeceleration+0x58>)
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f246 0284 	movw	r2, #24708	@ 0x6084
 8000e4e:	f7ff fb7e 	bl	800054e <write_SDO>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000558 	.word	0x24000558

08000e60 <SDO_Position>:
	data[2] = (value>>16)	& 0xFFU;
	data[3] = (value>>24)	& 0xFFU;
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x60C1, 0x01, data, 4);
}
void SDO_Position(CANopenNodeSTM32* __canopenNode, uint8_t __node_id)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
	SDO_ProfileVelocity(__canopenNode,  __node_id,  0xC350);
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000e72:	4619      	mov	r1, r3
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fee7 	bl	8000c48 <SDO_ProfileVelocity>
	SDO_EndVelocity(__canopenNode,  __node_id,  0x00);
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff0f 	bl	8000ca4 <SDO_EndVelocity>
	SDO_ProfileAcceleration(__canopenNode,  __node_id,  0x61A8);
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff8a 	bl	8000da8 <SDO_ProfileAcceleration>
	SDO_ProfileDeceleration(__canopenNode,  __node_id,  0x30D4);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffb1 	bl	8000e04 <SDO_ProfileDeceleration>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <SDOmode>:
uint8_t SDOmode(CANopenNodeSTM32* __canopenNode, uint8_t __node_id, OPERATION_MODE mode)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	70bb      	strb	r3, [r7, #2]
	data[0] = mode	& 0xFFU;
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <SDOmode+0x4c>)
 8000ebe:	78bb      	ldrb	r3, [r7, #2]
 8000ec0:	7013      	strb	r3, [r2, #0]
	data[1] = 0x00;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <SDOmode+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <SDOmode+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <SDOmode+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	70da      	strb	r2, [r3, #3]
	write_SDO(__canopenNode->canOpenStack->SDOclient, __node_id, 0x6060, 0x00, data, 1);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000eda:	78f9      	ldrb	r1, [r7, #3]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SDOmode+0x4c>)
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f246 0260 	movw	r2, #24672	@ 0x6060
 8000eea:	f7ff fb30 	bl	800054e <write_SDO>
	return mode;
 8000eee:	78bb      	ldrb	r3, [r7, #2]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	24000558 	.word	0x24000558

08000efc <SDO_SetParam>:
	data[3] = 0x00;
	write_SDO(__canopenNode->canOpenStack->SDOclient, __node_id, 0x6061, 0x00, data, 1);
	return mode;
}
void SDO_SetParam(CANopenNodeSTM32* canopenNode, uint8_t node_id, OPERATION_MODE mode)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	70bb      	strb	r3, [r7, #2]
	SDOmode(canopenNode, node_id, mode);
 8000f0c:	78ba      	ldrb	r2, [r7, #2]
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffca 	bl	8000eac <SDOmode>
	switch(mode){
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d00c      	beq.n	8000f38 <SDO_SetParam+0x3c>
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	dc0c      	bgt.n	8000f3c <SDO_SetParam+0x40>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d002      	beq.n	8000f2c <SDO_SetParam+0x30>
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d00a      	beq.n	8000f40 <SDO_SetParam+0x44>
	case PROFILE_TORQUE_MODE:
	{
		break;
	}
	default:
		break;
 8000f2a:	e007      	b.n	8000f3c <SDO_SetParam+0x40>
		SDO_Position(canopenNode, node_id);
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff95 	bl	8000e60 <SDO_Position>
		break;
 8000f36:	e004      	b.n	8000f42 <SDO_SetParam+0x46>
		break;
 8000f38:	bf00      	nop
 8000f3a:	e002      	b.n	8000f42 <SDO_SetParam+0x46>
		break;
 8000f3c:	bf00      	nop
 8000f3e:	e000      	b.n	8000f42 <SDO_SetParam+0x46>
		break;
 8000f40:	bf00      	nop
	}
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <SetTemperatureMax>:
#include "SetTemp_ci.h"
#include "response_ci.h"
void SetTemperatureMax(char **argv, uint8_t argv_num)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	70fb      	strb	r3, [r7, #3]
	
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <app_led_blink_all>:
		}
	}
}

void app_led_blink_all(uint16_t freq)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	app_led_state.led_state_name = LED_BLINK_STATE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <app_led_blink_all+0x24>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
	app_led_state.time = freq;
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <app_led_blink_all+0x24>)
 8000f78:	6053      	str	r3, [r2, #4]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2400055c 	.word	0x2400055c

08000f8c <app_led_light_up>:
void app_led_light_up(uint16_t freq)		//overflow effect
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	app_led_state.led_state_name = LED_LIGHT_UP_STATE;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <app_led_light_up+0x34>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	701a      	strb	r2, [r3, #0]
	app_led_state.time = freq;
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <app_led_light_up+0x34>)
 8000fa0:	6053      	str	r3, [r2, #4]
	app_led_state.effect.light_up.index = 0;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <app_led_light_up+0x34>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	735a      	strb	r2, [r3, #13]
	app_led_state.effect.light_up.direct =1;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <app_led_light_up+0x34>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	739a      	strb	r2, [r3, #14]
	app_led_state.effect.light_up.sta = 1;
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <app_led_light_up+0x34>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	731a      	strb	r2, [r3, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	2400055c 	.word	0x2400055c

08000fc4 <find_command_info>:

extern const	cli_command_entry_t command_entry_table[];
CANopenNodeSTM32 *canopenNode;
//	/*1
const cli_command_info_t* find_command_info(char *cmd)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	const cli_command_entry_t *command_entry = command_entry_table;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <find_command_info+0x40>)
 8000fce:	60fb      	str	r3, [r7, #12]
	while(command_entry -> command_info != NULL)
 8000fd0:	e00e      	b.n	8000ff0 <find_command_info+0x2c>
	{
		if(strcmp(command_entry ->name, cmd) == 0)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f981 	bl	80002e0 <strcmp>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <find_command_info+0x26>
		{
			return command_entry -> command_info;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	e007      	b.n	8000ffa <find_command_info+0x36>
		}
		command_entry++;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3308      	adds	r3, #8
 8000fee:	60fb      	str	r3, [r7, #12]
	while(command_entry -> command_info != NULL)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1ec      	bne.n	8000fd2 <find_command_info+0xe>
	}
	return NULL;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	080131a0 	.word	0x080131a0

08001008 <cli_command_excute>:
//	}
//	return NULL;
//}

void cli_command_excute(char *uart_buff, uint8_t len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b090      	sub	sp, #64	@ 0x40
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	char *argv[10];				
	uint8_t argv_num = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	char *pch;
	pch = strtok(uart_buff," ");
 800101a:	4919      	ldr	r1, [pc, #100]	@ (8001080 <cli_command_excute+0x78>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f011 f849 	bl	80120b4 <strtok>
 8001022:	63b8      	str	r0, [r7, #56]	@ 0x38
	while(pch != NULL)
 8001024:	e00f      	b.n	8001046 <cli_command_excute+0x3e>
	{		
		argv[argv_num++] = pch;
 8001026:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	3340      	adds	r3, #64	@ 0x40
 8001034:	443b      	add	r3, r7
 8001036:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001038:	f843 2c38 	str.w	r2, [r3, #-56]
		pch = strtok (NULL, " "); 
 800103c:	4910      	ldr	r1, [pc, #64]	@ (8001080 <cli_command_excute+0x78>)
 800103e:	2000      	movs	r0, #0
 8001040:	f011 f838 	bl	80120b4 <strtok>
 8001044:	63b8      	str	r0, [r7, #56]	@ 0x38
	while(pch != NULL)
 8001046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ec      	bne.n	8001026 <cli_command_excute+0x1e>
	}
	// /*	1
	const cli_command_entry_t *command_entry_help = command_entry_table;
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <cli_command_excute+0x7c>)
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
	const cli_command_info_t* command_info = find_command_info(argv[0]);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ffb6 	bl	8000fc4 <find_command_info>
 8001058:	6338      	str	r0, [r7, #48]	@ 0x30
	if(command_info != NULL)
 800105a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <cli_command_excute+0x6a>
	{
		command_info->function(argv,argv_num);
 8001060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	4610      	mov	r0, r2
 800106e:	4798      	blx	r3
	else
	{
		response_print("find not found command");
	}
	*/
}
 8001070:	e002      	b.n	8001078 <cli_command_excute+0x70>
		response_print("find not found command \n");
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <cli_command_excute+0x80>)
 8001074:	f7ff fa46 	bl	8000504 <response_print>
}
 8001078:	bf00      	nop
 800107a:	3740      	adds	r7, #64	@ 0x40
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08012e3c 	.word	0x08012e3c
 8001084:	080131a0 	.word	0x080131a0
 8001088:	08012e40 	.word	0x08012e40

0800108c <set_effect_led>:
#include "effect_led_ci.h"

void set_effect_led(char **argv, uint8_t argv_num)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
	uint8_t index_effect = atoi(argv[1]);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3304      	adds	r3, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f010 fb9a 	bl	80117d8 <atoi>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
	if(index_effect == 1)
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10e      	bne.n	80010cc <set_effect_led+0x40>
	{
		uint16_t freq = atoi(argv[2]);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3308      	adds	r3, #8
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f010 fb8f 	bl	80117d8 <atoi>
 80010ba:	4603      	mov	r3, r0
 80010bc:	81bb      	strh	r3, [r7, #12]
		app_led_blink_all(freq);
 80010be:	89bb      	ldrh	r3, [r7, #12]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff4f 	bl	8000f64 <app_led_blink_all>
//		response_print("ok_10\n");
//		HAL_Delay(30);
		response_print("ok_1\n");
 80010c6:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <set_effect_led+0x6c>)
 80010c8:	f7ff fa1c 	bl	8000504 <response_print>
	}
	if(index_effect == 2)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d10e      	bne.n	80010f0 <set_effect_led+0x64>
	{
		uint16_t freq = atoi(argv[2]);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3308      	adds	r3, #8
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f010 fb7d 	bl	80117d8 <atoi>
 80010de:	4603      	mov	r3, r0
 80010e0:	817b      	strh	r3, [r7, #10]
		app_led_light_up(freq);
 80010e2:	897b      	ldrh	r3, [r7, #10]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff51 	bl	8000f8c <app_led_light_up>
		response_print("ok_2\n");
 80010ea:	4804      	ldr	r0, [pc, #16]	@ (80010fc <set_effect_led+0x70>)
 80010ec:	f7ff fa0a 	bl	8000504 <response_print>
	}
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	08012f18 	.word	0x08012f18
 80010fc:	08012f20 	.word	0x08012f20

08001100 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001128:	78fa      	ldrb	r2, [r7, #3]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	2304      	movs	r3, #4
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <OD_getIndex+0x14>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	e000      	b.n	8001170 <OD_getIndex+0x16>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <OD_extension_init+0x14>
 800118c:	2305      	movs	r3, #5
 800118e:	e003      	b.n	8001198 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	460b      	mov	r3, r1
 80011b2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80011b4:	7af9      	ldrb	r1, [r7, #11]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2304      	movs	r3, #4
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f001 f83c 	bl	800223c <OD_get_value>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00c      	beq.n	80011fc <OD_read_1014_default+0x2e>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	7c5b      	ldrb	r3, [r3, #17]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d108      	bne.n	80011fc <OD_read_1014_default+0x2e>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d902      	bls.n	80011fc <OD_read_1014_default+0x2e>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80011fc:	2309      	movs	r3, #9
 80011fe:	e01b      	b.n	8001238 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <OD_read_1014_default+0x44>
 800120e:	2300      	movs	r3, #0
 8001210:	e001      	b.n	8001216 <OD_read_1014_default+0x48>
 8001212:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001216:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800121e:	3380      	adds	r3, #128	@ 0x80
 8001220:	461a      	mov	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 8001228:	6939      	ldr	r1, [r7, #16]
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f7ff ff86 	bl	800113c <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2204      	movs	r2, #4
 8001234:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00f      	beq.n	8001274 <OD_read_1003+0x34>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00c      	beq.n	8001274 <OD_read_1003+0x34>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d803      	bhi.n	800126e <OD_read_1003+0x2e>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	7c5b      	ldrb	r3, [r3, #17]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <OD_read_1003+0x34>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8001274:	2309      	movs	r3, #9
 8001276:	e04c      	b.n	8001312 <OD_read_1003+0xd2>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	7f1b      	ldrb	r3, [r3, #28]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d801      	bhi.n	800128a <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8001286:	2309      	movs	r3, #9
 8001288:	e043      	b.n	8001312 <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0) {
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	7c5b      	ldrb	r3, [r3, #17]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10b      	bne.n	80012aa <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	4619      	mov	r1, r3
 800129a:	68b8      	ldr	r0, [r7, #8]
 800129c:	f7ff ff3e 	bl	800111c <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e033      	b.n	8001312 <OD_read_1003+0xd2>
    }
    else if (stream->subIndex <= em->fifoCount) {
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	7c5a      	ldrb	r2, [r3, #17]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d82b      	bhi.n	8001310 <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	7f5b      	ldrb	r3, [r3, #29]
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	7c5b      	ldrb	r3, [r3, #17]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 80012c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da07      	bge.n	80012e0 <OD_read_1003+0xa0>
            index += em->fifoSize;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	7f1b      	ldrb	r3, [r3, #28]
 80012d4:	461a      	mov	r2, r3
 80012d6:	8afb      	ldrh	r3, [r7, #22]
 80012d8:	4413      	add	r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	82fb      	strh	r3, [r7, #22]
 80012de:	e007      	b.n	80012f0 <OD_read_1003+0xb0>
        }
        else if (index >= (em->fifoSize)) {
 80012e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	7f12      	ldrb	r2, [r2, #28]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	db01      	blt.n	80012f0 <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 80012ec:	2309      	movs	r3, #9
 80012ee:	e010      	b.n	8001312 <OD_read_1003+0xd2>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	68b8      	ldr	r0, [r7, #8]
 8001302:	f7ff ff1b 	bl	800113c <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2204      	movs	r2, #4
 800130a:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	e000      	b.n	8001312 <OD_read_1003+0xd2>
    }
    else {
        return ODR_NO_DATA;
 8001310:	2319      	movs	r3, #25
    }
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00c      	beq.n	8001348 <OD_write_1003+0x2e>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	7c5b      	ldrb	r3, [r3, #17]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d108      	bne.n	8001348 <OD_write_1003+0x2e>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <OD_write_1003+0x2e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d102      	bne.n	8001348 <OD_write_1003+0x2e>
        || countWritten == NULL)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 8001348:	2309      	movs	r3, #9
 800134a:	e012      	b.n	8001372 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7ff fed7 	bl	8001100 <CO_getUint8>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8001358:	230f      	movs	r3, #15
 800135a:	e00a      	b.n	8001372 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af02      	add	r7, sp, #8
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d01a      	beq.n	80013ca <CO_EM_init+0x4e>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d017      	beq.n	80013ca <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <CO_EM_init+0x2c>
 80013a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d810      	bhi.n	80013ca <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00d      	beq.n	80013ca <CO_EM_init+0x4e>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00a      	beq.n	80013ca <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 80013b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <CO_EM_init+0x4e>
 80013bc:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db02      	blt.n	80013ca <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 80013c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e0a7      	b.n	8001520 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 80013d0:	2250      	movs	r2, #80	@ 0x50
 80013d2:	2100      	movs	r1, #0
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f010 fe65 	bl	80120a4 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80013e0:	2300      	movs	r3, #0
 80013e2:	2201      	movs	r2, #1
 80013e4:	2100      	movs	r1, #0
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 ff8f 	bl	800230a <OD_getPtr>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80013fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <CO_EM_init+0x92>
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff feaa 	bl	800115a <OD_getIndex>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800140c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800140e:	f06f 030b 	mvn.w	r3, #11
 8001412:	e085      	b.n	8001520 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001428:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 800142a:	f107 0210 	add.w	r2, r7, #16
 800142e:	2301      	movs	r3, #1
 8001430:	2100      	movs	r1, #0
 8001432:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001434:	f7ff feb6 	bl	80011a4 <OD_get_u32>
 8001438:	4603      	mov	r3, r0
 800143a:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 800143c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d104      	bne.n	800144e <CO_EM_init+0xd2>
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4b38      	ldr	r3, [pc, #224]	@ (8001528 <CO_EM_init+0x1ac>)
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d010      	beq.n	8001470 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800144e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <CO_EM_init+0xe6>
 8001454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001456:	f7ff fe80 	bl	800115a <OD_getIndex>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001460:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 8001462:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 800146a:	f06f 030b 	mvn.w	r3, #11
 800146e:	e057      	b.n	8001520 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8001470:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001474:	b29b      	uxth	r3, r3
 8001476:	3380      	adds	r3, #128	@ 0x80
 8001478:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	0fdb      	lsrs	r3, r3, #31
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <CO_EM_init+0x1b0>)
 8001492:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a26      	ldr	r2, [pc, #152]	@ (8001530 <CO_EM_init+0x1b4>)
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3330      	adds	r3, #48	@ 0x30
 800149e:	4619      	mov	r1, r3
 80014a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014a2:	f7ff fe6b 	bl	800117c <OD_extension_init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80014aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00c      	beq.n	80014cc <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80014b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <CO_EM_init+0x14a>
 80014b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014ba:	f7ff fe4e 	bl	800115a <OD_getIndex>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c4:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80014c6:	f06f 030b 	mvn.w	r3, #11
 80014ca:	e029      	b.n	8001520 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80014d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 80014d6:	8aba      	ldrh	r2, [r7, #20]
 80014d8:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80014da:	2300      	movs	r3, #0
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2308      	movs	r3, #8
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f005 f9fb 	bl	80068e0 <CO_CANtxBufferInit>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	e010      	b.n	8001520 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <CO_EM_init+0x1b8>)
 8001508:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <CO_EM_init+0x1bc>)
 800150e:	649a      	str	r2, [r3, #72]	@ 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3340      	adds	r3, #64	@ 0x40
 8001514:	4619      	mov	r1, r3
 8001516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001518:	f7ff fe30 	bl	800117c <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 800151c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	7ffff800 	.word	0x7ffff800
 800152c:	080011cf 	.word	0x080011cf
 8001530:	08001ead 	.word	0x08001ead
 8001534:	08001241 	.word	0x08001241
 8001538:	0800131b 	.word	0x0800131b

0800153c <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 800153c:	b480      	push	{r7}
 800153e:	b08d      	sub	sp, #52	@ 0x34
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	4611      	mov	r1, r2
 8001548:	461a      	mov	r2, r3
 800154a:	460b      	mov	r3, r1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	4613      	mov	r3, r2
 8001550:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a6 	beq.w	80016a6 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	2201      	movs	r2, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8001572:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001576:	2b09      	cmp	r3, #9
 8001578:	d90a      	bls.n	8001590 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 800157a:	2305      	movs	r3, #5
 800157c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8001580:	2301      	movs	r3, #1
 8001582:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8001586:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 800158a:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8001590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 800159a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80015a2:	4013      	ands	r3, r2
 80015a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 80015ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <CO_error+0x88>
            return;
 80015b6:	e079      	b.n	80016ac <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 80015b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d074      	beq.n	80016aa <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 80015c0:	2300      	movs	r3, #0
 80015c2:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	061a      	lsls	r2, r3, #24
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 80015ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d0:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d6:	f3ef 8210 	mrs	r2, PRIMASK
 80015da:	617a      	str	r2, [r7, #20]
  return(result);
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <CO_error+0xc0>
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e00b      	b.n	8001614 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 80015fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b25a      	sxtb	r2, r3
 8001602:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8001606:	43db      	mvns	r3, r3
 8001608:	b25b      	sxtb	r3, r3
 800160a:	4013      	ands	r3, r2
 800160c:	b25b      	sxtb	r3, r3
 800160e:	b2da      	uxtb	r2, r3
 8001610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001612:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	7f1b      	ldrb	r3, [r3, #28]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d93c      	bls.n	8001696 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	7f5b      	ldrb	r3, [r3, #29]
 8001620:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8001622:	7efb      	ldrb	r3, [r7, #27]
 8001624:	3301      	adds	r3, #1
 8001626:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	7f1b      	ldrb	r3, [r3, #28]
 800162e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001632:	429a      	cmp	r2, r3
 8001634:	d302      	bcc.n	800163c <CO_error+0x100>
            fifoWrPtrNext = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	7f9b      	ldrb	r3, [r3, #30]
 8001640:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001644:	429a      	cmp	r2, r3
 8001646:	d103      	bne.n	8001650 <CO_error+0x114>
            em->fifoOverflow = 1;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	77da      	strb	r2, [r3, #31]
 800164e:	e022      	b.n	8001696 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	7efb      	ldrb	r3, [r7, #27]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	6a3a      	ldr	r2, [r7, #32]
 800165c:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	7efb      	ldrb	r3, [r7, #27]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4413      	add	r3, r2
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001672:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7f1b      	ldrb	r3, [r3, #28]
 8001680:	3b01      	subs	r3, #1
 8001682:	429a      	cmp	r2, r3
 8001684:	da07      	bge.n	8001696 <CO_error+0x15a>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f383 8810 	msr	PRIMASK, r3
}
 80016a4:	e002      	b.n	80016ac <CO_error+0x170>
    if (em == NULL) return;
 80016a6:	bf00      	nop
 80016a8:	e000      	b.n	80016ac <CO_error+0x170>
            return;
 80016aa:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 80016ac:	3734      	adds	r7, #52	@ 0x34
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <OD_getIndex+0x14>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	e000      	b.n	80016e8 <OD_getIndex+0x16>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <OD_extension_init>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <OD_extension_init+0x14>
 8001704:	2305      	movs	r3, #5
 8001706:	e003      	b.n	8001710 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <OD_get_u32>:
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af02      	add	r7, sp, #8
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	460b      	mov	r3, r1
 800172a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800172c:	7af9      	ldrb	r1, [r7, #11]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2304      	movs	r3, #4
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fd80 	bl	800223c <OD_get_value>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8001746:	b480      	push	{r7}
 8001748:	b087      	sub	sp, #28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	791b      	ldrb	r3, [r3, #4]
 8001758:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3305      	adds	r3, #5
 800175e:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8001760:	7cfb      	ldrb	r3, [r7, #19]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b25a      	sxtb	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2201      	movs	r2, #1
 8001774:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b088      	sub	sp, #32
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <OD_write_1016+0x40>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00f      	beq.n	80017c2 <OD_write_1016+0x40>
        || stream->subIndex < 1
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	7c5b      	ldrb	r3, [r3, #17]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	7c5a      	ldrb	r2, [r3, #17]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	7a1b      	ldrb	r3, [r3, #8]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d805      	bhi.n	80017c2 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d102      	bne.n	80017c2 <OD_write_1016+0x40>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 80017c2:	2309      	movs	r3, #9
 80017c4:	e020      	b.n	8001808 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f7ff ff75 	bl	80016b6 <CO_getUint32>
 80017cc:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	7c5b      	ldrb	r3, [r3, #17]
 80017dc:	3b01      	subs	r3, #1
 80017de:	b2d9      	uxtb	r1, r3
 80017e0:	8abb      	ldrh	r3, [r7, #20]
 80017e2:	7dfa      	ldrb	r2, [r7, #23]
 80017e4:	69f8      	ldr	r0, [r7, #28]
 80017e6:	f000 f8bf 	bl	8001968 <CO_HBconsumer_initEntry>
 80017ea:	4603      	mov	r3, r0
 80017ec:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 80017ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 80017f6:	2308      	movs	r3, #8
 80017f8:	e006      	b.n	8001808 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fb53 	bl	8001eac <OD_writeOriginal>
 8001806:	4603      	mov	r3, r0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <CO_HBconsumer_init+0x2c>
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <CO_HBconsumer_init+0x2c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8001830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <CO_HBconsumer_init+0x2c>
 8001836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	e08a      	b.n	8001958 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8001842:	2230      	movs	r2, #48	@ 0x30
 8001844:	2100      	movs	r1, #0
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f010 fc2c 	bl	80120a4 <memset>
    HBcons->em = em;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800185c:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001862:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8001864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001866:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	429a      	cmp	r2, r3
 800186c:	d304      	bcc.n	8001878 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 800186e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001870:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8001872:	3b01      	subs	r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	e000      	b.n	800187a <CO_HBconsumer_init+0x6a>
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800187e:	2300      	movs	r3, #0
 8001880:	77fb      	strb	r3, [r7, #31]
 8001882:	e041      	b.n	8001908 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8001884:	7ffb      	ldrb	r3, [r7, #31]
 8001886:	3301      	adds	r3, #1
 8001888:	b2d9      	uxtb	r1, r3
 800188a:	f107 0214 	add.w	r2, r7, #20
 800188e:	2301      	movs	r3, #1
 8001890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001892:	f7ff ff43 	bl	800171c <OD_get_u32>
 8001896:	4603      	mov	r3, r0
 8001898:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 800189a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00c      	beq.n	80018bc <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 80018a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <CO_HBconsumer_init+0xa6>
 80018a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018aa:	f7ff ff12 	bl	80016d2 <OD_getIndex>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b4:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 80018b6:	f06f 030b 	mvn.w	r3, #11
 80018ba:	e04d      	b.n	8001958 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	7f7a      	ldrb	r2, [r7, #29]
 80018ca:	7ff9      	ldrb	r1, [r7, #31]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f84b 	bl	8001968 <CO_HBconsumer_initEntry>
 80018d2:	4603      	mov	r3, r0
 80018d4:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 80018d6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d011      	beq.n	8001902 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 80018de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <CO_HBconsumer_init+0xe2>
 80018e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018e6:	f7ff fef4 	bl	80016d2 <OD_getIndex>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f0:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 80018f2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80018f6:	f113 0f0c 	cmn.w	r3, #12
 80018fa:	d002      	beq.n	8001902 <CO_HBconsumer_init+0xf2>
                return ret;
 80018fc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001900:	e02a      	b.n	8001958 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	3301      	adds	r3, #1
 8001906:	77fb      	strb	r3, [r7, #31]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	7a1b      	ldrb	r3, [r3, #8]
 800190c:	7ffa      	ldrb	r2, [r7, #31]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3b8      	bcc.n	8001884 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <CO_HBconsumer_init+0x150>)
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <CO_HBconsumer_init+0x154>)
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3320      	adds	r3, #32
 8001928:	4619      	mov	r1, r3
 800192a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800192c:	f7ff fee2 	bl	80016f4 <OD_extension_init>
 8001930:	4603      	mov	r3, r0
 8001932:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001934:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00c      	beq.n	8001956 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 800193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <CO_HBconsumer_init+0x140>
 8001942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001944:	f7ff fec5 	bl	80016d2 <OD_getIndex>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800194e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001950:	f06f 030b 	mvn.w	r3, #11
 8001954:	e000      	b.n	8001958 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	08001dfd 	.word	0x08001dfd
 8001964:	08001783 	.word	0x08001783

08001968 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08d      	sub	sp, #52	@ 0x34
 800196c:	af04      	add	r7, sp, #16
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	70fb      	strb	r3, [r7, #3]
 800197a:	460b      	mov	r3, r1
 800197c:	70bb      	strb	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001982:	2300      	movs	r3, #0
 8001984:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <CO_HBconsumer_initEntry+0x2e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7a1b      	ldrb	r3, [r3, #8]
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	429a      	cmp	r2, r3
 8001994:	d302      	bcc.n	800199c <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e076      	b.n	8001a8a <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 800199c:	883b      	ldrh	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <CO_HBconsumer_initEntry+0x84>
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d021      	beq.n	80019ec <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	77bb      	strb	r3, [r7, #30]
 80019ac:	e019      	b.n	80019e2 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	7fbb      	ldrb	r3, [r7, #30]
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	f107 0408 	add.w	r4, r7, #8
 80019bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	7fbb      	ldrb	r3, [r7, #30]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d008      	beq.n	80019dc <CO_HBconsumer_initEntry+0x74>
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <CO_HBconsumer_initEntry+0x74>
 80019d0:	7a3b      	ldrb	r3, [r7, #8]
 80019d2:	78ba      	ldrb	r2, [r7, #2]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d101      	bne.n	80019dc <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 80019d8:	23f4      	movs	r3, #244	@ 0xf4
 80019da:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80019dc:	7fbb      	ldrb	r3, [r7, #30]
 80019de:	3301      	adds	r3, #1
 80019e0:	77bb      	strb	r3, [r7, #30]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7a1b      	ldrb	r3, [r3, #8]
 80019e6:	7fba      	ldrb	r2, [r7, #30]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3e0      	bcc.n	80019ae <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 80019ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d148      	bne.n	8001a86 <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	78ba      	ldrb	r2, [r7, #2]
 8001a04:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001a06:	883b      	ldrh	r3, [r7, #0]
 8001a08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	22ff      	movs	r2, #255	@ 0xff
 8001a1a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00c      	beq.n	8001a44 <CO_HBconsumer_initEntry+0xdc>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8001a3a:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	709a      	strb	r2, [r3, #2]
 8001a42:	e007      	b.n	8001a54 <CO_HBconsumer_initEntry+0xec>
        }
        else {
            COB_ID = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2200      	movs	r2, #0
 8001a52:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001a6e:	8bba      	ldrh	r2, [r7, #28]
 8001a70:	4c08      	ldr	r4, [pc, #32]	@ (8001a94 <CO_HBconsumer_initEntry+0x12c>)
 8001a72:	9402      	str	r4, [sp, #8]
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2300      	movs	r3, #0
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001a7e:	f004 fed3 	bl	8006828 <CO_CANrxBufferInit>
 8001a82:	4603      	mov	r3, r0
 8001a84:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8001a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	08001747 	.word	0x08001747

08001a98 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	81fb      	strh	r3, [r7, #14]
 8001aa8:	89fb      	ldrh	r3, [r7, #14]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <OD_getIndex+0x14>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	e000      	b.n	8001acc <OD_getIndex+0x16>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <OD_extension_init>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <OD_extension_init+0x14>
 8001ae8:	2305      	movs	r3, #5
 8001aea:	e003      	b.n	8001af4 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <OD_get_u16>:
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001b10:	7af9      	ldrb	r1, [r7, #11]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2302      	movs	r3, #2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fb8e 	bl	800223c <OD_get_value>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001b2a:	b480      	push	{r7}
 8001b2c:	b087      	sub	sp, #28
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d10a      	bne.n	8001b6c <CO_NMT_receive+0x42>
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <CO_NMT_receive+0x3c>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	78db      	ldrb	r3, [r3, #3]
 8001b60:	7bba      	ldrb	r2, [r7, #14]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d102      	bne.n	8001b6c <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00c      	beq.n	8001ba6 <OD_write_1017+0x2e>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	7c5b      	ldrb	r3, [r3, #17]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d108      	bne.n	8001ba6 <OD_write_1017+0x2e>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d102      	bne.n	8001ba6 <OD_write_1017+0x2e>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8001ba6:	2309      	movs	r3, #9
 8001ba8:	e017      	b.n	8001bda <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001bb0:	68b8      	ldr	r0, [r7, #8]
 8001bb2:	f7ff ff71 	bl	8001a98 <CO_getUint16>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bbe:	fb03 f202 	mul.w	r2, r3, r2
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f96a 	bl	8001eac <OD_writeOriginal>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af04      	add	r7, sp, #16
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <CO_NMT_init+0x36>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <CO_NMT_init+0x36>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <CO_NMT_init+0x36>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <CO_NMT_init+0x36>
 8001c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
 8001c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <CO_NMT_init+0x3c>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e0b1      	b.n	8001d84 <CO_NMT_init+0x1a0>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001c20:	2234      	movs	r2, #52	@ 0x34
 8001c22:	2100      	movs	r1, #0
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f010 fa3d 	bl	80120a4 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8c3a      	ldrh	r2, [r7, #32]
 8001c40:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001c48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001c58:	f107 0214 	add.w	r2, r7, #20
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	2100      	movs	r1, #0
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f7ff ff4d 	bl	8001b00 <OD_get_u16>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001c6a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <CO_NMT_init+0xa8>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <CO_NMT_init+0xa2>
 8001c78:	68b8      	ldr	r0, [r7, #8]
 8001c7a:	f7ff ff1c 	bl	8001ab6 <OD_getIndex>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c84:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001c86:	f06f 030b 	mvn.w	r3, #11
 8001c8a:	e07b      	b.n	8001d84 <CO_NMT_init+0x1a0>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8001c8c:	8abb      	ldrh	r3, [r7, #20]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c94:	fb03 f202 	mul.w	r2, r3, r2
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a39      	ldr	r2, [pc, #228]	@ (8001d8c <CO_NMT_init+0x1a8>)
 8001ca6:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a39      	ldr	r2, [pc, #228]	@ (8001d90 <CO_NMT_init+0x1ac>)
 8001cac:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3310      	adds	r3, #16
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	68b8      	ldr	r0, [r7, #8]
 8001cb6:	f7ff ff0f 	bl	8001ad8 <OD_extension_init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001cbe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <CO_NMT_init+0xfc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <CO_NMT_init+0xf6>
 8001ccc:	68b8      	ldr	r0, [r7, #8]
 8001cce:	f7ff fef2 	bl	8001ab6 <OD_getIndex>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cd8:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001cda:	f06f 030b 	mvn.w	r3, #11
 8001cde:	e051      	b.n	8001d84 <CO_NMT_init+0x1a0>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d903      	bls.n	8001cf4 <CO_NMT_init+0x110>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001cf4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001cf6:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001cf8:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <CO_NMT_init+0x1b0>)
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2300      	movs	r3, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d0a:	f004 fd8d 	bl	8006828 <CO_CANrxBufferInit>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <CO_NMT_init+0x13c>
        return ret;
 8001d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d1e:	e031      	b.n	8001d84 <CO_NMT_init+0x1a0>
    }

#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
    /* configure NMT CAN transmission */
    NMT->NMT_CANdevTx = NMT_CANdevTx;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->NMT_TXbuff = CO_CANtxBufferInit(
 8001d26:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001d28:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	2302      	movs	r3, #2
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2300      	movs	r3, #0
 8001d34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d36:	f004 fdd3 	bl	80068e0 <CO_CANtxBufferInit>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
            NMT_txIdx,          /* index of specific buffer inside CAN module */
            CANidTxNMT,         /* CAN identifier */
            0,                  /* rtr */
            2,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->NMT_TXbuff == NULL) {
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <CO_NMT_init+0x16a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	e01a      	b.n	8001d84 <CO_NMT_init+0x1a0>
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001d54:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001d58:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2301      	movs	r3, #1
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2300      	movs	r3, #0
 8001d66:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001d68:	f004 fdba 	bl	80068e0 <CO_CANtxBufferInit>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	631a      	str	r2, [r3, #48]	@ 0x30
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <CO_NMT_init+0x19c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e001      	b.n	8001d84 <CO_NMT_init+0x1a0>
    }

    return ret;
 8001d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	08001dfd 	.word	0x08001dfd
 8001d90:	08001b79 	.word	0x08001b79
 8001d94:	08001b2b 	.word	0x08001b2b

08001d98 <CO_NMT_sendCommand>:
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
/******************************************************************************/
CO_ReturnError_t CO_NMT_sendCommand(CO_NMT_t *NMT,
                                    CO_NMT_command_t command,
                                    uint8_t nodeID)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
 8001da4:	4613      	mov	r3, r2
 8001da6:	70bb      	strb	r3, [r7, #2]
    /* verify arguments */
    if (NMT == NULL) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <CO_NMT_sendCommand+0x1c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e01f      	b.n	8001df4 <CO_NMT_sendCommand+0x5c>
    }

    /* Apply NMT command also to this node, if set so. */
    if (nodeID == 0 || nodeID == NMT->nodeId) {
 8001db4:	78bb      	ldrb	r3, [r7, #2]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <CO_NMT_sendCommand+0x2c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	78ba      	ldrb	r2, [r7, #2]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d102      	bne.n	8001dca <CO_NMT_sendCommand+0x32>
        NMT->internalCommand = command;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	709a      	strb	r2, [r3, #2]
    }

    /* Send NMT master message. */
    NMT->NMT_TXbuff->ident = 0; 		//tự config
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
    NMT->NMT_TXbuff->data[0] = command;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	715a      	strb	r2, [r3, #5]
    NMT->NMT_TXbuff->data[1] = nodeID;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dde:	78ba      	ldrb	r2, [r7, #2]
 8001de0:	719a      	strb	r2, [r3, #6]
    return CO_CANsend(NMT->NMT_CANdevTx, NMT->NMT_TXbuff);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f004 fe3d 	bl	8006a6c <CO_CANsend>
 8001df2:	4603      	mov	r3, r0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <OD_readOriginal+0x20>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <OD_readOriginal+0x20>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001e1c:	2309      	movs	r3, #9
 8001e1e:	e041      	b.n	8001ea4 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001e32:	230e      	movs	r3, #14
 8001e34:	e036      	b.n	8001ea4 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <OD_readOriginal+0x4e>
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d922      	bls.n	8001e90 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d801      	bhi.n	8001e58 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001e54:	2309      	movs	r3, #9
 8001e56:	e025      	b.n	8001ea4 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d90a      	bls.n	8001e8a <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	441a      	add	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001e84:	23ff      	movs	r3, #255	@ 0xff
 8001e86:	75fb      	strb	r3, [r7, #23]
 8001e88:	e002      	b.n	8001e90 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	68b8      	ldr	r0, [r7, #8]
 8001e96:	f010 f9ec 	bl	8012272 <memcpy>

    *countRead = dataLenToCopy;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <OD_writeOriginal+0x20>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <OD_writeOriginal+0x20>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001ecc:	2309      	movs	r3, #9
 8001ece:	e047      	b.n	8001f60 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001ee2:	230e      	movs	r3, #14
 8001ee4:	e03c      	b.n	8001f60 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <OD_writeOriginal+0x4e>
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d922      	bls.n	8001f40 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d801      	bhi.n	8001f08 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001f04:	2309      	movs	r3, #9
 8001f06:	e02b      	b.n	8001f60 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4413      	add	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d90a      	bls.n	8001f3a <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	441a      	add	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001f34:	23ff      	movs	r3, #255	@ 0xff
 8001f36:	75fb      	strb	r3, [r7, #23]
 8001f38:	e002      	b.n	8001f40 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d201      	bcs.n	8001f4c <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	e009      	b.n	8001f60 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	69b8      	ldr	r0, [r7, #24]
 8001f52:	f010 f98e 	bl	8012272 <memcpy>

    *countWritten = dataLenToCopy;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8001f76:	2302      	movs	r3, #2
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001f92:	2302      	movs	r3, #2
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <OD_find+0x1a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <OD_find+0x1e>
        return NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e046      	b.n	800204c <OD_find+0xac>
    }

    uint16_t min = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001fca:	e026      	b.n	800201a <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001fcc:	8afa      	ldrh	r2, [r7, #22]
 8001fce:	8abb      	ldrh	r3, [r7, #20]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	105b      	asrs	r3, r3, #1
 8001fd4:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	89fa      	ldrh	r2, [r7, #14]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	887a      	ldrh	r2, [r7, #2]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d101      	bne.n	8001ff6 <OD_find+0x56>
            return entry;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	e02a      	b.n	800204c <OD_find+0xac>
        }

        if (index < entry->index) {
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d209      	bcs.n	8002014 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8002000:	89fb      	ldrh	r3, [r7, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <OD_find+0x6e>
 8002006:	89fb      	ldrh	r3, [r7, #14]
 8002008:	3b01      	subs	r3, #1
 800200a:	b29b      	uxth	r3, r3
 800200c:	e000      	b.n	8002010 <OD_find+0x70>
 800200e:	89fb      	ldrh	r3, [r7, #14]
 8002010:	82bb      	strh	r3, [r7, #20]
 8002012:	e002      	b.n	800201a <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8002014:	89fb      	ldrh	r3, [r7, #14]
 8002016:	3301      	adds	r3, #1
 8002018:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 800201a:	8afa      	ldrh	r2, [r7, #22]
 800201c:	8abb      	ldrh	r3, [r7, #20]
 800201e:	429a      	cmp	r2, r3
 8002020:	d3d4      	bcc.n	8001fcc <OD_find+0x2c>
        }
    }

    if (min == max) {
 8002022:	8afa      	ldrh	r2, [r7, #22]
 8002024:	8abb      	ldrh	r3, [r7, #20]
 8002026:	429a      	cmp	r2, r3
 8002028:	d10f      	bne.n	800204a <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	8afa      	ldrh	r2, [r7, #22]
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	887a      	ldrh	r2, [r7, #2]
 8002042:	429a      	cmp	r2, r3
 8002044:	d101      	bne.n	800204a <OD_find+0xaa>
            return entry;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	e000      	b.n	800204c <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8002058:	b480      	push	{r7}
 800205a:	b08d      	sub	sp, #52	@ 0x34
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	460b      	mov	r3, r1
 8002066:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <OD_getSub+0x1e>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <OD_getSub+0x22>
 8002076:	2305      	movs	r3, #5
 8002078:	e0d2      	b.n	8002220 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <OD_getSub+0x2c>
 8002080:	2309      	movs	r3, #9
 8002082:	e0cd      	b.n	8002220 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	2b03      	cmp	r3, #3
 8002092:	d050      	beq.n	8002136 <OD_getSub+0xde>
 8002094:	2b03      	cmp	r3, #3
 8002096:	f300 808c 	bgt.w	80021b2 <OD_getSub+0x15a>
 800209a:	2b01      	cmp	r3, #1
 800209c:	d002      	beq.n	80020a4 <OD_getSub+0x4c>
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d015      	beq.n	80020ce <OD_getSub+0x76>
 80020a2:	e086      	b.n	80021b2 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <OD_getSub+0x56>
 80020aa:	230e      	movs	r3, #14
 80020ac:	e0b8      	b.n	8002220 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	791a      	ldrb	r2, [r3, #4]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	609a      	str	r2, [r3, #8]
        break;
 80020cc:	e073      	b.n	80021b6 <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	789b      	ldrb	r3, [r3, #2]
 80020d2:	7afa      	ldrb	r2, [r7, #11]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d301      	bcc.n	80020dc <OD_getSub+0x84>
 80020d8:	230e      	movs	r3, #14
 80020da:	e0a1      	b.n	8002220 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10b      	bne.n	8002100 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	7a1a      	ldrb	r2, [r3, #8]
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	2201      	movs	r2, #1
 80020fc:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 80020fe:	e05a      	b.n	80021b6 <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	7a5a      	ldrb	r2, [r3, #9]
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	7afa      	ldrb	r2, [r7, #11]
 800211a:	3a01      	subs	r2, #1
 800211c:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4413      	add	r3, r2
 8002124:	e000      	b.n	8002128 <OD_getSub+0xd0>
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212a:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	609a      	str	r2, [r3, #8]
        break;
 8002134:	e03f      	b.n	80021b6 <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002146:	e01c      	b.n	8002182 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8002148:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	461a      	mov	r2, r3
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	4413      	add	r3, r2
 800215a:	791b      	ldrb	r3, [r3, #4]
 800215c:	7afa      	ldrb	r2, [r7, #11]
 800215e:	429a      	cmp	r2, r3
 8002160:	d10a      	bne.n	8002178 <OD_getSub+0x120>
                odo = &odoArr[i];
 8002162:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	461a      	mov	r2, r3
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	4413      	add	r3, r2
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8002176:	e00a      	b.n	800218e <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002178:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800217c:	3301      	adds	r3, #1
 800217e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	789b      	ldrb	r3, [r3, #2]
 8002186:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800218a:	429a      	cmp	r2, r3
 800218c:	d3dc      	bcc.n	8002148 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 800218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <OD_getSub+0x140>
 8002194:	230e      	movs	r3, #14
 8002196:	e043      	b.n	8002220 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8002198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219a:	795a      	ldrb	r2, [r3, #5]
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 80021a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 80021a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	609a      	str	r2, [r3, #8]
        break;
 80021b0:	e001      	b.n	80021b6 <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 80021b2:	2309      	movs	r3, #9
 80021b4:	e034      	b.n	8002220 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <OD_getSub+0x16c>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a19      	ldr	r2, [pc, #100]	@ (800222c <OD_getSub+0x1d4>)
 80021c8:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a18      	ldr	r2, [pc, #96]	@ (8002230 <OD_getSub+0x1d8>)
 80021ce:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	2200      	movs	r2, #0
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	e01c      	b.n	8002212 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <OD_getSub+0x192>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	e000      	b.n	80021ec <OD_getSub+0x194>
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <OD_getSub+0x1aa>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	e000      	b.n	8002204 <OD_getSub+0x1ac>
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	7afa      	ldrb	r2, [r7, #11]
 800221c:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3734      	adds	r7, #52	@ 0x34
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	08001dfd 	.word	0x08001dfd
 8002230:	08001ead 	.word	0x08001ead
 8002234:	08001f69 	.word	0x08001f69
 8002238:	08001f85 	.word	0x08001f85

0800223c <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b08f      	sub	sp, #60	@ 0x3c
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	460b      	mov	r3, r1
 800224a:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <OD_get_value+0x1a>
 8002252:	2309      	movs	r3, #9
 8002254:	e024      	b.n	80022a0 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	637b      	str	r3, [r7, #52]	@ 0x34
    OD_size_t countRd = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002260:	f107 0214 	add.w	r2, r7, #20
 8002264:	7af9      	ldrb	r1, [r7, #11]
 8002266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff fef5 	bl	8002058 <OD_getSub>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if (ret != ODR_OK) return ret;
 8002274:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <OD_get_value+0x46>
 800227c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002280:	e00e      	b.n	80022a0 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8002282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <OD_get_value+0x54>
 800228c:	230b      	movs	r3, #11
 800228e:	e007      	b.n	80022a0 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8002290:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800229c:	47a0      	blx	r4
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	373c      	adds	r7, #60	@ 0x3c
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b08f      	sub	sp, #60	@ 0x3c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	460b      	mov	r3, r1
 80022b6:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
    OD_size_t countWritten = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80022c2:	f107 0214 	add.w	r2, r7, #20
 80022c6:	7af9      	ldrb	r1, [r7, #11]
 80022c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff fec4 	bl	8002058 <OD_getSub>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if (ret != ODR_OK) return ret;
 80022d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <OD_set_value+0x3c>
 80022de:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80022e2:	e00e      	b.n	8002302 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 80022e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <OD_set_value+0x4a>
 80022ee:	230b      	movs	r3, #11
 80022f0:	e007      	b.n	8002302 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 80022f2:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80022fe:	47a0      	blx	r4
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	373c      	adds	r7, #60	@ 0x3c
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}

0800230a <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08e      	sub	sp, #56	@ 0x38
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	460b      	mov	r3, r1
 8002318:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8002320:	f107 0214 	add.w	r2, r7, #20
 8002324:	7af9      	ldrb	r1, [r7, #11]
 8002326:	2301      	movs	r3, #1
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fe95 	bl	8002058 <OD_getSub>
 800232e:	4603      	mov	r3, r0
 8002330:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8002334:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <OD_getPtr+0x42>
 8002344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 800234c:	2309      	movs	r3, #9
 800234e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002352:	e00a      	b.n	800236a <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <OD_getPtr+0x60>
 800235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d002      	beq.n	800236a <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8002364:	230b      	movs	r3, #11
 8002366:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <OD_getPtr+0x6e>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002376:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8002378:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <OD_getPtr+0x7c>
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	e000      	b.n	8002388 <OD_getPtr+0x7e>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3738      	adds	r7, #56	@ 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	81fb      	strh	r3, [r7, #14]
 80023bc:	89fb      	ldrh	r3, [r7, #14]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	2304      	movs	r3, #4
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <OD_getIndex+0x14>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	e000      	b.n	800241a <OD_getIndex+0x16>
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <OD_extension_init>:
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <OD_extension_init+0x14>
 8002436:	2305      	movs	r3, #5
 8002438:	e003      	b.n	8002442 <OD_extension_init+0x1c>
    entry->extension = extension;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <OD_get_u8>:
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af02      	add	r7, sp, #8
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	460b      	mov	r3, r1
 800245c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800245e:	7af9      	ldrb	r1, [r7, #11]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2301      	movs	r3, #1
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff fee7 	bl	800223c <OD_get_value>
 800246e:	4603      	mov	r3, r0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <OD_get_u16>:
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	460b      	mov	r3, r1
 8002486:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002488:	7af9      	ldrb	r1, [r7, #11]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2302      	movs	r3, #2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fed2 	bl	800223c <OD_get_value>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <OD_get_u32>:
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af02      	add	r7, sp, #8
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	460b      	mov	r3, r1
 80024b0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80024b2:	7af9      	ldrb	r1, [r7, #11]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2304      	movs	r3, #4
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff febd 	bl	800223c <OD_get_value>
 80024c2:	4603      	mov	r3, r0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <OD_write_dummy+0x1a>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <OD_read_dummy+0x20>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <OD_read_dummy+0x20>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002514:	2309      	movs	r3, #9
 8002516:	e010      	b.n	800253a <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	d902      	bls.n	8002528 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	2100      	movs	r1, #0
 800252c:	68b8      	ldr	r0, [r7, #8]
 800252e:	f00f fdb9 	bl	80120a4 <memset>

    *countRead = count;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b092      	sub	sp, #72	@ 0x48
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	0c1b      	lsrs	r3, r3, #16
 8002558:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 800256a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8002574:	79fa      	ldrb	r2, [r7, #7]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	3310      	adds	r3, #16
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002586:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800258a:	2b08      	cmp	r3, #8
 800258c:	d901      	bls.n	8002592 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 800258e:	2307      	movs	r3, #7
 8002590:	e090      	b.n	80026b4 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002592:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002596:	2b1f      	cmp	r3, #31
 8002598:	d81a      	bhi.n	80025d0 <PDOconfigMap+0x8c>
 800259a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 80025a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a4:	63bb      	str	r3, [r7, #56]	@ 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 80025a6:	2214      	movs	r2, #20
 80025a8:	2100      	movs	r1, #0
 80025aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025ac:	f00f fd7a 	bl	80120a4 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 80025b0:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80025b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 80025c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c2:	4a3e      	ldr	r2, [pc, #248]	@ (80026bc <PDOconfigMap+0x178>)
 80025c4:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 80025c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c8:	4a3d      	ldr	r2, [pc, #244]	@ (80026c0 <PDOconfigMap+0x17c>)
 80025ca:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e071      	b.n	80026b4 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 80025d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80025d4:	4619      	mov	r1, r3
 80025d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80025d8:	f7ff fce2 	bl	8001fa0 <OD_find>
 80025dc:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 80025de:	f107 0214 	add.w	r2, r7, #20
 80025e2:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 80025e6:	2300      	movs	r3, #0
 80025e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80025ea:	f7ff fd35 	bl	8002058 <OD_getSub>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 80025f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <PDOconfigMap+0xbe>
        return odRet;
 80025fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002600:	e058      	b.n	80026b4 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <PDOconfigMap+0xc8>
 8002608:	2308      	movs	r3, #8
 800260a:	e000      	b.n	800260e <PDOconfigMap+0xca>
 800260c:	2304      	movs	r3, #4
 800260e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8002612:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002616:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800261a:	4013      	ands	r3, r2
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 8002622:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	2b00      	cmp	r3, #0
 800262c:	d104      	bne.n	8002638 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002634:	429a      	cmp	r2, r3
 8002636:	d201      	bcs.n	800263c <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002638:	2306      	movs	r3, #6
 800263a:	e03b      	b.n	80026b4 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 800263c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263e:	461d      	mov	r5, r3
 8002640:	f107 0414 	add.w	r4, r7, #20
 8002644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002648:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800264c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8002650:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002656:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d129      	bne.n	80026b2 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 800265e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002662:	2b1f      	cmp	r3, #31
 8002664:	d81f      	bhi.n	80026a6 <PDOconfigMap+0x162>
 8002666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01b      	beq.n	80026a6 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 800266e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 800267a:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 800267c:	3308      	adds	r3, #8
 800267e:	440b      	add	r3, r1
 8002680:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	323c      	adds	r2, #60	@ 0x3c
 8002686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800268a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	2201      	movs	r2, #1
 8002694:	409a      	lsls	r2, r3
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	b2d1      	uxtb	r1, r2
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 80026a4:	e005      	b.n	80026b2 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 80026a6:	79fa      	ldrb	r2, [r7, #7]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	323c      	adds	r2, #60	@ 0x3c
 80026ac:	2100      	movs	r1, #0
 80026ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3748      	adds	r7, #72	@ 0x48
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bdb0      	pop	{r4, r5, r7, pc}
 80026bc:	080024f5 	.word	0x080024f5
 80026c0:	080024cd 	.word	0x080024cd

080026c4 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	@ 0x30
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 80026da:	f107 021b 	add.w	r2, r7, #27
 80026de:	2301      	movs	r3, #1
 80026e0:	2100      	movs	r1, #0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff feb3 	bl	800244e <OD_get_u8>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80026ee:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 80026f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fe81 	bl	8002404 <OD_getIndex>
 8002702:	4603      	mov	r3, r0
 8002704:	021a      	lsls	r2, r3, #8
 8002706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002708:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800270a:	f06f 030b 	mvn.w	r3, #11
 800270e:	e082      	b.n	8002816 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002716:	e05e      	b.n	80027d6 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002718:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	3310      	adds	r3, #16
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8002730:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002734:	3301      	adds	r3, #1
 8002736:	b2d9      	uxtb	r1, r3
 8002738:	f107 0214 	add.w	r2, r7, #20
 800273c:	2301      	movs	r3, #1
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff feaf 	bl	80024a2 <OD_get_u32>
 8002744:	4603      	mov	r3, r0
 8002746:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 800274a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800274e:	2b0e      	cmp	r3, #14
 8002750:	d03b      	beq.n	80027ca <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8002752:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00f      	beq.n	800277a <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 800275a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fe4f 	bl	8002404 <OD_getIndex>
 8002766:	4603      	mov	r3, r0
 8002768:	021a      	lsls	r2, r3, #8
 800276a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800276e:	431a      	orrs	r2, r3
 8002770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002772:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002774:	f06f 030b 	mvn.w	r3, #11
 8002778:	e04d      	b.n	8002816 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800277a:	6979      	ldr	r1, [r7, #20]
 800277c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fedc 	bl	8002544 <PDOconfigMap>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 8002792:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	22ff      	movs	r2, #255	@ 0xff
 80027a4:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 80027a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <PDO_initMapping+0xf0>
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b2:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 80027b4:	7efb      	ldrb	r3, [r7, #27]
 80027b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d206      	bcs.n	80027cc <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c4:	4413      	add	r3, r2
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c8:	e000      	b.n	80027cc <PDO_initMapping+0x108>
            continue;
 80027ca:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80027cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027d0:	3301      	adds	r3, #1
 80027d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027da:	2b07      	cmp	r3, #7
 80027dc:	d99c      	bls.n	8002718 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d805      	bhi.n	80027f0 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <PDO_initMapping+0x13a>
 80027ea:	7efb      	ldrb	r3, [r7, #27]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 80027f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <PDO_initMapping+0x13a>
 80027f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 80027fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800280e:	7efa      	ldrb	r2, [r7, #27]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3728      	adds	r7, #40	@ 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b08e      	sub	sp, #56	@ 0x38
 8002822:	af02      	add	r7, sp, #8
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <OD_write_PDO_mapping+0x28>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <OD_write_PDO_mapping+0x28>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	7c5b      	ldrb	r3, [r3, #17]
 8002842:	2b08      	cmp	r3, #8
 8002844:	d901      	bls.n	800284a <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8002846:	2309      	movs	r3, #9
 8002848:	e081      	b.n	800294e <OD_write_PDO_mapping+0x130>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <OD_write_PDO_mapping+0x4a>
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	7b5b      	ldrb	r3, [r3, #13]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <OD_write_PDO_mapping+0x4e>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	7c5b      	ldrb	r3, [r3, #17]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002868:	2302      	movs	r3, #2
 800286a:	e070      	b.n	800294e <OD_write_PDO_mapping+0x130>
    }

    if (stream->subIndex == 0) {
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	7c5b      	ldrb	r3, [r3, #17]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d148      	bne.n	8002906 <OD_write_PDO_mapping+0xe8>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002874:	68b8      	ldr	r0, [r7, #8]
 8002876:	f7ff fd8b 	bl	8002390 <CO_getUint8>
 800287a:	4603      	mov	r3, r0
 800287c:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002882:	7fbb      	ldrb	r3, [r7, #30]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d901      	bls.n	800288c <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8002888:	2307      	movs	r3, #7
 800288a:	e060      	b.n	800294e <OD_write_PDO_mapping+0x130>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800288c:	2300      	movs	r3, #0
 800288e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002892:	e01e      	b.n	80028d2 <OD_write_PDO_mapping+0xb4>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002894:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	3310      	adds	r3, #16
 80028a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a4:	4413      	add	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d901      	bls.n	80028c0 <OD_write_PDO_mapping+0xa2>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80028bc:	2306      	movs	r3, #6
 80028be:	e046      	b.n	800294e <OD_write_PDO_mapping+0x130>
            }
            pdoDataLength += mappedLength;
 80028c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4413      	add	r3, r2
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80028c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028cc:	3301      	adds	r3, #1
 80028ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028d2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80028d6:	7fbb      	ldrb	r3, [r7, #30]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3db      	bcc.n	8002894 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d901      	bls.n	80028e6 <OD_write_PDO_mapping+0xc8>
            return ODR_MAP_LEN;
 80028e2:	2307      	movs	r3, #7
 80028e4:	e033      	b.n	800294e <OD_write_PDO_mapping+0x130>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 80028e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <OD_write_PDO_mapping+0xd8>
 80028ec:	7fbb      	ldrb	r3, [r7, #30]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <OD_write_PDO_mapping+0xd8>
            return ODR_INVALID_VALUE;
 80028f2:	230f      	movs	r3, #15
 80028f4:	e02b      	b.n	800294e <OD_write_PDO_mapping+0x130>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	7fba      	ldrb	r2, [r7, #30]
 8002902:	735a      	strb	r2, [r3, #13]
 8002904:	e01c      	b.n	8002940 <OD_write_PDO_mapping+0x122>
    }
    else {
        uint32_t val = CO_getUint32(buf);
 8002906:	68b8      	ldr	r0, [r7, #8]
 8002908:	f7ff fd5f 	bl	80023ca <CO_getUint32>
 800290c:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex-1,
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	7c5b      	ldrb	r3, [r3, #17]
 8002912:	3b01      	subs	r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	460b      	mov	r3, r1
 8002926:	6a39      	ldr	r1, [r7, #32]
 8002928:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800292a:	f7ff fe0b 	bl	8002544 <PDOconfigMap>
 800292e:	4603      	mov	r3, r0
 8002930:	77fb      	strb	r3, [r7, #31]
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8002932:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <OD_write_PDO_mapping+0x122>
            return odRet;
 800293a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800293e:	e006      	b.n	800294e <OD_write_PDO_mapping+0x130>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fab0 	bl	8001eac <OD_writeOriginal>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3730      	adds	r7, #48	@ 0x30
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fa45 	bl	8001dfc <OD_readOriginal>
 8002972:	4603      	mov	r3, r0
 8002974:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8002976:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d134      	bne.n	80029e8 <OD_read_PDO_commParam+0x90>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	7c5b      	ldrb	r3, [r3, #17]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d130      	bne.n	80029e8 <OD_read_PDO_commParam+0x90>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d12c      	bne.n	80029e8 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f7ff fd18 	bl	80023ca <CO_getUint32>
 800299a:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a4:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 80029a6:	8a7b      	ldrh	r3, [r7, #18]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d011      	beq.n	80029d0 <OD_read_PDO_commParam+0x78>
 80029ac:	8a7a      	ldrh	r2, [r7, #18]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 80029b4:	4619      	mov	r1, r3
 80029b6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80029ba:	400b      	ands	r3, r1
 80029bc:	429a      	cmp	r2, r3
 80029be:	d107      	bne.n	80029d0 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <OD_read_PDO_commParam+0x9c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	f8b2 2122 	ldrh.w	r2, [r2, #290]	@ 0x122
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <OD_read_PDO_commParam+0x88>
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029de:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 80029e0:	69f9      	ldr	r1, [r7, #28]
 80029e2:	68b8      	ldr	r0, [r7, #8]
 80029e4:	f7ff fcff 	bl	80023e6 <CO_setUint32>
    }

    return returnCode;
 80029e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	ffff0000 	.word	0xffff0000

080029f8 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	3305      	adds	r3, #5
 8002a14:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8002a1c:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03e      	beq.n	8002aa4 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	7b1b      	ldrb	r3, [r3, #12]
 8002a2a:	7cfa      	ldrb	r2, [r7, #19]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d334      	bcc.n	8002a9a <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	7b1b      	ldrb	r3, [r3, #12]
 8002a34:	7cfa      	ldrb	r2, [r7, #19]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d105      	bne.n	8002a46 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <CO_PDO_receive+0x58>
 8002a40:	230b      	movs	r3, #11
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e004      	b.n	8002a50 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002a46:	7ffb      	ldrb	r3, [r7, #31]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <CO_PDO_receive+0x58>
 8002a4c:	230d      	movs	r3, #13
 8002a4e:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <CO_PDO_receive+0x80>
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 8002a78:	7fbb      	ldrb	r3, [r7, #30]
 8002a7a:	332a      	adds	r3, #42	@ 0x2a
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4413      	add	r3, r2
 8002a82:	2208      	movs	r2, #8
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00f fbf3 	bl	8012272 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002a8c:	7fba      	ldrb	r2, [r7, #30]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	3252      	adds	r2, #82	@ 0x52
 8002a92:	2101      	movs	r1, #1
 8002a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002a98:	e004      	b.n	8002aa4 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	7ffa      	ldrb	r2, [r7, #31]
 8002aa8:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
}
 8002aac:	bf00      	nop
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b092      	sub	sp, #72	@ 0x48
 8002ab8:	af04      	add	r7, sp, #16
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <OD_write_14xx+0x26>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <OD_write_14xx+0x26>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <OD_write_14xx+0x26>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d901      	bls.n	8002ade <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002ada:	2309      	movs	r3, #9
 8002adc:	e0ff      	b.n	8002cde <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00f fbbe 	bl	8012272 <memcpy>

    switch (stream->subIndex) {
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	7c5b      	ldrb	r3, [r3, #17]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	f000 80d4 	beq.w	8002ca8 <OD_write_14xx+0x1f4>
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	f300 80e4 	bgt.w	8002cce <OD_write_14xx+0x21a>
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d003      	beq.n	8002b12 <OD_write_14xx+0x5e>
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f000 80a5 	beq.w	8002c5a <OD_write_14xx+0x1a6>
 8002b10:	e0dd      	b.n	8002cce <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002b12:	68b8      	ldr	r0, [r7, #8]
 8002b14:	f7ff fc59 	bl	80023ca <CO_getUint32>
 8002b18:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b22:	86fb      	strh	r3, [r7, #54]	@ 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	0fdb      	lsrs	r3, r3, #31
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	4b6d      	ldr	r3, [pc, #436]	@ (8002ce8 <OD_write_14xx+0x234>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13d      	bne.n	8002bb4 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <OD_write_14xx+0x9e>
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <OD_write_14xx+0x9e>
 8002b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b48:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8002b4c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d130      	bne.n	8002bb4 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d026      	beq.n	8002ba6 <OD_write_14xx+0xf2>
 8002b58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b5c:	d92a      	bls.n	8002bb4 <OD_write_14xx+0x100>
 8002b5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b64:	d903      	bls.n	8002b6e <OD_write_14xx+0xba>
 8002b66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b68:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002b6c:	d922      	bls.n	8002bb4 <OD_write_14xx+0x100>
 8002b6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b70:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002b74:	d903      	bls.n	8002b7e <OD_write_14xx+0xca>
 8002b76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b7c:	d31a      	bcc.n	8002bb4 <OD_write_14xx+0x100>
 8002b7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b84:	d903      	bls.n	8002b8e <OD_write_14xx+0xda>
 8002b86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b88:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002b8c:	d312      	bcc.n	8002bb4 <OD_write_14xx+0x100>
 8002b8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b90:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002b94:	d303      	bcc.n	8002b9e <OD_write_14xx+0xea>
 8002b96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b9c:	d30a      	bcc.n	8002bb4 <OD_write_14xx+0x100>
 8002b9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ba0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ba4:	d806      	bhi.n	8002bb4 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <OD_write_14xx+0x104>
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	7b5b      	ldrb	r3, [r3, #13]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	e092      	b.n	8002cde <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d105      	bne.n	8002bce <OD_write_14xx+0x11a>
 8002bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc4:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8002bc8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d07e      	beq.n	8002ccc <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd0:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 8002bd4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d108      	bne.n	8002bec <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fbfd 	bl	80023e6 <CO_setUint32>
            }
            if (!valid) {
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <OD_write_14xx+0x142>
                CAN_ID = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf8:	6858      	ldr	r0, [r3, #4]
 8002bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfc:	f8b3 1120 	ldrh.w	r1, [r3, #288]	@ 0x120
 8002c00:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002c02:	4b3a      	ldr	r3, [pc, #232]	@ (8002cec <OD_write_14xx+0x238>)
 8002c04:	9302      	str	r3, [sp, #8]
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002c12:	f003 fe09 	bl	8006828 <CO_CANrxBufferInit>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <OD_write_14xx+0x184>
 8002c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <OD_write_14xx+0x184>
                PDO->valid = true;
 8002c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002c32:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 8002c36:	e049      	b.n	8002ccc <OD_write_14xx+0x218>
                PDO->valid = false;
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
                if (ret != CO_ERROR_NO) {
 8002c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d03a      	beq.n	8002ccc <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 8002c56:	2309      	movs	r3, #9
 8002c58:	e041      	b.n	8002cde <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	f7ff fb98 	bl	8002390 <CO_getUint8>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002c66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c6a:	2bf0      	cmp	r3, #240	@ 0xf0
 8002c6c:	d905      	bls.n	8002c7a <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c72:	2bfd      	cmp	r3, #253	@ 0xfd
 8002c74:	d801      	bhi.n	8002c7a <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 8002c76:	230f      	movs	r3, #15
 8002c78:	e031      	b.n	8002cde <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c7e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002c80:	bf94      	ite	ls
 8002c82:	2301      	movls	r3, #1
 8002c84:	2300      	movhi	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d003      	beq.n	8002c9e <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        }

        RPDO->synchronous = synchronous;
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 8002ca6:	e012      	b.n	8002cce <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002ca8:	68b8      	ldr	r0, [r7, #8]
 8002caa:	f7ff fb7f 	bl	80023ac <CO_getUint16>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cb8:	fb03 f202 	mul.w	r2, r3, r2
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        RPDO->timeoutTimer = 0;
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        break;
 8002cca:	e000      	b.n	8002cce <OD_write_14xx+0x21a>
        break;
 8002ccc:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002cce:	f107 0110 	add.w	r1, r7, #16
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff f8e8 	bl	8001eac <OD_writeOriginal>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3738      	adds	r7, #56	@ 0x38
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	3ffff800 	.word	0x3ffff800
 8002cec:	080029f9 	.word	0x080029f9

08002cf0 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b090      	sub	sp, #64	@ 0x40
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <CO_RPDO_init+0x36>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <CO_RPDO_init+0x36>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <CO_RPDO_init+0x36>
 8002d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 8002d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <CO_RPDO_init+0x36>
 8002d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e118      	b.n	8002f5e <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002d2c:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8002d30:	2100      	movs	r1, #0
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f00f f9b6 	bl	80120a4 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d42:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2301      	movs	r3, #1
 8002d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d5a:	f7ff fcb3 	bl	80026c4 <PDO_initMapping>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002d64:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <CO_RPDO_init+0x82>
        return ret;
 8002d6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002d70:	e0f5      	b.n	8002f5e <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 8002d76:	f107 0218 	add.w	r2, r7, #24
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d80:	f7ff fb8f 	bl	80024a2 <OD_get_u32>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002d8a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00e      	beq.n	8002db0 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8002d98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d9a:	f7ff fb33 	bl	8002404 <OD_getIndex>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002daa:	f06f 030b 	mvn.w	r3, #11
 8002dae:	e0d6      	b.n	8002f5e <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	0fdb      	lsrs	r3, r3, #31
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <CO_RPDO_init+0xf6>
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	7b5b      	ldrb	r3, [r3, #13]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <CO_RPDO_init+0xe8>
 8002dd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <CO_RPDO_init+0xf6>
        valid = false;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <CO_RPDO_init+0xf6>
 8002de2:	2301      	movs	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <CO_RPDO_init+0x10a>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	e000      	b.n	8002dfc <CO_RPDO_init+0x10c>
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8002e02:	221a      	movs	r2, #26
 8002e04:	2101      	movs	r1, #1
 8002e06:	f7fe fb99 	bl	800153c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002e14:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <CO_RPDO_init+0x13c>
 8002e1a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002e1c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002e1e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002e22:	400b      	ands	r3, r1
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d101      	bne.n	8002e2c <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8002e28:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002e2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    ret = CO_CANrxBufferInit(
 8002e2c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002e2e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8002e32:	4b4d      	ldr	r3, [pc, #308]	@ (8002f68 <CO_RPDO_init+0x278>)
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002e42:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e44:	f003 fcf0 	bl	8006828 <CO_CANrxBufferInit>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8002e4e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <CO_RPDO_init+0x16c>
        return ret;
 8002e56:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002e5a:	e080      	b.n	8002f5e <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e60:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002e62:	23fe      	movs	r3, #254	@ 0xfe
 8002e64:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8002e66:	f107 0217 	add.w	r2, r7, #23
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e70:	f7ff faed 	bl	800244e <OD_get_u8>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002e7a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00e      	beq.n	8002ea0 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8002e88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e8a:	f7ff fabb 	bl	8002404 <OD_getIndex>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	f043 0202 	orr.w	r2, r3, #2
 8002e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e98:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002e9a:	f06f 030b 	mvn.w	r3, #11
 8002e9e:	e05e      	b.n	8002f5e <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2bf0      	cmp	r3, #240	@ 0xf0
 8002eac:	bf94      	ite	ls
 8002eae:	2301      	movls	r3, #1
 8002eb0:	2300      	movhi	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002ec0:	f107 0214 	add.w	r2, r7, #20
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	2105      	movs	r1, #5
 8002ec8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002eca:	f7ff fad5 	bl	8002478 <OD_get_u16>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8002ed4:	8abb      	ldrh	r3, [r7, #20]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002edc:	fb03 f202 	mul.w	r2, r3, r2
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    PDO->OD = OD;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002efc:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002f04:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    PDO->configuredCanId = CAN_ID;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002f0c:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <CO_RPDO_init+0x27c>)
 8002f1c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	4a13      	ldr	r2, [pc, #76]	@ (8002f70 <CO_RPDO_init+0x280>)
 8002f24:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	4a10      	ldr	r2, [pc, #64]	@ (8002f74 <CO_RPDO_init+0x284>)
 8002f34:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f78 <CO_RPDO_init+0x288>)
 8002f3c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002f46:	4619      	mov	r1, r3
 8002f48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f4a:	f7ff fa6c 	bl	8002426 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002f54:	4619      	mov	r1, r3
 8002f56:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002f58:	f7ff fa65 	bl	8002426 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3730      	adds	r7, #48	@ 0x30
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	080029f9 	.word	0x080029f9
 8002f6c:	08002959 	.word	0x08002959
 8002f70:	08002ab5 	.word	0x08002ab5
 8002f74:	08001dfd 	.word	0x08001dfd
 8002f78:	0800281f 	.word	0x0800281f

08002f7c <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b097      	sub	sp, #92	@ 0x5c
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (PDO->valid && NMTisOperational
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 810c 	beq.w	80031b0 <CO_RPDO_process+0x234>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8108 	beq.w	80031b0 <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8002fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <CO_RPDO_process+0x36>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 80ff 	bne.w	80031b0 <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8002fb8:	2b0a      	cmp	r3, #10
 8002fba:	d928      	bls.n	800300e <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8002fc2:	2b0b      	cmp	r3, #11
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d102      	bne.n	8002fde <CO_RPDO_process+0x62>
 8002fd8:	f248 2310 	movw	r3, #33296	@ 0x8210
 8002fdc:	e001      	b.n	8002fe2 <CO_RPDO_process+0x66>
 8002fde:	f248 2320 	movw	r3, #33312	@ 0x8220
 8002fe2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe6:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fea:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002fec:	461a      	mov	r2, r3
 8002fee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ff6:	f7fe faa1 	bl	800153c <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf14      	ite	ne
 8003000:	2301      	movne	r3, #1
 8003002:	2300      	moveq	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <CO_RPDO_process+0xbe>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <CO_RPDO_process+0xbe>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <CO_RPDO_process+0xbe>
            bufNo = 1;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 800303a:	2300      	movs	r3, #0
 800303c:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 800303e:	e065      	b.n	800310c <CO_RPDO_process+0x190>
            rpdoReceived = true;
 8003040:	2301      	movs	r3, #1
 8003042:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8003044:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003048:	332a      	adds	r3, #42	@ 0x2a
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8003052:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3252      	adds	r2, #82	@ 0x52
 800305a:	2100      	movs	r1, #0
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003066:	e04b      	b.n	8003100 <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8003068:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3310      	adds	r3, #16
 8003076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003078:	4413      	add	r3, r2
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	330c      	adds	r3, #12
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8003090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003092:	2b08      	cmp	r3, #8
 8003094:	d901      	bls.n	800309a <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8003096:	2308      	movs	r3, #8
 8003098:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 800309a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800309e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d912      	bls.n	80030ca <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 80030a4:	f107 0318 	add.w	r3, r7, #24
 80030a8:	2208      	movs	r2, #8
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f00e fff9 	bl	80120a4 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 80030b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030b6:	f107 0318 	add.w	r3, r7, #24
 80030ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030bc:	4618      	mov	r0, r3
 80030be:	f00f f8d8 	bl	8012272 <memcpy>
                    dataOD = buf;
 80030c2:	f107 0318 	add.w	r3, r7, #24
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c8:	e001      	b.n	80030ce <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 80030ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030cc:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 80030d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d6:	699c      	ldr	r4, [r3, #24]
 80030d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030e2:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 80030e4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 80030ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030f2:	4413      	add	r3, r2
 80030f4:	647b      	str	r3, [r7, #68]	@ 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80030f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80030fa:	3301      	adds	r3, #1
 80030fc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003102:	7b5b      	ldrb	r3, [r3, #13]
 8003104:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8003108:	429a      	cmp	r2, r3
 800310a:	d3ad      	bcc.n	8003068 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 800310c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3252      	adds	r2, #82	@ 0x52
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d191      	bne.n	8003040 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d058      	beq.n	80031d8 <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 8003126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003138:	429a      	cmp	r2, r3
 800313a:	d90a      	bls.n	8003152 <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 800313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2300      	movs	r3, #0
 800314a:	2217      	movs	r2, #23
 800314c:	2100      	movs	r1, #0
 800314e:	f7fe f9f5 	bl	800153c <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    ) {
 800315a:	e03d      	b.n	80031d8 <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003162:	2b00      	cmp	r3, #0
 8003164:	d038      	beq.n	80031d8 <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003172:	429a      	cmp	r2, r3
 8003174:	d230      	bcs.n	80031d8 <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	441a      	add	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003192:	429a      	cmp	r2, r3
 8003194:	d920      	bls.n	80031d8 <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f248 2350 	movw	r3, #33360	@ 0x8250
 80031a6:	2217      	movs	r2, #23
 80031a8:	2101      	movs	r1, #1
 80031aa:	f7fe f9c7 	bl	800153c <CO_error>
    ) {
 80031ae:	e013      	b.n	80031d8 <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 80031b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <CO_RPDO_process+0x242>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10d      	bne.n	80031da <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 80031d6:	e000      	b.n	80031da <CO_RPDO_process+0x25e>
    ) {
 80031d8:	bf00      	nop
}
 80031da:	bf00      	nop
 80031dc:	3754      	adds	r7, #84	@ 0x54
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}
	...

080031e4 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b093      	sub	sp, #76	@ 0x4c
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <OD_write_18xx+0x26>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <OD_write_18xx+0x26>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <OD_write_18xx+0x26>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d901      	bls.n	800320e <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800320a:	2309      	movs	r3, #9
 800320c:	e136      	b.n	800347c <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f00f f826 	bl	8012272 <memcpy>

    switch (stream->subIndex) {
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	7c5b      	ldrb	r3, [r3, #17]
 800322a:	3b01      	subs	r3, #1
 800322c:	2b05      	cmp	r3, #5
 800322e:	f200 811d 	bhi.w	800346c <OD_write_18xx+0x288>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <OD_write_18xx+0x54>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	08003251 	.word	0x08003251
 800323c:	08003387 	.word	0x08003387
 8003240:	080033ed 	.word	0x080033ed
 8003244:	0800346d 	.word	0x0800346d
 8003248:	0800341b 	.word	0x0800341b
 800324c:	0800343f 	.word	0x0800343f
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f7ff f8ba 	bl	80023ca <CO_getUint32>
 8003256:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003260:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	43db      	mvns	r3, r3
 8003266:	0fdb      	lsrs	r3, r3, #31
 8003268:	b2db      	uxtb	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	4b85      	ldr	r3, [pc, #532]	@ (8003484 <OD_write_18xx+0x2a0>)
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d13d      	bne.n	80032f2 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d009      	beq.n	8003290 <OD_write_18xx+0xac>
 800327c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <OD_write_18xx+0xac>
 8003284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003286:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 800328a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800328c:	429a      	cmp	r2, r3
 800328e:	d130      	bne.n	80032f2 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d026      	beq.n	80032e4 <OD_write_18xx+0x100>
 8003296:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003298:	2b7f      	cmp	r3, #127	@ 0x7f
 800329a:	d92a      	bls.n	80032f2 <OD_write_18xx+0x10e>
 800329c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800329e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a2:	d903      	bls.n	80032ac <OD_write_18xx+0xc8>
 80032a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032a6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80032aa:	d922      	bls.n	80032f2 <OD_write_18xx+0x10e>
 80032ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032ae:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80032b2:	d903      	bls.n	80032bc <OD_write_18xx+0xd8>
 80032b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032ba:	d31a      	bcc.n	80032f2 <OD_write_18xx+0x10e>
 80032bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032c2:	d903      	bls.n	80032cc <OD_write_18xx+0xe8>
 80032c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032c6:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80032ca:	d312      	bcc.n	80032f2 <OD_write_18xx+0x10e>
 80032cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032ce:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80032d2:	d303      	bcc.n	80032dc <OD_write_18xx+0xf8>
 80032d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032da:	d30a      	bcc.n	80032f2 <OD_write_18xx+0x10e>
 80032dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032e2:	d806      	bhi.n	80032f2 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <OD_write_18xx+0x112>
 80032ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ec:	7b5b      	ldrb	r3, [r3, #13]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 80032f2:	230f      	movs	r3, #15
 80032f4:	e0c2      	b.n	800347c <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80032f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <OD_write_18xx+0x12a>
 8003300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003302:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 8003306:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003308:	429a      	cmp	r2, r3
 800330a:	f000 80ae 	beq.w	800346a <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 800330e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003310:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 8003314:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003316:	429a      	cmp	r2, r3
 8003318:	d108      	bne.n	800332c <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff f85d 	bl	80023e6 <CO_setUint32>
            }
            if (!valid) {
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <OD_write_18xx+0x152>
                CAN_ID = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	6858      	ldr	r0, [r3, #4]
 800333a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333c:	f8b3 1120 	ldrh.w	r1, [r3, #288]	@ 0x120
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8003344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003346:	f892 214c 	ldrb.w	r2, [r2, #332]	@ 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 800334a:	2af0      	cmp	r2, #240	@ 0xf0
 800334c:	bf94      	ite	ls
 800334e:	2201      	movls	r2, #1
 8003350:	2200      	movhi	r2, #0
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	4614      	mov	r4, r2
 8003356:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003358:	9401      	str	r4, [sp, #4]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	f003 fabf 	bl	80068e0 <CO_CANtxBufferInit>
 8003362:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 800336a:	2309      	movs	r3, #9
 800336c:	e086      	b.n	800347c <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 800336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
            PDO->valid = valid;
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003380:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
        }
        break;
 8003384:	e071      	b.n	800346a <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f7ff f802 	bl	8002390 <CO_getUint8>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003396:	2bf0      	cmp	r3, #240	@ 0xf0
 8003398:	d905      	bls.n	80033a6 <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800339a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800339e:	2bfd      	cmp	r3, #253	@ 0xfd
 80033a0:	d801      	bhi.n	80033a6 <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 80033a2:	230f      	movs	r3, #15
 80033a4:	e06a      	b.n	800347c <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80033a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033aa:	2bf0      	cmp	r3, #240	@ 0xf0
 80033ac:	bf94      	ite	ls
 80033ae:	2301      	movls	r3, #1
 80033b0:	2300      	movhi	r3, #0
 80033b2:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 80033b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80033ba:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 80033bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033be:	22ff      	movs	r2, #255	@ 0xff
 80033c0:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 80033c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80033ca:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        TPDO->sendRequest = true;
 80033ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d0:	2201      	movs	r2, #1
 80033d2:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 80033d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 80033de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80033e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
#endif
        break;
 80033ea:	e03f      	b.n	800346c <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 80033ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 80033f4:	230f      	movs	r3, #15
 80033f6:	e041      	b.n	800347c <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f7fe ffd7 	bl	80023ac <CO_getUint16>
 80033fe:	4603      	mov	r3, r0
 8003400:	62bb      	str	r3, [r7, #40]	@ 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8003402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003404:	2264      	movs	r2, #100	@ 0x64
 8003406:	fb03 f202 	mul.w	r2, r3, r2
 800340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        TPDO->inhibitTimer = 0;
 8003410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003412:	2200      	movs	r2, #0
 8003414:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        break;
 8003418:	e028      	b.n	800346c <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f7fe ffc6 	bl	80023ac <CO_getUint16>
 8003420:	4603      	mov	r3, r0
 8003422:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8003424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003426:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800342a:	fb03 f202 	mul.w	r2, r3, r2
 800342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003430:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        TPDO->eventTimer = 0;
 8003434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003436:	2200      	movs	r2, #0
 8003438:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        break;
 800343c:	e016      	b.n	800346c <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 800343e:	68b8      	ldr	r0, [r7, #8]
 8003440:	f7fe ffa6 	bl	8002390 <CO_getUint8>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (PDO->valid || syncStartValue > 240) {
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <OD_write_18xx+0x276>
 8003452:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003456:	2bf0      	cmp	r3, #240	@ 0xf0
 8003458:	d901      	bls.n	800345e <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 800345a:	230f      	movs	r3, #15
 800345c:	e00e      	b.n	800347c <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 800345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003460:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003464:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
        break;
 8003468:	e000      	b.n	800346c <OD_write_18xx+0x288>
        break;
 800346a:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 800346c:	f107 0114 	add.w	r1, r7, #20
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7fe fd19 	bl	8001eac <OD_writeOriginal>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3744      	adds	r7, #68	@ 0x44
 8003480:	46bd      	mov	sp, r7
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	3ffff800 	.word	0x3ffff800

08003488 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	@ 0x38
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <CO_TPDO_init+0x36>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <CO_TPDO_init+0x36>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <CO_TPDO_init+0x36>
 80034ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 80034b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <CO_TPDO_init+0x36>
 80034b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	e14d      	b.n	8003760 <CO_TPDO_init+0x2d8>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 80034c4:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80034c8:	2100      	movs	r1, #0
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f00e fdea 	bl	80120a4 <memset>

    /* Configure object variables */
    PDO->em = em;
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034da:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	2300      	movs	r3, #0
 80034ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034f2:	f7ff f8e7 	bl	80026c4 <PDO_initMapping>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 80034fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <CO_TPDO_init+0x82>
        return ret;
 8003504:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003508:	e12a      	b.n	8003760 <CO_TPDO_init+0x2d8>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800350a:	23fe      	movs	r3, #254	@ 0xfe
 800350c:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 800350e:	f107 021b 	add.w	r2, r7, #27
 8003512:	2301      	movs	r3, #1
 8003514:	2102      	movs	r1, #2
 8003516:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003518:	f7fe ff99 	bl	800244e <OD_get_u8>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8003522:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 800352a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8003530:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003532:	f7fe ff67 	bl	8002404 <OD_getIndex>
 8003536:	4603      	mov	r3, r0
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003540:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003542:	f06f 030b 	mvn.w	r3, #11
 8003546:	e10b      	b.n	8003760 <CO_TPDO_init+0x2d8>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003548:	7efb      	ldrb	r3, [r7, #27]
 800354a:	2bfd      	cmp	r3, #253	@ 0xfd
 800354c:	d804      	bhi.n	8003558 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800354e:	7efb      	ldrb	r3, [r7, #27]
 8003550:	2bf0      	cmp	r3, #240	@ 0xf0
 8003552:	d901      	bls.n	8003558 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003554:	23fe      	movs	r3, #254	@ 0xfe
 8003556:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8003558:	7efa      	ldrb	r2, [r7, #27]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
    TPDO->sendRequest = true;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 800356c:	f107 0214 	add.w	r2, r7, #20
 8003570:	2301      	movs	r3, #1
 8003572:	2101      	movs	r1, #1
 8003574:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003576:	f7fe ff94 	bl	80024a2 <OD_get_u32>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8003580:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8003588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 800358e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003590:	f7fe ff38 	bl	8002404 <OD_getIndex>
 8003594:	4603      	mov	r3, r0
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80035a0:	f06f 030b 	mvn.w	r3, #11
 80035a4:	e0dc      	b.n	8003760 <CO_TPDO_init+0x2d8>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	0fdb      	lsrs	r3, r3, #31
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <CO_TPDO_init+0x154>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	7b5b      	ldrb	r3, [r3, #13]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <CO_TPDO_init+0x146>
 80035c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <CO_TPDO_init+0x154>
        valid = false;
 80035ce:	2300      	movs	r3, #0
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <CO_TPDO_init+0x154>
 80035d8:	2301      	movs	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d001      	beq.n	80035f0 <CO_TPDO_init+0x168>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	e000      	b.n	80035f2 <CO_TPDO_init+0x16a>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80035f8:	221a      	movs	r2, #26
 80035fa:	2101      	movs	r1, #1
 80035fc:	f7fd ff9e 	bl	800153c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 800360a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <CO_TPDO_init+0x19a>
 8003610:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003612:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003614:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003618:	400b      	ands	r3, r1
 800361a:	429a      	cmp	r2, r3
 800361c:	d101      	bne.n	8003622 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 800361e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003620:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f892 214c 	ldrb.w	r2, [r2, #332]	@ 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 800362c:	2af0      	cmp	r2, #240	@ 0xf0
 800362e:	bf94      	ite	ls
 8003630:	2201      	movls	r2, #1
 8003632:	2200      	movhi	r2, #0
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	4610      	mov	r0, r2
 8003638:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800363a:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 800363e:	9001      	str	r0, [sp, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003646:	f003 f94b 	bl	80068e0 <CO_CANtxBufferInit>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295
 8003660:	e07e      	b.n	8003760 <CO_TPDO_init+0x2d8>
    }

    PDO->valid = valid;
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003666:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003670:	f107 0212 	add.w	r2, r7, #18
 8003674:	2301      	movs	r3, #1
 8003676:	2103      	movs	r1, #3
 8003678:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800367a:	f7fe fefd 	bl	8002478 <OD_get_u16>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003684:	f107 0210 	add.w	r2, r7, #16
 8003688:	2301      	movs	r3, #1
 800368a:	2105      	movs	r1, #5
 800368c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800368e:	f7fe fef3 	bl	8002478 <OD_get_u16>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100;
 8003698:	8a7b      	ldrh	r3, [r7, #18]
 800369a:	461a      	mov	r2, r3
 800369c:	2364      	movs	r3, #100	@ 0x64
 800369e:	fb03 f202 	mul.w	r2, r3, r2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000;
 80036a8:	8a3b      	ldrh	r3, [r7, #16]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036b0:	fb03 f202 	mul.w	r2, r3, r2
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 80036c8:	2301      	movs	r3, #1
 80036ca:	2106      	movs	r1, #6
 80036cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80036ce:	f7fe febe 	bl	800244e <OD_get_u8>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->SYNC = SYNC;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    TPDO->syncCounter = 255;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	@ 0xff
 80036e4:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    PDO->OD = OD;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80036fe:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003706:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    PDO->configuredCanId = CAN_ID;
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800370e:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <CO_TPDO_init+0x2e0>)
 800371e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	4a11      	ldr	r2, [pc, #68]	@ (800376c <CO_TPDO_init+0x2e4>)
 8003726:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	4a0e      	ldr	r2, [pc, #56]	@ (8003770 <CO_TPDO_init+0x2e8>)
 8003736:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <CO_TPDO_init+0x2ec>)
 800373e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003748:	4619      	mov	r1, r3
 800374a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800374c:	f7fe fe6b 	bl	8002426 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003756:	4619      	mov	r1, r3
 8003758:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800375a:	f7fe fe64 	bl	8002426 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3730      	adds	r7, #48	@ 0x30
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08002959 	.word	0x08002959
 800376c:	080031e5 	.word	0x080031e5
 8003770:	08001dfd 	.word	0x08001dfd
 8003774:	0800281f 	.word	0x0800281f

08003778 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b091      	sub	sp, #68	@ 0x44
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800378a:	3305      	adds	r3, #5
 800378c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <CO_TPDOsend+0x2a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 800379e:	2bfd      	cmp	r3, #253	@ 0xfd
 80037a0:	d901      	bls.n	80037a6 <CO_TPDOsend+0x2e>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <CO_TPDOsend+0x30>
 80037a6:	2300      	movs	r3, #0
    bool_t eventDriven =
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80037b0:	e062      	b.n	8003878 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80037b2:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	3310      	adds	r3, #16
 80037c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c2:	4413      	add	r3, r2
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
        OD_stream_t *stream = &OD_IO->stream;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	637b      	str	r3, [r7, #52]	@ 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 80037d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d901      	bls.n	80037e0 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 80037dc:	2308      	movs	r3, #8
 80037de:	637b      	str	r3, [r7, #52]	@ 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d90a      	bls.n	80037fe <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	2208      	movs	r2, #8
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f00e fc57 	bl	80120a4 <memset>
            dataTPDOCopy = buf;
 80037f6:	f107 0310 	add.w	r3, r7, #16
 80037fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80037fc:	e001      	b.n	8003802 <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 80037fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	2200      	movs	r2, #0
 8003806:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	695c      	ldr	r4, [r3, #20]
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003812:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003814:	6a38      	ldr	r0, [r7, #32]
 8003816:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003818:	7ffa      	ldrb	r2, [r7, #31]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 800381e:	7ffb      	ldrb	r3, [r7, #31]
 8003820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003822:	429a      	cmp	r2, r3
 8003824:	d906      	bls.n	8003834 <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 8003826:	7ffa      	ldrb	r2, [r7, #31]
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	4619      	mov	r1, r3
 800382e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003830:	f00e fd1f 	bl	8012272 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003834:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383a:	323c      	adds	r2, #60	@ 0x3c
 800383c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003840:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <CO_TPDOsend+0xee>
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003858:	440b      	add	r3, r1
 800385a:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800385e:	4313      	orrs	r3, r2
 8003860:	b2da      	uxtb	r2, r3
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 8003866:	7ffb      	ldrb	r3, [r7, #31]
 8003868:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800386a:	4413      	add	r3, r2
 800386c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800386e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003872:	3301      	adds	r3, #1
 8003874:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387a:	7b5b      	ldrb	r3, [r3, #13]
 800387c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003880:	429a      	cmp	r2, r3
 8003882:	d396      	bcc.n	80037b2 <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 80038a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f003 f8db 	bl	8006a6c <CO_CANsend>
 80038b6:	4603      	mov	r3, r0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3744      	adds	r7, #68	@ 0x44
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80dc 	beq.w	8003a94 <CO_TPDO_process+0x1d4>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80d8 	beq.w	8003a94 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 80038f4:	2bfd      	cmp	r3, #253	@ 0xfd
 80038f6:	d946      	bls.n	8003986 <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d018      	beq.n	8003934 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d205      	bcs.n	800391a <CO_TPDO_process+0x5a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	e000      	b.n	800391c <CO_TPDO_process+0x5c>
 800391a:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
                if (TPDO->eventTimer == 0) {
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800393a:	2b00      	cmp	r3, #0
 800393c:	d123      	bne.n	8003986 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800393e:	2300      	movs	r3, #0
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e01b      	b.n	800397c <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003944:	7ffa      	ldrb	r2, [r7, #31]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	323c      	adds	r2, #60	@ 0x3c
 800394a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394e:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00f      	beq.n	8003976 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	7ffb      	ldrb	r3, [r7, #31]
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	440b      	add	r3, r1
 8003960:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003964:	4013      	ands	r3, r2
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
                            break;
 8003974:	e007      	b.n	8003986 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003976:	7ffb      	ldrb	r3, [r7, #31]
 8003978:	3301      	adds	r3, #1
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	7b5b      	ldrb	r3, [r3, #13]
 8003980:	7ffa      	ldrb	r2, [r7, #31]
 8003982:	429a      	cmp	r2, r3
 8003984:	d3de      	bcc.n	8003944 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 800398c:	2bfd      	cmp	r3, #253	@ 0xfd
 800398e:	d91d      	bls.n	80039cc <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d205      	bcs.n	80039a8 <CO_TPDO_process+0xe8>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	e000      	b.n	80039aa <CO_TPDO_process+0xea>
 80039a8:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d07f      	beq.n	8003aba <CO_TPDO_process+0x1fa>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d17a      	bne.n	8003aba <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff fed7 	bl	8003778 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80039ca:	e076      	b.n	8003aba <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d071      	beq.n	8003aba <CO_TPDO_process+0x1fa>
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d06e      	beq.n	8003aba <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d064      	beq.n	8003aba <CO_TPDO_process+0x1fa>
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fec1 	bl	8003778 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80039f6:	e060      	b.n	8003aba <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 80039fe:	2bff      	cmp	r3, #255	@ 0xff
 8003a00:	d119      	bne.n	8003a36 <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003a08:	7c5b      	ldrb	r3, [r3, #17]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	22fe      	movs	r2, #254	@ 0xfe
 8003a1c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
 8003a20:	e009      	b.n	8003a36 <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8003a3c:	2bfe      	cmp	r3, #254	@ 0xfe
 8003a3e:	d112      	bne.n	8003a66 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003a46:	7c9a      	ldrb	r2, [r3, #18]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d133      	bne.n	8003aba <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 214c 	ldrb.w	r2, [r3, #332]	@ 0x14c
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
                        CO_TPDOsend(TPDO);
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fe8a 	bl	8003778 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003a64:	e029      	b.n	8003aba <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11c      	bne.n	8003aba <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 214c 	ldrb.w	r2, [r3, #332]	@ 0x14c
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
                    CO_TPDOsend(TPDO);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff fe73 	bl	8003778 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003a92:	e012      	b.n	8003aba <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	22ff      	movs	r2, #255	@ 0xff
 8003ab4:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#endif
    }
}
 8003ab8:	e000      	b.n	8003abc <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003aba:	bf00      	nop
}
 8003abc:	bf00      	nop
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <OD_getIndex+0x14>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	e000      	b.n	8003ada <OD_getIndex+0x16>
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <OD_get_u8>:
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af02      	add	r7, sp, #8
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	460b      	mov	r3, r1
 8003af4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003af6:	7af9      	ldrb	r1, [r7, #11]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2301      	movs	r3, #1
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7fe fb9b 	bl	800223c <OD_get_value>
 8003b06:	4603      	mov	r3, r0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <OD_get_u32>:
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b20:	7af9      	ldrb	r1, [r7, #11]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2304      	movs	r3, #4
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7fe fb86 	bl	800223c <OD_get_value>
 8003b30:	4603      	mov	r3, r0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <CO_fifo_reset>:
/**
 * Reset fifo object, make it empty
 *
 * @param fifo This object
 */
static inline void CO_fifo_reset(CO_fifo_t *fifo) {
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <CO_fifo_reset+0x1c>
        fifo->readPtr = 0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
#if (CO_CONFIG_FIFO) & CO_CONFIG_FIFO_ASCII_DATATYPES
        fifo->started = false;
#endif
    }

    return;
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
}
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <CO_fifo_getOccupied>:
 *
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t CO_fifo_getOccupied(CO_fifo_t *fifo) {
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da05      	bge.n	8003b8a <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    }

    return (size_t) sizeOccupied;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <CO_SDOclient_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDOclient_receive(void *object, void *msg) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t *SDO_C = (CO_SDOclient_t*)object;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	791b      	ldrb	r3, [r3, #4]
 8003baa:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3305      	adds	r3, #5
 8003bb0:	60fb      	str	r3, [r7, #12]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if (SDO_C->state != CO_SDO_ST_IDLE && DLC == 8U
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d014      	beq.n	8003be8 <CO_SDOclient_receive+0x50>
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d111      	bne.n	8003be8 <CO_SDOclient_receive+0x50>
        && (!CO_FLAG_READ(SDO_C->CANrxNew) || data[0] == 0x80)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <CO_SDOclient_receive+0x3c>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b80      	cmp	r3, #128	@ 0x80
 8003bd2:	d109      	bne.n	8003be8 <CO_SDOclient_receive+0x50>
            || (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ
                && SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP)
        ) {
#endif
            /* copy data and set 'new message' flag */
            memcpy((void *)&SDO_C->CANrxData[0], (const void *)&data[0], 8);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3370      	adds	r3, #112	@ 0x70
 8003bd8:	2208      	movs	r2, #8
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00e fb48 	bl	8012272 <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2201      	movs	r2, #1
 8003be6:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
            }
        }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 8003be8:	bf00      	nop
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <CO_SDOclient_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO_C == NULL || OD_1280_SDOcliPar == NULL
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <CO_SDOclient_init+0x42>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) < OD_H1280_SDO_CLIENT_1_PARAM
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff5a 	bl	8003ac4 <OD_getIndex>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8003c16:	d30c      	bcc.n	8003c32 <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) > (OD_H1280_SDO_CLIENT_1_PARAM + 0x7F)
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff53 	bl	8003ac4 <OD_getIndex>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 8003c24:	d205      	bcs.n	8003c32 <CO_SDOclient_init+0x42>
        || CANdevRx==NULL || CANdevTx==NULL
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <CO_SDOclient_init+0x42>
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <CO_SDOclient_init+0x48>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	e068      	b.n	8003d0a <CO_SDOclient_init+0x11a>
    /* Configure object variables */
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_LOCAL
    SDO_C->OD = OD;
    SDO_C->nodeId = nodeId;
#endif
    SDO_C->CANdevRx = CANdevRx;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c3c:	601a      	str	r2, [r3, #0]
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003c42:	809a      	strh	r2, [r3, #4]
    SDO_C->CANdevTx = CANdevTx;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	609a      	str	r2, [r3, #8]
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c4e:	819a      	strh	r2, [r3, #12]
    SDO_C->pFunctSignal = NULL;
    SDO_C->functSignalObject = NULL;
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3348      	adds	r3, #72	@ 0x48
 8003c5a:	2221      	movs	r2, #33	@ 0x21
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f001 fb65 	bl	800532c <CO_fifo_init>
                 CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1);

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 8003c62:	f107 021a 	add.w	r2, r7, #26
 8003c66:	2301      	movs	r3, #1
 8003c68:	2100      	movs	r1, #0
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff3b 	bl	8003ae6 <OD_get_u8>
 8003c70:	4603      	mov	r3, r0
 8003c72:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8003c74:	f107 0214 	add.w	r2, r7, #20
 8003c78:	2301      	movs	r3, #1
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff47 	bl	8003b10 <OD_get_u32>
 8003c82:	4603      	mov	r3, r0
 8003c84:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8003c86:	f107 0210 	add.w	r2, r7, #16
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ff3e 	bl	8003b10 <OD_get_u32>
 8003c94:	4603      	mov	r3, r0
 8003c96:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 8003c98:	f107 0219 	add.w	r2, r7, #25
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	2103      	movs	r1, #3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff20 	bl	8003ae6 <OD_get_u8>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	773b      	strb	r3, [r7, #28]

    if (odRet0 != ODR_OK || maxSubIndex != 3
 8003caa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10e      	bne.n	8003cd0 <CO_SDOclient_init+0xe0>
 8003cb2:	7ebb      	ldrb	r3, [r7, #26]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d10b      	bne.n	8003cd0 <CO_SDOclient_init+0xe0>
        || odRet1 != ODR_OK || odRet2 != ODR_OK || odRet3 != ODR_OK
 8003cb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <CO_SDOclient_init+0xe0>
 8003cc0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <CO_SDOclient_init+0xe0>
 8003cc8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <CO_SDOclient_init+0xfa>
    ) {
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <CO_SDOclient_init+0xf4>
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fef4 	bl	8003ac4 <OD_getIndex>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce2:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003ce4:	f06f 030b 	mvn.w	r3, #11
 8003ce8:	e00f      	b.n	8003d0a <CO_SDOclient_init+0x11a>
    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
    SDO_C->COB_IDServerToClient = 0;
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C,
 8003cea:	6979      	ldr	r1, [r7, #20]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	7e7b      	ldrb	r3, [r7, #25]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f80f 	bl	8003d14 <CO_SDOclient_setup>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	76fb      	strb	r3, [r7, #27]
                                                     COB_IDClientToServer,
                                                     COB_IDServerToClient,
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 8003cfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <CO_SDOclient_init+0x118>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	e000      	b.n	8003d0a <CO_SDOclient_init+0x11a>
    }

    return CO_ERROR_NO;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <CO_SDOclient_setup>:
/******************************************************************************/
CO_SDO_return_t CO_SDOclient_setup(CO_SDOclient_t *SDO_C,
                                   uint32_t COB_IDClientToServer,
                                   uint32_t COB_IDServerToClient,
                                   uint8_t nodeIDOfTheSDOServer)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af04      	add	r7, sp, #16
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <CO_SDOclient_setup+0x1a>
        return CO_SDO_RT_wrongArguments;
 8003d28:	f06f 0301 	mvn.w	r3, #1
 8003d2c:	e05f      	b.n	8003dee <CO_SDOclient_setup+0xda>
    }

    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	66da      	str	r2, [r3, #108]	@ 0x6c
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	751a      	strb	r2, [r3, #20]
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db05      	blt.n	8003d54 <CO_SDOclient_setup+0x40>
                        (uint16_t)(COB_IDClientToServer & 0x7FF) : 0;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	b29b      	uxth	r3, r3
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	e000      	b.n	8003d56 <CO_SDOclient_setup+0x42>
 8003d54:	2300      	movs	r3, #0
 8003d56:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db05      	blt.n	8003d6a <CO_SDOclient_setup+0x56>
                        (uint16_t)(COB_IDServerToClient & 0x7FF) : 0;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	b29b      	uxth	r3, r3
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	e000      	b.n	8003d6c <CO_SDOclient_setup+0x58>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	82bb      	strh	r3, [r7, #20]
    if (CanIdC2S != 0 && CanIdS2C != 0) {
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d006      	beq.n	8003d82 <CO_SDOclient_setup+0x6e>
 8003d74:	8abb      	ldrh	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <CO_SDOclient_setup+0x6e>
        SDO_C->valid = true;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	619a      	str	r2, [r3, #24]
 8003d80:	e006      	b.n	8003d90 <CO_SDOclient_setup+0x7c>
    }
    else {
        CanIdC2S = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	82fb      	strh	r3, [r7, #22]
        CanIdS2C = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	82bb      	strh	r3, [r7, #20]
        SDO_C->valid = false;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	619a      	str	r2, [r3, #24]
    }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8899      	ldrh	r1, [r3, #4]
 8003d98:	8aba      	ldrh	r2, [r7, #20]
 8003d9a:	4b17      	ldr	r3, [pc, #92]	@ (8003df8 <CO_SDOclient_setup+0xe4>)
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	2300      	movs	r3, #0
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003daa:	f002 fd3d 	bl	8006828 <CO_CANrxBufferInit>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO_C,           /* object passed to receive function */
            CO_SDOclient_receive);  /* this function will process rx msg */

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6898      	ldr	r0, [r3, #8]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8999      	ldrh	r1, [r3, #12]
 8003dba:	8afa      	ldrh	r2, [r7, #22]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f002 fd8b 	bl	80068e0 <CO_CANtxBufferInit>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	611a      	str	r2, [r3, #16]
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */


    if (ret != CO_ERROR_NO || SDO_C->CANtxBuff == NULL) {
 8003dd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <CO_SDOclient_setup+0xcc>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <CO_SDOclient_setup+0xd8>
        SDO_C->valid = false;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	619a      	str	r2, [r3, #24]
        return CO_SDO_RT_wrongArguments;
 8003de6:	f06f 0301 	mvn.w	r3, #1
 8003dea:	e000      	b.n	8003dee <CO_SDOclient_setup+0xda>
    }

    return CO_SDO_RT_ok_communicationEnd;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	08003b99 	.word	0x08003b99

08003dfc <CO_SDOclientDownloadInitiate>:
                                             uint16_t index,
                                             uint8_t subIndex,
                                             size_t sizeIndicated,
                                             uint16_t SDOtimeoutTime_ms,
                                             bool_t blockEnable)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	727b      	strb	r3, [r7, #9]
    /* verify parameters */
    if (SDO_C == NULL || !SDO_C->valid) {
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <CO_SDOclientDownloadInitiate+0x20>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <CO_SDOclientDownloadInitiate+0x26>
        return CO_SDO_RT_wrongArguments;
 8003e1c:	f06f 0301 	mvn.w	r3, #1
 8003e20:	e025      	b.n	8003e6e <CO_SDOclientDownloadInitiate+0x72>
    }

    /* save parameters */
    SDO_C->index = index;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	897a      	ldrh	r2, [r7, #10]
 8003e26:	839a      	strh	r2, [r3, #28]
    SDO_C->subIndex = subIndex;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	7a7a      	ldrb	r2, [r7, #9]
 8003e2c:	779a      	strb	r2, [r3, #30]
    SDO_C->sizeInd = sizeIndicated;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24
    SDO_C->sizeTran = 0;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	629a      	str	r2, [r3, #40]	@ 0x28
    SDO_C->finished = false;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]
    SDO_C->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003e40:	8b3b      	ldrh	r3, [r7, #24]
 8003e42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e46:	fb03 f202 	mul.w	r2, r3, r2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    SDO_C->timeoutTimer = 0;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	635a      	str	r2, [r3, #52]	@ 0x34
    CO_fifo_reset(&SDO_C->bufFifo);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3338      	adds	r3, #56	@ 0x38
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fe6e 	bl	8003b3a <CO_fifo_reset>
        SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ;
    }
    else
#endif
    {
        SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2211      	movs	r2, #17
 8003e62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	66da      	str	r2, [r3, #108]	@ 0x6c

    return CO_SDO_RT_ok_communicationEnd;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <CO_SDOclientDownloadBufWrite>:

/******************************************************************************/
size_t CO_SDOclientDownloadBufWrite(CO_SDOclient_t *SDO_C,
                                    const uint8_t *buf,
                                    size_t count)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
    size_t ret = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
    if (SDO_C != NULL && buf != NULL) {
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <CO_SDOclientDownloadBufWrite+0x2e>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <CO_SDOclientDownloadBufWrite+0x2e>
        ret = CO_fifo_write(&SDO_C->bufFifo, buf, count, NULL);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003e98:	2300      	movs	r3, #0
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	f001 fa67 	bl	8005370 <CO_fifo_write>
 8003ea2:	6178      	str	r0, [r7, #20]
    }
    return ret;
 8003ea4:	697b      	ldr	r3, [r7, #20]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <CO_SDOclientDownload>:
                                     bool_t abort,
                                     bool_t bufferPartial,
                                     CO_SDO_abortCode_t *SDOabortCode,
                                     size_t *sizeTransferred,
                                     uint32_t *timerNext_us)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; (void) bufferPartial; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	623b      	str	r3, [r7, #32]

    if (SDO_C == NULL || !SDO_C->valid) {
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <CO_SDOclientDownload+0x26>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <CO_SDOclientDownload+0x32>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003ed6:	4b8a      	ldr	r3, [pc, #552]	@ (8004100 <CO_SDOclientDownload+0x250>)
 8003ed8:	623b      	str	r3, [r7, #32]
        ret = CO_SDO_RT_wrongArguments;
 8003eda:	23fe      	movs	r3, #254	@ 0xfe
 8003edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003ee0:	e08a      	b.n	8003ff8 <CO_SDOclientDownload+0x148>
    }
    else if (SDO_C->state == CO_SDO_ST_IDLE) {
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d103      	bne.n	8003ef6 <CO_SDOclientDownload+0x46>
        ret = CO_SDO_RT_ok_communicationEnd;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003ef4:	e080      	b.n	8003ff8 <CO_SDOclientDownload+0x148>
        }
#endif
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */
    /* CAN data received ******************************************************/
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d06d      	beq.n	8003fda <CO_SDOclientDownload+0x12a>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80) {
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003f04:	2b80      	cmp	r3, #128	@ 0x80
 8003f06:	d10d      	bne.n	8003f24 <CO_SDOclientDownload+0x74>
            uint32_t code;
            memcpy(&code, &SDO_C->CANrxData[4], sizeof(code));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3374      	adds	r3, #116	@ 0x74
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	617b      	str	r3, [r7, #20]
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_IDLE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            ret = CO_SDO_RT_endedWithServerAbort;
 8003f1c:	23f6      	movs	r3, #246	@ 0xf6
 8003f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f22:	e051      	b.n	8003fc8 <CO_SDOclientDownload+0x118>
        }
        else if (abort) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <CO_SDOclientDownload+0x94>
            abortCode = (SDOabortCode != NULL)
                      ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <CO_SDOclientDownload+0x86>
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	e000      	b.n	8003f38 <CO_SDOclientDownload+0x88>
 8003f36:	4b72      	ldr	r3, [pc, #456]	@ (8004100 <CO_SDOclientDownload+0x250>)
            abortCode = (SDOabortCode != NULL)
 8003f38:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_ABORT;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003f42:	e041      	b.n	8003fc8 <CO_SDOclientDownload+0x118>
        }
        else switch (SDO_C->state) {
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b12      	cmp	r3, #18
 8003f4e:	d134      	bne.n	8003fba <CO_SDOclientDownload+0x10a>
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                if (SDO_C->CANrxData[0] == 0x60) {
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003f56:	2b60      	cmp	r3, #96	@ 0x60
 8003f58:	d128      	bne.n	8003fac <CO_SDOclientDownload+0xfc>
                    /* verify index and subindex */
                    uint16_t index;
                    uint8_t subindex;
                    index = ((uint16_t) SDO_C->CANrxData[2]) << 8;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	83fb      	strh	r3, [r7, #30]
                    index |= SDO_C->CANrxData[1];
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	8bfb      	ldrh	r3, [r7, #30]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	83fb      	strh	r3, [r7, #30]
                    subindex = SDO_C->CANrxData[3];
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8003f78:	777b      	strb	r3, [r7, #29]
                    if (index != SDO_C->index || subindex != SDO_C->subIndex) {
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8b9b      	ldrh	r3, [r3, #28]
 8003f7e:	8bfa      	ldrh	r2, [r7, #30]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d104      	bne.n	8003f8e <CO_SDOclientDownload+0xde>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	7f9b      	ldrb	r3, [r3, #30]
 8003f88:	7f7a      	ldrb	r2, [r7, #29]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d006      	beq.n	8003f9c <CO_SDOclientDownload+0xec>
                        abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8003f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004104 <CO_SDOclientDownload+0x254>)
 8003f90:	623b      	str	r3, [r7, #32]
                        SDO_C->state = CO_SDO_ST_ABORT;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 8003f9a:	e015      	b.n	8003fc8 <CO_SDOclientDownload+0x118>
                        SDO_C->toggle = 0x00;
                        SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                    }
#else
                    /* expedited transfer */
                    SDO_C->state = CO_SDO_ST_IDLE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    abortCode = CO_SDO_AB_CMD;
                    SDO_C->state = CO_SDO_ST_ABORT;
                }
                break;
 8003faa:	e00d      	b.n	8003fc8 <CO_SDOclientDownload+0x118>
                    abortCode = CO_SDO_AB_CMD;
 8003fac:	4b56      	ldr	r3, [pc, #344]	@ (8004108 <CO_SDOclientDownload+0x258>)
 8003fae:	623b      	str	r3, [r7, #32]
                    SDO_C->state = CO_SDO_ST_ABORT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                break;
 8003fb8:	e006      	b.n	8003fc8 <CO_SDOclientDownload+0x118>
                break;
            }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */

            default: {
                abortCode = CO_SDO_AB_CMD;
 8003fba:	4b53      	ldr	r3, [pc, #332]	@ (8004108 <CO_SDOclientDownload+0x258>)
 8003fbc:	623b      	str	r3, [r7, #32]
                SDO_C->state = CO_SDO_ST_ABORT;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                break;
 8003fc6:	bf00      	nop
            }
        }
        SDO_C->timeoutTimer = 0;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	635a      	str	r2, [r3, #52]	@ 0x34
        timeDifference_us = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003fd8:	e00e      	b.n	8003ff8 <CO_SDOclientDownload+0x148>
    }
    else if (abort) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <CO_SDOclientDownload+0x148>
        abortCode = (SDOabortCode != NULL)
                  ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <CO_SDOclientDownload+0x13c>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	e000      	b.n	8003fee <CO_SDOclientDownload+0x13e>
 8003fec:	4b44      	ldr	r3, [pc, #272]	@ (8004100 <CO_SDOclientDownload+0x250>)
        abortCode = (SDOabortCode != NULL)
 8003fee:	623b      	str	r3, [r7, #32]
        SDO_C->state = CO_SDO_ST_ABORT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d11f      	bne.n	8004040 <CO_SDOclientDownload+0x190>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	429a      	cmp	r2, r3
 800400a:	d205      	bcs.n	8004018 <CO_SDOclientDownload+0x168>
            SDO_C->timeoutTimer += timeDifference_us;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	441a      	add	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004020:	429a      	cmp	r2, r3
 8004022:	d305      	bcc.n	8004030 <CO_SDOclientDownload+0x180>
            abortCode = CO_SDO_AB_TIMEOUT;
 8004024:	4b39      	ldr	r3, [pc, #228]	@ (800410c <CO_SDOclientDownload+0x25c>)
 8004026:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_ABORT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            if (*timerNext_us > diff) {
                *timerNext_us = diff;
            }
        }
#endif
        if (SDO_C->CANtxBuff->bufferFull) {
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <CO_SDOclientDownload+0x190>
            ret = CO_SDO_RT_transmittBufferFull;
 800403a:	2304      	movs	r3, #4
 800403c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004040:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 80a7 	bne.w	8004198 <CO_SDOclientDownload+0x2e8>
        size_t count;
        memset((void *)&SDO_C->CANtxBuff->data[0], 0, 8);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	3305      	adds	r3, #5
 8004050:	2208      	movs	r2, #8
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f00e f825 	bl	80120a4 <memset>

        switch (SDO_C->state) {
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b11      	cmp	r3, #17
 8004064:	f040 8097 	bne.w	8004196 <CO_SDOclientDownload+0x2e6>
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            SDO_C->CANtxBuff->data[0] = 0x20;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2220      	movs	r2, #32
 800406e:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8b9a      	ldrh	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8b9b      	ldrh	r3, [r3, #28]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	7f92      	ldrb	r2, [r2, #30]
 8004094:	721a      	strb	r2, [r3, #8]

            /* get count of data bytes to transfer */
            count = CO_fifo_getOccupied(&SDO_C->bufFifo);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3338      	adds	r3, #56	@ 0x38
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fd61 	bl	8003b62 <CO_fifo_getOccupied>
 80040a0:	61b8      	str	r0, [r7, #24]

            /* is expedited transfer, <= 4bytes of data */
            if ((SDO_C->sizeInd == 0 && count <= 4)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <CO_SDOclientDownload+0x200>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d907      	bls.n	80040c0 <CO_SDOclientDownload+0x210>
                || (SDO_C->sizeInd > 0 && SDO_C->sizeInd <= 4)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d064      	beq.n	8004182 <CO_SDOclientDownload+0x2d2>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d860      	bhi.n	8004182 <CO_SDOclientDownload+0x2d2>
            ) {
                SDO_C->CANtxBuff->data[0] |= 0x02;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	795a      	ldrb	r2, [r3, #5]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f042 0202 	orr.w	r2, r2, #2
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	715a      	strb	r2, [r3, #5]

                /* verify length, indicate data size */
                if (count == 0 || (SDO_C->sizeInd > 0 &&
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <CO_SDOclientDownload+0x23a>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d019      	beq.n	8004114 <CO_SDOclientDownload+0x264>
                                   SDO_C->sizeInd != count)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                if (count == 0 || (SDO_C->sizeInd > 0 &&
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d014      	beq.n	8004114 <CO_SDOclientDownload+0x264>
                ) {
                    SDO_C->state = CO_SDO_ST_IDLE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    abortCode = CO_SDO_AB_TYPE_MISMATCH;
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <CO_SDOclientDownload+0x260>)
 80040f4:	623b      	str	r3, [r7, #32]
                    ret = CO_SDO_RT_endedWithClientAbort;
 80040f6:	23f7      	movs	r3, #247	@ 0xf7
 80040f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 80040fc:	e04c      	b.n	8004198 <CO_SDOclientDownload+0x2e8>
 80040fe:	bf00      	nop
 8004100:	06040047 	.word	0x06040047
 8004104:	06040043 	.word	0x06040043
 8004108:	05040001 	.word	0x05040001
 800410c:	05040000 	.word	0x05040000
 8004110:	06070010 	.word	0x06070010
                }
                if (SDO_C->sizeInd > 0) {
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d011      	beq.n	8004140 <CO_SDOclientDownload+0x290>
                    SDO_C->CANtxBuff->data[0] |= 0x01 | ((4 - count) << 2);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	795a      	ldrb	r2, [r3, #5]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f1c3 0304 	rsb	r3, r3, #4
 800412a:	b2db      	uxtb	r3, r3
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4313      	orrs	r3, r2
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	715a      	strb	r2, [r3, #5]
                }

                /* copy data */
                CO_fifo_read(&SDO_C->bufFifo,
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f103 0038 	add.w	r0, r3, #56	@ 0x38
                             &SDO_C->CANtxBuff->data[4], count, NULL);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
                CO_fifo_read(&SDO_C->bufFifo,
 800414a:	f103 0109 	add.w	r1, r3, #9
 800414e:	2300      	movs	r3, #0
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f001 f965 	bl	8005420 <CO_fifo_read>
                SDO_C->sizeTran = count;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	629a      	str	r2, [r3, #40]	@ 0x28
                SDO_C->finished = true;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	621a      	str	r2, [r3, #32]
                break;
#endif
            }

            /* reset timeout timer and send message */
            SDO_C->timeoutTimer = 0;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	635a      	str	r2, [r3, #52]	@ 0x34
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f002 fc7a 	bl	8006a6c <CO_CANsend>
            SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2212      	movs	r2, #18
 800417c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            break;
 8004180:	e00a      	b.n	8004198 <CO_SDOclientDownload+0x2e8>
                SDO_C->state = CO_SDO_ST_IDLE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 800418a:	4b28      	ldr	r3, [pc, #160]	@ (800422c <CO_SDOclientDownload+0x37c>)
 800418c:	623b      	str	r3, [r7, #32]
                ret = CO_SDO_RT_endedWithClientAbort;
 800418e:	23f7      	movs	r3, #247	@ 0xf7
 8004190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8004194:	e000      	b.n	8004198 <CO_SDOclientDownload+0x2e8>
            break;
        }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */

        default: {
            break;
 8004196:	bf00      	nop
        }
        }
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004198:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800419c:	2b01      	cmp	r3, #1
 800419e:	d132      	bne.n	8004206 <CO_SDOclientDownload+0x356>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d12c      	bne.n	8004206 <CO_SDOclientDownload+0x356>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2280      	movs	r2, #128	@ 0x80
 80041b6:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8b9a      	ldrh	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8b9b      	ldrh	r3, [r3, #28]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	7f92      	ldrb	r2, [r2, #30]
 80041dc:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO_C->CANtxBuff->data[4], &code, sizeof(code));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	3309      	adds	r3, #9
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f002 fc3a 	bl	8006a6c <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            ret = CO_SDO_RT_endedWithClientAbort;
 8004200:	23f7      	movs	r3, #247	@ 0xf7
 8004202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            ret = CO_SDO_RT_blockDownldInProgress;
        }
#endif
    }

    if (sizeTransferred != NULL) {
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <CO_SDOclientDownload+0x364>
        *sizeTransferred = SDO_C->sizeTran;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004212:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <CO_SDOclientDownload+0x370>
        *SDOabortCode = abortCode;
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	6a3a      	ldr	r2, [r7, #32]
 800421e:	601a      	str	r2, [r3, #0]
    }

    return ret;
 8004220:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004224:	4618      	mov	r0, r3
 8004226:	3728      	adds	r7, #40	@ 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	06010000 	.word	0x06010000

08004230 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <OD_getIndex+0x14>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	e000      	b.n	800427e <OD_getIndex+0x16>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <OD_extension_init>:
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <OD_extension_init+0x14>
 800429a:	2305      	movs	r3, #5
 800429c:	e003      	b.n	80042a6 <OD_extension_init+0x1c>
    entry->extension = extension;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <OD_get_u8>:
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af02      	add	r7, sp, #8
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	460b      	mov	r3, r1
 80042c0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80042c2:	7af9      	ldrb	r1, [r7, #11]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2301      	movs	r3, #1
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7fd ffb5 	bl	800223c <OD_get_value>
 80042d2:	4603      	mov	r3, r0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <OD_get_u32>:
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	460b      	mov	r3, r1
 80042ea:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80042ec:	7af9      	ldrb	r1, [r7, #11]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2304      	movs	r3, #4
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7fd ffa0 	bl	800223c <OD_get_value>
 80042fc:	4603      	mov	r3, r0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af02      	add	r7, sp, #8
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	460b      	mov	r3, r1
 8004314:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8004316:	1d3a      	adds	r2, r7, #4
 8004318:	7af9      	ldrb	r1, [r7, #11]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2304      	movs	r3, #4
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7fd ffc1 	bl	80022a8 <OD_set_value>
 8004326:	4603      	mov	r3, r0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	791b      	ldrb	r3, [r3, #4]
 8004342:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	3305      	adds	r3, #5
 8004348:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 800434a:	7cfb      	ldrb	r3, [r7, #19]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d115      	bne.n	800437c <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b80      	cmp	r3, #128	@ 0x80
 8004356:	d103      	bne.n	8004360 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 800435e:	e00d      	b.n	800437c <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	2b00      	cmp	r3, #0
 8004366:	d109      	bne.n	800437c <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	333c      	adds	r3, #60	@ 0x3c
 800436c:	7cfa      	ldrb	r2, [r7, #19]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	4618      	mov	r0, r3
 8004372:	f00d ff7e 	bl	8012272 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2201      	movs	r2, #1
 800437a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800437c:	bf00      	nop
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	@ 0x28
 8004388:	af04      	add	r7, sp, #16
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	4611      	mov	r1, r2
 8004390:	461a      	mov	r2, r3
 8004392:	460b      	mov	r3, r1
 8004394:	80fb      	strh	r3, [r7, #6]
 8004396:	4613      	mov	r3, r2
 8004398:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	6a3a      	ldr	r2, [r7, #32]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d106      	bne.n	80043b2 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d101      	bne.n	80043b2 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e04e      	b.n	8004450 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	db02      	blt.n	80043ca <CO_SDOserver_init_canRxTx+0x46>
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	e000      	b.n	80043cc <CO_SDOserver_init_canRxTx+0x48>
 80043ca:	2300      	movs	r3, #0
 80043cc:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	db02      	blt.n	80043da <CO_SDOserver_init_canRxTx+0x56>
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	e000      	b.n	80043dc <CO_SDOserver_init_canRxTx+0x58>
 80043da:	2300      	movs	r3, #0
 80043dc:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 80043de:	8afb      	ldrh	r3, [r7, #22]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d006      	beq.n	80043f2 <CO_SDOserver_init_canRxTx+0x6e>
 80043e4:	8abb      	ldrh	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	611a      	str	r2, [r3, #16]
 80043f0:	e006      	b.n	8004400 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004400:	8afa      	ldrh	r2, [r7, #22]
 8004402:	88f9      	ldrh	r1, [r7, #6]
 8004404:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <CO_SDOserver_init_canRxTx+0xd4>)
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f002 fa07 	bl	8006828 <CO_CANrxBufferInit>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	8aba      	ldrh	r2, [r7, #20]
 8004424:	88b9      	ldrh	r1, [r7, #4]
 8004426:	2300      	movs	r3, #0
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	2308      	movs	r3, #8
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2300      	movs	r3, #0
 8004430:	f002 fa56 	bl	80068e0 <CO_CANtxBufferInit>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8004442:	23ff      	movs	r3, #255	@ 0xff
 8004444:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
    }

    return ret;
 800444c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	08004331 	.word	0x08004331

0800445c <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b08f      	sub	sp, #60	@ 0x3c
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <OD_write_1201_additional+0x20>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <OD_write_1201_additional+0x20>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 800447c:	2309      	movs	r3, #9
 800447e:	e0f9      	b.n	8004674 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	7c5b      	ldrb	r3, [r3, #17]
 800448a:	2b03      	cmp	r3, #3
 800448c:	f200 80e8 	bhi.w	8004660 <OD_write_1201_additional+0x204>
 8004490:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <OD_write_1201_additional+0x3c>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	08004571 	.word	0x08004571
 80044a4:	08004637 	.word	0x08004637
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 80044a8:	2304      	movs	r3, #4
 80044aa:	e0e3      	b.n	8004674 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 80044ac:	68b8      	ldr	r0, [r7, #8]
 80044ae:	f7ff fecd 	bl	800424c <CO_getUint32>
 80044b2:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044bc:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 80044be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044c8:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	0fdb      	lsrs	r3, r3, #31
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4b69      	ldr	r3, [pc, #420]	@ (800467c <OD_write_1201_additional+0x220>)
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d134      	bne.n	8004548 <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <OD_write_1201_additional+0x98>
 80044e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <OD_write_1201_additional+0x98>
 80044ec:	8afa      	ldrh	r2, [r7, #22]
 80044ee:	8abb      	ldrh	r3, [r7, #20]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d129      	bne.n	8004548 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d028      	beq.n	800454c <OD_write_1201_additional+0xf0>
 80044fa:	8afb      	ldrh	r3, [r7, #22]
 80044fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80044fe:	d923      	bls.n	8004548 <OD_write_1201_additional+0xec>
 8004500:	8afb      	ldrh	r3, [r7, #22]
 8004502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004506:	d903      	bls.n	8004510 <OD_write_1201_additional+0xb4>
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800450e:	d91b      	bls.n	8004548 <OD_write_1201_additional+0xec>
 8004510:	8afb      	ldrh	r3, [r7, #22]
 8004512:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8004516:	d903      	bls.n	8004520 <OD_write_1201_additional+0xc4>
 8004518:	8afb      	ldrh	r3, [r7, #22]
 800451a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800451e:	d313      	bcc.n	8004548 <OD_write_1201_additional+0xec>
 8004520:	8afb      	ldrh	r3, [r7, #22]
 8004522:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004526:	d903      	bls.n	8004530 <OD_write_1201_additional+0xd4>
 8004528:	8afb      	ldrh	r3, [r7, #22]
 800452a:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800452e:	d30b      	bcc.n	8004548 <OD_write_1201_additional+0xec>
 8004530:	8afb      	ldrh	r3, [r7, #22]
 8004532:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8004536:	d303      	bcc.n	8004540 <OD_write_1201_additional+0xe4>
 8004538:	8afb      	ldrh	r3, [r7, #22]
 800453a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800453e:	d303      	bcc.n	8004548 <OD_write_1201_additional+0xec>
 8004540:	8afb      	ldrh	r3, [r7, #22]
 8004542:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004546:	d901      	bls.n	800454c <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 8004548:	230f      	movs	r3, #15
 800454a:	e093      	b.n	8004674 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	f8b3 004a 	ldrh.w	r0, [r3, #74]	@ 0x4a
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4603      	mov	r3, r0
 8004568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800456a:	f7ff ff0b 	bl	8004384 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 800456e:	e07a      	b.n	8004666 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8004570:	68b8      	ldr	r0, [r7, #8]
 8004572:	f7ff fe6b 	bl	800424c <CO_getUint32>
 8004576:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	b29b      	uxth	r3, r3
 800457c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004580:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800458c:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	43db      	mvns	r3, r3
 8004592:	0fdb      	lsrs	r3, r3, #31
 8004594:	b2db      	uxtb	r3, r3
 8004596:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8004598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459a:	4b38      	ldr	r3, [pc, #224]	@ (800467c <OD_write_1201_additional+0x220>)
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d134      	bne.n	800460c <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <OD_write_1201_additional+0x15c>
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <OD_write_1201_additional+0x15c>
 80045b0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80045b2:	8c3b      	ldrh	r3, [r7, #32]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d129      	bne.n	800460c <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d028      	beq.n	8004610 <OD_write_1201_additional+0x1b4>
 80045be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80045c2:	d923      	bls.n	800460c <OD_write_1201_additional+0x1b0>
 80045c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ca:	d903      	bls.n	80045d4 <OD_write_1201_additional+0x178>
 80045cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045ce:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80045d2:	d91b      	bls.n	800460c <OD_write_1201_additional+0x1b0>
 80045d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045d6:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80045da:	d903      	bls.n	80045e4 <OD_write_1201_additional+0x188>
 80045dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045e2:	d313      	bcc.n	800460c <OD_write_1201_additional+0x1b0>
 80045e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045ea:	d903      	bls.n	80045f4 <OD_write_1201_additional+0x198>
 80045ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045ee:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80045f2:	d30b      	bcc.n	800460c <OD_write_1201_additional+0x1b0>
 80045f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045f6:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80045fa:	d303      	bcc.n	8004604 <OD_write_1201_additional+0x1a8>
 80045fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004602:	d303      	bcc.n	800460c <OD_write_1201_additional+0x1b0>
 8004604:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004606:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800460a:	d901      	bls.n	8004610 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 800460c:	230f      	movs	r3, #15
 800460e:	e031      	b.n	8004674 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8004610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004612:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 800461a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461c:	f8b3 404a 	ldrh.w	r4, [r3, #74]	@ 0x4a
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004626:	9201      	str	r2, [sp, #4]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4623      	mov	r3, r4
 800462c:	4602      	mov	r2, r0
 800462e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004630:	f7ff fea8 	bl	8004384 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8004634:	e017      	b.n	8004666 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d001      	beq.n	8004640 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 800463c:	230b      	movs	r3, #11
 800463e:	e019      	b.n	8004674 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f7ff fdf5 	bl	8004230 <CO_getUint8>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if (nodeId < 1 || nodeId > 127) {
 800464c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <OD_write_1201_additional+0x200>
 8004654:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004658:	2b00      	cmp	r3, #0
 800465a:	da03      	bge.n	8004664 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 800465c:	230f      	movs	r3, #15
 800465e:	e009      	b.n	8004674 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8004660:	230e      	movs	r3, #14
 8004662:	e007      	b.n	8004674 <OD_write_1201_additional+0x218>
            break;
 8004664:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7fd fc1d 	bl	8001eac <OD_writeOriginal>
 8004672:	4603      	mov	r3, r0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3734      	adds	r7, #52	@ 0x34
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	3ffff800 	.word	0x3ffff800

08004680 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	@ 0x30
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <CO_SDOserver_init+0x26>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <CO_SDOserver_init+0x26>
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <CO_SDOserver_init+0x26>
 80046a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295
 80046aa:	e0f5      	b.n	8004898 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80046b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80046ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046be:	fb03 f202 	mul.w	r2, r3, r2
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	675a      	str	r2, [r3, #116]	@ 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d117      	bne.n	8004702 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <CO_SDOserver_init+0x60>
 80046d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	da02      	bge.n	80046e6 <CO_SDOserver_init+0x66>
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	e0d8      	b.n	8004898 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80046ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80046f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	611a      	str	r2, [r3, #16]
 8004700:	e0a4      	b.n	800484c <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fdb0 	bl	8004268 <OD_getIndex>
 8004708:	4603      	mov	r3, r0
 800470a:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 800470c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800470e:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8004712:	d123      	bne.n	800475c <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <CO_SDOserver_init+0xa2>
 800471a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800471e:	2b00      	cmp	r3, #0
 8004720:	da02      	bge.n	8004728 <CO_SDOserver_init+0xa8>
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	e0b7      	b.n	8004898 <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004730:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 800473a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8004742:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004744:	2301      	movs	r3, #1
 8004746:	2101      	movs	r1, #1
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff fddc 	bl	8004306 <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 800474e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004750:	2301      	movs	r3, #1
 8004752:	2102      	movs	r1, #2
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fdd6 	bl	8004306 <OD_set_u32>
 800475a:	e077      	b.n	800484c <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 800475c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800475e:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8004762:	d96f      	bls.n	8004844 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8004764:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004766:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 800476a:	d26b      	bcs.n	8004844 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 800476c:	f107 021d 	add.w	r2, r7, #29
 8004770:	2301      	movs	r3, #1
 8004772:	2100      	movs	r1, #0
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fd9c 	bl	80042b2 <OD_get_u8>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8004780:	f107 0218 	add.w	r2, r7, #24
 8004784:	2301      	movs	r3, #1
 8004786:	2101      	movs	r1, #1
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fda7 	bl	80042dc <OD_get_u32>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8004794:	f107 0214 	add.w	r2, r7, #20
 8004798:	2301      	movs	r3, #1
 800479a:	2102      	movs	r1, #2
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fd9d 	bl	80042dc <OD_get_u32>
 80047a2:	4603      	mov	r3, r0
 80047a4:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 80047a6:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <CO_SDOserver_init+0x14a>
 80047ae:	7f7b      	ldrb	r3, [r7, #29]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d002      	beq.n	80047ba <CO_SDOserver_init+0x13a>
 80047b4:	7f7b      	ldrb	r3, [r7, #29]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d107      	bne.n	80047ca <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 80047ba:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <CO_SDOserver_init+0x14a>
 80047c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 80047ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <CO_SDOserver_init+0x156>
 80047d0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80047d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d4:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80047d6:	f06f 030b 	mvn.w	r3, #11
 80047da:	e05d      	b.n	8004898 <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	db05      	blt.n	80047ee <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80047e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	e000      	b.n	80047f0 <CO_SDOserver_init+0x170>
 80047ee:	2300      	movs	r3, #0
 80047f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	db05      	blt.n	8004804 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80047fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004800:	b29b      	uxth	r3, r3
 8004802:	e000      	b.n	8004806 <CO_SDOserver_init+0x186>
 8004804:	2300      	movs	r3, #0
 8004806:	84bb      	strh	r3, [r7, #36]	@ 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a23      	ldr	r2, [pc, #140]	@ (80048a0 <CO_SDOserver_init+0x220>)
 8004812:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <CO_SDOserver_init+0x224>)
 8004818:	65da      	str	r2, [r3, #92]	@ 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3354      	adds	r3, #84	@ 0x54
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fd32 	bl	800428a <OD_extension_init>
 8004826:	4603      	mov	r3, r0
 8004828:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 800482a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8004832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <CO_SDOserver_init+0x1be>
 8004838:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800483a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 800483e:	f06f 030b 	mvn.w	r3, #11
 8004842:	e029      	b.n	8004898 <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295
 8004848:	e026      	b.n	8004898 <CO_SDOserver_init+0x218>
        ) {
 800484a:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	639a      	str	r2, [r3, #56]	@ 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004856:	645a      	str	r2, [r3, #68]	@ 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800485c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004866:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	64da      	str	r2, [r3, #76]	@ 0x4c
    SDO->COB_IDServerToClient = 0;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800487a:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 800487c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800487e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004880:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8004884:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8004886:	9201      	str	r2, [sp, #4]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4603      	mov	r3, r0
 800488c:	460a      	mov	r2, r1
 800488e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff fd77 	bl	8004384 <CO_SDOserver_init_canRxTx>
 8004896:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8004898:	4618      	mov	r0, r3
 800489a:	3728      	adds	r7, #40	@ 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	08001dfd 	.word	0x08001dfd
 80048a4:	0800445d 	.word	0x0800445d

080048a8 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <OD_getIndex+0x14>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	e000      	b.n	80048f6 <OD_getIndex+0x16>
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <OD_extension_init>:
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <OD_extension_init+0x14>
 8004912:	2305      	movs	r3, #5
 8004914:	e003      	b.n	800491e <OD_extension_init+0x1c>
    entry->extension = extension;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <OD_get_u8>:
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af02      	add	r7, sp, #8
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	460b      	mov	r3, r1
 8004938:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800493a:	7af9      	ldrb	r1, [r7, #11]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2301      	movs	r3, #1
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7fd fc79 	bl	800223c <OD_get_value>
 800494a:	4603      	mov	r3, r0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <OD_get_u32>:
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	460b      	mov	r3, r1
 8004962:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004964:	7af9      	ldrb	r1, [r7, #11]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2304      	movs	r3, #4
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7fd fc64 	bl	800223c <OD_get_value>
 8004974:	4603      	mov	r3, r0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7c9b      	ldrb	r3, [r3, #18]
 800498a:	3301      	adds	r3, #1
 800498c:	b2da      	uxtb	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	749a      	strb	r2, [r3, #18]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7c9a      	ldrb	r2, [r3, #18]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7c5b      	ldrb	r3, [r3, #17]
 800499a:	429a      	cmp	r2, r3
 800499c:	d902      	bls.n	80049a4 <CO_SYNCsend+0x26>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	7c92      	ldrb	r2, [r2, #18]
 80049c6:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f002 f84a 	bl	8006a6c <CO_CANsend>
 80049d8:	4603      	mov	r3, r0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 80049e2:	b480      	push	{r7}
 80049e4:	b087      	sub	sp, #28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	791b      	ldrb	r3, [r3, #4]
 80049f4:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	7c5b      	ldrb	r3, [r3, #17]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10c      	bne.n	8004a1c <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e019      	b.n	8004a42 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	721a      	strb	r2, [r3, #8]
 8004a1a:	e012      	b.n	8004a42 <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d109      	bne.n	8004a36 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	3305      	adds	r3, #5
 8004a26:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e005      	b.n	8004a42 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b08f      	sub	sp, #60	@ 0x3c
 8004a74:	af04      	add	r7, sp, #16
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <OD_write_1005+0x2e>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	7c5b      	ldrb	r3, [r3, #17]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d108      	bne.n	8004a9e <OD_write_1005+0x2e>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d102      	bne.n	8004a9e <OD_write_1005+0x2e>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004a9e:	2309      	movs	r3, #9
 8004aa0:	e0a3      	b.n	8004bea <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004aa8:	68b8      	ldr	r0, [r7, #8]
 8004aaa:	f7ff ff0b 	bl	80048c4 <CO_getUint32>
 8004aae:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab8:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	4b49      	ldr	r3, [pc, #292]	@ (8004bf4 <OD_write_1005+0x184>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d133      	bne.n	8004b3e <OD_write_1005+0xce>
 8004ad6:	8bfb      	ldrh	r3, [r7, #30]
 8004ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ada:	d930      	bls.n	8004b3e <OD_write_1005+0xce>
 8004adc:	8bfb      	ldrh	r3, [r7, #30]
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae2:	d903      	bls.n	8004aec <OD_write_1005+0x7c>
 8004ae4:	8bfb      	ldrh	r3, [r7, #30]
 8004ae6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004aea:	d928      	bls.n	8004b3e <OD_write_1005+0xce>
 8004aec:	8bfb      	ldrh	r3, [r7, #30]
 8004aee:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8004af2:	d903      	bls.n	8004afc <OD_write_1005+0x8c>
 8004af4:	8bfb      	ldrh	r3, [r7, #30]
 8004af6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004afa:	d320      	bcc.n	8004b3e <OD_write_1005+0xce>
 8004afc:	8bfb      	ldrh	r3, [r7, #30]
 8004afe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b02:	d903      	bls.n	8004b0c <OD_write_1005+0x9c>
 8004b04:	8bfb      	ldrh	r3, [r7, #30]
 8004b06:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004b0a:	d318      	bcc.n	8004b3e <OD_write_1005+0xce>
 8004b0c:	8bfb      	ldrh	r3, [r7, #30]
 8004b0e:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8004b12:	d303      	bcc.n	8004b1c <OD_write_1005+0xac>
 8004b14:	8bfb      	ldrh	r3, [r7, #30]
 8004b16:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b1a:	d310      	bcc.n	8004b3e <OD_write_1005+0xce>
 8004b1c:	8bfb      	ldrh	r3, [r7, #30]
 8004b1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b22:	d80c      	bhi.n	8004b3e <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <OD_write_1005+0xd2>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <OD_write_1005+0xd2>
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b38:	8bfa      	ldrh	r2, [r7, #30]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8004b3e:	230f      	movs	r3, #15
 8004b40:	e053      	b.n	8004bea <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b48:	8bfa      	ldrh	r2, [r7, #30]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d03a      	beq.n	8004bc4 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 8004b56:	8bfa      	ldrh	r2, [r7, #30]
 8004b58:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <OD_write_1005+0x188>)
 8004b5a:	9302      	str	r3, [sp, #8]
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004b68:	f001 fe5e 	bl	8006828 <CO_CANrxBufferInit>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8004b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004b78:	2309      	movs	r3, #9
 8004b7a:	e036      	b.n	8004bea <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bf14      	ite	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	2300      	moveq	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	461c      	mov	r4, r3
 8004b96:	8bfa      	ldrh	r2, [r7, #30]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	9400      	str	r4, [sp, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f001 fe9e 	bl	80068e0 <CO_CANtxBufferInit>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	629a      	str	r2, [r3, #40]	@ 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d104      	bne.n	8004bbc <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 8004bb8:	2309      	movs	r3, #9
 8004bba:	e016      	b.n	8004bea <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	8bfa      	ldrh	r2, [r7, #30]
 8004bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	2200      	movs	r2, #0
 8004bda:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7fd f962 	bl	8001eac <OD_writeOriginal>
 8004be8:	4603      	mov	r3, r0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	372c      	adds	r7, #44	@ 0x2c
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd90      	pop	{r4, r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	bffff800 	.word	0xbffff800
 8004bf8:	080049e3 	.word	0x080049e3

08004bfc <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b089      	sub	sp, #36	@ 0x24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00c      	beq.n	8004c2a <OD_write_1019+0x2e>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	7c5b      	ldrb	r3, [r3, #17]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <OD_write_1019+0x2e>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <OD_write_1019+0x2e>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004c2a:	2309      	movs	r3, #9
 8004c2c:	e041      	b.n	8004cb2 <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004c34:	68b8      	ldr	r0, [r7, #8]
 8004c36:	f7ff fe37 	bl	80048a8 <CO_getUint8>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d002      	beq.n	8004c4a <OD_write_1019+0x4e>
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	2bf0      	cmp	r3, #240	@ 0xf0
 8004c48:	d901      	bls.n	8004c4e <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8004c4a:	230f      	movs	r3, #15
 8004c4c:	e031      	b.n	8004cb2 <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8004c58:	2317      	movs	r3, #23
 8004c5a:	e02a      	b.n	8004cb2 <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461c      	mov	r4, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	9400      	str	r4, [sp, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	f001 fe2d 	bl	80068e0 <CO_CANtxBufferInit>
 8004c86:	4602      	mov	r2, r0
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	629a      	str	r2, [r3, #40]	@ 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 8004c9a:	2309      	movs	r3, #9
 8004c9c:	e009      	b.n	8004cb2 <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	7cfa      	ldrb	r2, [r7, #19]
 8004ca2:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7fd f8fe 	bl	8001eac <OD_writeOriginal>
 8004cb0:	4603      	mov	r3, r0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd90      	pop	{r4, r7, pc}
	...

08004cbc <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08c      	sub	sp, #48	@ 0x30
 8004cc0:	af04      	add	r7, sp, #16
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <CO_SYNC_init+0x32>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <CO_SYNC_init+0x32>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <CO_SYNC_init+0x32>
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf2:	e0fe      	b.n	8004ef2 <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004cf4:	2260      	movs	r2, #96	@ 0x60
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f00d f9d3 	bl	80120a4 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004d02:	f107 0218 	add.w	r2, r7, #24
 8004d06:	2301      	movs	r3, #1
 8004d08:	2100      	movs	r1, #0
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff fe22 	bl	8004954 <OD_get_u32>
 8004d10:	4603      	mov	r3, r0
 8004d12:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004d14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <CO_SYNC_init+0x74>
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fddc 	bl	80048e0 <OD_getIndex>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d2e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004d30:	f06f 030b 	mvn.w	r3, #11
 8004d34:	e0dd      	b.n	8004ef2 <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	635a      	str	r2, [r3, #52]	@ 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8004efc <CO_SYNC_init+0x240>)
 8004d40:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a6e      	ldr	r2, [pc, #440]	@ (8004f00 <CO_SYNC_init+0x244>)
 8004d46:	63da      	str	r2, [r3, #60]	@ 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3334      	adds	r3, #52	@ 0x34
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fdd7 	bl	8004902 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8004d54:	2300      	movs	r3, #0
 8004d56:	2204      	movs	r2, #4
 8004d58:	2100      	movs	r1, #0
 8004d5a:	6838      	ldr	r0, [r7, #0]
 8004d5c:	f7fd fad5 	bl	800230a <OD_getPtr>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d006      	beq.n	8004d82 <CO_SYNC_init+0xc6>
 8004d74:	6838      	ldr	r0, [r7, #0]
 8004d76:	f7ff fdb3 	bl	80048e0 <OD_getIndex>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d80:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004d82:	f06f 030b 	mvn.w	r3, #11
 8004d86:	e0b4      	b.n	8004ef2 <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d90:	f7fd fabb 	bl	800230a <OD_getPtr>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <CO_SYNC_init+0x106>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10c      	bne.n	8004dc2 <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <CO_SYNC_init+0x100>
 8004dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004db0:	f7ff fd96 	bl	80048e0 <OD_getIndex>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461a      	mov	r2, r3
 8004db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dba:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004dbc:	f06f 030b 	mvn.w	r3, #11
 8004dc0:	e097      	b.n	8004ef2 <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d033      	beq.n	8004e34 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004dcc:	f107 0217 	add.w	r2, r7, #23
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dd6:	f7ff fda8 	bl	800492a <OD_get_u8>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d006      	beq.n	8004dfa <CO_SYNC_init+0x13e>
 8004dec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dee:	f7ff fd77 	bl	80048e0 <OD_getIndex>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df8:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8004dfa:	f06f 030b 	mvn.w	r3, #11
 8004dfe:	e078      	b.n	8004ef2 <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d102      	bne.n	8004e0c <CO_SYNC_init+0x150>
 8004e06:	2302      	movs	r3, #2
 8004e08:	75fb      	strb	r3, [r7, #23]
 8004e0a:	e004      	b.n	8004e16 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8004e10:	d901      	bls.n	8004e16 <CO_SYNC_init+0x15a>
 8004e12:	23f0      	movs	r3, #240	@ 0xf0
 8004e14:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a37      	ldr	r2, [pc, #220]	@ (8004efc <CO_SYNC_init+0x240>)
 8004e20:	655a      	str	r2, [r3, #84]	@ 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a37      	ldr	r2, [pc, #220]	@ (8004f04 <CO_SYNC_init+0x248>)
 8004e26:	659a      	str	r2, [r3, #88]	@ 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3350      	adds	r3, #80	@ 0x50
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e30:	f7ff fd67 	bl	8004902 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8004e34:	7dfa      	ldrb	r2, [r7, #23]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    SYNC->CANdevRx = CANdevRx;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004e70:	861a      	strh	r2, [r3, #48]	@ 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e76:	649a      	str	r2, [r3, #72]	@ 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004e7c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f08 <CO_SYNC_init+0x24c>)
 8004e8e:	9302      	str	r3, [sp, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e9e:	f001 fcc3 	bl	8006828 <CO_CANrxBufferInit>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8004ea6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <CO_SYNC_init+0x1f8>
        return ret;
 8004eae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004eb2:	e01e      	b.n	8004ef2 <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	4618      	mov	r0, r3
 8004ecc:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	9000      	str	r0, [sp, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ed8:	f001 fd02 	bl	80068e0 <CO_CANtxBufferInit>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	629a      	str	r2, [r3, #40]	@ 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	e000      	b.n	8004ef2 <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	08001dfd 	.word	0x08001dfd
 8004f00:	08004a71 	.word	0x08004a71
 8004f04:	08004bfd 	.word	0x08004bfd
 8004f08:	080049e3 	.word	0x080049e3

08004f0c <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	@ 0x28
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8088 	beq.w	8005036 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d902      	bls.n	8004f40 <CO_SYNC_process+0x34>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <CO_SYNC_process+0x5c>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	e000      	b.n	8004f6a <CO_SYNC_process+0x5e>
 8004f68:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8004f6a:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d031      	beq.n	8004fd6 <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d828      	bhi.n	8004fd6 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8004f84:	2301      	movs	r3, #1
 8004f86:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7ff fcf8 	bl	800497e <CO_SYNCsend>
 8004f8e:	e022      	b.n	8004fd6 <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	7c1b      	ldrb	r3, [r3, #16]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d11e      	bne.n	8004fd6 <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d202      	bcs.n	8004fb0 <CO_SYNC_process+0xa4>
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d20d      	bcs.n	8004fd6 <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004fc8:	2218      	movs	r2, #24
 8004fca:	2101      	movs	r1, #1
 8004fcc:	f7fc fab6 	bl	800153c <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d015      	beq.n	800500a <CO_SYNC_process+0xfe>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d010      	beq.n	800500a <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d909      	bls.n	800500a <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8004ffe:	2302      	movs	r3, #2
 8005000:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	615a      	str	r2, [r3, #20]
 8005008:	e002      	b.n	8005010 <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	7a1b      	ldrb	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01a      	beq.n	800504e <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	7a1b      	ldrb	r3, [r3, #8]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	f248 2340 	movw	r3, #33344	@ 0x8240
 8005026:	2219      	movs	r2, #25
 8005028:	2101      	movs	r1, #1
 800502a:	f7fc fa87 	bl	800153c <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	721a      	strb	r2, [r3, #8]
 8005034:	e00b      	b.n	800504e <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d10f      	bne.n	8005074 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	7c1b      	ldrb	r3, [r3, #16]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d108      	bne.n	800506e <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	2218      	movs	r2, #24
 8005068:	2100      	movs	r1, #0
 800506a:	f7fc fa67 	bl	800153c <CO_error>
        }
        SYNC->timeoutError = 1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005074:	7ffb      	ldrb	r3, [r7, #31]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <OD_getIndex+0x14>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	e000      	b.n	80050b0 <OD_getIndex+0x16>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <OD_extension_init>:
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <OD_extension_init+0x14>
 80050cc:	2305      	movs	r3, #5
 80050ce:	e003      	b.n	80050d8 <OD_extension_init+0x1c>
    entry->extension = extension;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <OD_get_u32>:
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	460b      	mov	r3, r1
 80050f2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80050f4:	7af9      	ldrb	r1, [r7, #11]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2304      	movs	r3, #4
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7fd f89c 	bl	800223c <OD_get_value>
 8005104:	4603      	mov	r3, r0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	791b      	ldrb	r3, [r3, #4]
 8005120:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	3305      	adds	r3, #5
 8005126:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005128:	7cfb      	ldrb	r3, [r7, #19]
 800512a:	2b06      	cmp	r3, #6
 800512c:	d108      	bne.n	8005140 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2206      	movs	r2, #6
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	4618      	mov	r0, r3
 8005136:	f00d f89c 	bl	8012272 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2201      	movs	r2, #1
 800513e:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8005140:	bf00      	nop
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00c      	beq.n	8005176 <OD_write_1012+0x2e>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	7c5b      	ldrb	r3, [r3, #17]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d108      	bne.n	8005176 <OD_write_1012+0x2e>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b04      	cmp	r3, #4
 800516e:	d102      	bne.n	8005176 <OD_write_1012+0x2e>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005176:	2309      	movs	r3, #9
 8005178:	e051      	b.n	800521e <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005180:	68b8      	ldr	r0, [r7, #8]
 8005182:	f7ff ff7c 	bl	800507e <CO_getUint32>
 8005186:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005190:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <OD_write_1012+0xe0>)
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d126      	bne.n	80051ea <OD_write_1012+0xa2>
 800519c:	8afb      	ldrh	r3, [r7, #22]
 800519e:	2b7f      	cmp	r3, #127	@ 0x7f
 80051a0:	d923      	bls.n	80051ea <OD_write_1012+0xa2>
 80051a2:	8afb      	ldrh	r3, [r7, #22]
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a8:	d903      	bls.n	80051b2 <OD_write_1012+0x6a>
 80051aa:	8afb      	ldrh	r3, [r7, #22]
 80051ac:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80051b0:	d91b      	bls.n	80051ea <OD_write_1012+0xa2>
 80051b2:	8afb      	ldrh	r3, [r7, #22]
 80051b4:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80051b8:	d903      	bls.n	80051c2 <OD_write_1012+0x7a>
 80051ba:	8afb      	ldrh	r3, [r7, #22]
 80051bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80051c0:	d313      	bcc.n	80051ea <OD_write_1012+0xa2>
 80051c2:	8afb      	ldrh	r3, [r7, #22]
 80051c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80051c8:	d903      	bls.n	80051d2 <OD_write_1012+0x8a>
 80051ca:	8afb      	ldrh	r3, [r7, #22]
 80051cc:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80051d0:	d30b      	bcc.n	80051ea <OD_write_1012+0xa2>
 80051d2:	8afb      	ldrh	r3, [r7, #22]
 80051d4:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80051d8:	d303      	bcc.n	80051e2 <OD_write_1012+0x9a>
 80051da:	8afb      	ldrh	r3, [r7, #22]
 80051dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051e0:	d303      	bcc.n	80051ea <OD_write_1012+0xa2>
 80051e2:	8afb      	ldrh	r3, [r7, #22]
 80051e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051e8:	d901      	bls.n	80051ee <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 80051ea:	230f      	movs	r3, #15
 80051ec:	e017      	b.n	800521e <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	0fdb      	lsrs	r3, r3, #31
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7fc fe48 	bl	8001eac <OD_writeOriginal>
 800521c:	4603      	mov	r3, r0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	3ffff800 	.word	0x3ffff800

0800522c <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	@ 0x30
 8005230:	af04      	add	r7, sp, #16
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <CO_TIME_init+0x20>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <CO_TIME_init+0x20>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800524c:	f04f 33ff 	mov.w	r3, #4294967295
 8005250:	e061      	b.n	8005316 <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8005252:	222c      	movs	r2, #44	@ 0x2c
 8005254:	2100      	movs	r1, #0
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f00c ff24 	bl	80120a4 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 800525c:	f107 0214 	add.w	r2, r7, #20
 8005260:	2301      	movs	r3, #1
 8005262:	2100      	movs	r1, #0
 8005264:	68b8      	ldr	r0, [r7, #8]
 8005266:	f7ff ff3d 	bl	80050e4 <OD_get_u32>
 800526a:	4603      	mov	r3, r0
 800526c:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800526e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d006      	beq.n	800528a <CO_TIME_init+0x5e>
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f7ff ff0c 	bl	800509a <OD_getIndex>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800528a:	f06f 030b 	mvn.w	r3, #11
 800528e:	e042      	b.n	8005316 <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a21      	ldr	r2, [pc, #132]	@ (8005320 <CO_TIME_init+0xf4>)
 800529a:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <CO_TIME_init+0xf8>)
 80052a0:	625a      	str	r2, [r3, #36]	@ 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	331c      	adds	r3, #28
 80052a6:	4619      	mov	r1, r3
 80052a8:	68b8      	ldr	r0, [r7, #8]
 80052aa:	f7ff ff07 	bl	80050bc <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052b6:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	0fdb      	lsrs	r3, r3, #31
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf14      	ite	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	2300      	moveq	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 80052e8:	8bba      	ldrh	r2, [r7, #28]
 80052ea:	8879      	ldrh	r1, [r7, #2]
 80052ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005328 <CO_TIME_init+0xfc>)
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	2300      	movs	r3, #0
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 fa93 	bl	8006828 <CO_CANrxBufferInit>
 8005302:	4603      	mov	r3, r0
 8005304:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005306:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <CO_TIME_init+0xe8>
            return ret;
 800530e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005312:	e000      	b.n	8005316 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08001dfd 	.word	0x08001dfd
 8005324:	08005149 	.word	0x08005149
 8005328:	0800510f 	.word	0x0800510f

0800532c <CO_fifo_init>:
  #error CO_CONFIG_CRC16_ENABLE must be enabled.
 #endif
#endif

/******************************************************************************/
void CO_fifo_init(CO_fifo_t *fifo, uint8_t *buf, size_t bufSize) {
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]

    if (fifo == NULL || buf == NULL || bufSize < 2) {
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <CO_fifo_init+0x38>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00f      	beq.n	8005364 <CO_fifo_init+0x38>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d90c      	bls.n	8005364 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]

    return;
 8005362:	e000      	b.n	8005366 <CO_fifo_init+0x3a>
        return;
 8005364:	bf00      	nop
}
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <CO_fifo_write>:
 ******************************************************************************/
size_t CO_fifo_write(CO_fifo_t *fifo,
                     const uint8_t *buf,
                     size_t count,
                     uint16_t *crc)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	@ 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
    size_t i;
    uint8_t *bufDest;

    if (fifo == NULL || fifo->buf == NULL || buf == NULL) {
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <CO_fifo_write+0x22>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <CO_fifo_write+0x22>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <CO_fifo_write+0x26>
        return 0;
 8005392:	2300      	movs	r3, #0
 8005394:	e03e      	b.n	8005414 <CO_fifo_write+0xa4>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4413      	add	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e02f      	b.n	8005408 <CO_fifo_write+0x98>
        size_t writePtrNext = fifo->writePtr + 1;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	3301      	adds	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if (writePtrNext == fifo->readPtr ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d029      	beq.n	800540e <CO_fifo_write+0x9e>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
        if (writePtrNext == fifo->readPtr ||
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d103      	bne.n	80053cc <CO_fifo_write+0x5c>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <CO_fifo_write+0x9e>
            break;
        }

        *bufDest = *buf;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	701a      	strb	r2, [r3, #0]
            crc16_ccitt_single(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d106      	bne.n	80053ec <CO_fifo_write+0x7c>
            fifo->writePtr = 0;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e007      	b.n	80053fc <CO_fifo_write+0x8c>
        }
        else {
            fifo->writePtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	609a      	str	r2, [r3, #8]
            bufDest++;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	3301      	adds	r3, #1
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	3301      	adds	r3, #1
 8005400:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0; i--) {
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3b01      	subs	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1cc      	bne.n	80053a8 <CO_fifo_write+0x38>
    }

    return count - i;
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1ad3      	subs	r3, r2, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	3724      	adds	r7, #36	@ 0x24
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <CO_fifo_read>:


/******************************************************************************/
size_t CO_fifo_read(CO_fifo_t *fifo, uint8_t *buf, size_t count, bool_t *eof) {
 8005420:	b480      	push	{r7}
 8005422:	b089      	sub	sp, #36	@ 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
    size_t i;
    const uint8_t *bufSrc;

    if (eof != NULL) {
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <CO_fifo_read+0x1a>
        *eof = false;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    }
    if (fifo == NULL || buf == NULL || fifo->readPtr == fifo->writePtr) {
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <CO_fifo_read+0x32>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <CO_fifo_read+0x32>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d101      	bne.n	8005456 <CO_fifo_read+0x36>
        return 0;
 8005452:	2300      	movs	r3, #0
 8005454:	e036      	b.n	80054c4 <CO_fifo_read+0xa4>
    }

    bufSrc = &fifo->buf[fifo->readPtr];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	4413      	add	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; ) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	e025      	b.n	80054b4 <CO_fifo_read+0x94>
        const uint8_t c = *bufSrc;
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	75fb      	strb	r3, [r7, #23]

        /* is circular buffer empty */
        if (fifo->readPtr == fifo->writePtr) {
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	d020      	beq.n	80054bc <CO_fifo_read+0x9c>
            break;
        }

        *(buf++) = c;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	60ba      	str	r2, [r7, #8]
 8005480:	7dfa      	ldrb	r2, [r7, #23]
 8005482:	701a      	strb	r2, [r3, #0]

        /* increment variables */
        if (++fifo->readPtr == fifo->bufSize) {
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d106      	bne.n	80054a8 <CO_fifo_read+0x88>
            fifo->readPtr = 0;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	60da      	str	r2, [r3, #12]
            bufSrc = &fifo->buf[0];
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	e002      	b.n	80054ae <CO_fifo_read+0x8e>
        }
        else {
            bufSrc++;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
        }
        i--;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
    for (i = count; i > 0; ) {
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1d6      	bne.n	8005468 <CO_fifo_read+0x48>
 80054ba:	e000      	b.n	80054be <CO_fifo_read+0x9e>
            break;
 80054bc:	bf00      	nop
            break;
        }
#endif
    }

    return count - i;
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	1ad3      	subs	r3, r2, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3724      	adds	r7, #36	@ 0x24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80054d8:	2300      	movs	r3, #0
 80054da:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
 80054e6:	e006      	b.n	80054f6 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 80054e8:	220c      	movs	r2, #12
 80054ea:	2100      	movs	r1, #0
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f00c fdd9 	bl	80120a4 <memset>

    return ret;
 80054f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b090      	sub	sp, #64	@ 0x40
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	791b      	ldrb	r3, [r3, #4]
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8005516:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800551a:	2b08      	cmp	r3, #8
 800551c:	f040 814c 	bne.w	80057b8 <CO_LSSslave_receive+0x2b8>
 8005520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 8147 	bne.w	80057b8 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 800552a:	2300      	movs	r3, #0
 800552c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	3305      	adds	r3, #5
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8005534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 800553c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005540:	2b04      	cmp	r3, #4
 8005542:	d12c      	bne.n	800559e <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 800554a:	7ffb      	ldrb	r3, [r7, #31]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <CO_LSSslave_receive+0x56>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d020      	beq.n	8005596 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8005554:	e12a      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005558:	7c1b      	ldrb	r3, [r3, #16]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d110      	bne.n	8005580 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800555e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005560:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005564:	2bff      	cmp	r3, #255	@ 0xff
 8005566:	d10b      	bne.n	8005580 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8005568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800556e:	2bff      	cmp	r3, #255	@ 0xff
 8005570:	d006      	beq.n	8005580 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 8005572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005574:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005578:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 800557c:	2301      	movs	r3, #1
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005582:	2200      	movs	r2, #0
 8005584:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 8005586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005588:	3314      	adds	r3, #20
 800558a:	2210      	movs	r2, #16
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f00c fd88 	bl	80120a4 <memset>
                    break;
 8005594:	e10a      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	2201      	movs	r2, #1
 800559a:	741a      	strb	r2, [r3, #16]
                    break;
 800559c:	e106      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	7c1b      	ldrb	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 80ee 	bne.w	8005784 <CO_LSSslave_receive+0x284>
            switch (cs) {
 80055a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055ac:	3b40      	subs	r3, #64	@ 0x40
 80055ae:	2b11      	cmp	r3, #17
 80055b0:	f200 80f7 	bhi.w	80057a2 <CO_LSSslave_receive+0x2a2>
 80055b4:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <CO_LSSslave_receive+0xbc>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	08005605 	.word	0x08005605
 80055c0:	08005615 	.word	0x08005615
 80055c4:	08005625 	.word	0x08005625
 80055c8:	08005635 	.word	0x08005635
 80055cc:	080057a3 	.word	0x080057a3
 80055d0:	080057a3 	.word	0x080057a3
 80055d4:	080057a3 	.word	0x080057a3
 80055d8:	080057a3 	.word	0x080057a3
 80055dc:	080057a3 	.word	0x080057a3
 80055e0:	080057a3 	.word	0x080057a3
 80055e4:	080057a3 	.word	0x080057a3
 80055e8:	080057a3 	.word	0x080057a3
 80055ec:	080057a3 	.word	0x080057a3
 80055f0:	080057a3 	.word	0x080057a3
 80055f4:	080057a3 	.word	0x080057a3
 80055f8:	080057a3 	.word	0x080057a3
 80055fc:	080057a3 	.word	0x080057a3
 8005600:	08005691 	.word	0x08005691
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005606:	3301      	adds	r3, #1
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005610:	615a      	str	r2, [r3, #20]
                break;
 8005612:	e0cb      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005616:	3301      	adds	r3, #1
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005620:	619a      	str	r2, [r3, #24]
                break;
 8005622:	e0c3      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005626:	3301      	adds	r3, #1
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005630:	61da      	str	r2, [r3, #28]
                break;
 8005632:	e0bb      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005636:	3301      	adds	r3, #1
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	429a      	cmp	r2, r3
 800564c:	f040 80ab 	bne.w	80057a6 <CO_LSSslave_receive+0x2a6>
 8005650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	429a      	cmp	r2, r3
 800565a:	f040 80a4 	bne.w	80057a6 <CO_LSSslave_receive+0x2a6>
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	429a      	cmp	r2, r3
 8005668:	f040 809d 	bne.w	80057a6 <CO_LSSslave_receive+0x2a6>
 800566c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	429a      	cmp	r2, r3
 8005676:	f040 8096 	bne.w	80057a6 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800567a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567c:	2201      	movs	r2, #1
 800567e:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8005680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005682:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005686:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                    request_LSSslave_process = true;
 800568a:	2301      	movs	r3, #1
 800568c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                break;
 800568e:	e08a      	b.n	80057a6 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2bff      	cmp	r3, #255	@ 0xff
 8005698:	f040 8087 	bne.w	80057aa <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 800569c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80056a2:	2bff      	cmp	r3, #255	@ 0xff
 80056a4:	f040 8081 	bne.w	80057aa <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	795b      	ldrb	r3, [r3, #5]
 80056ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                    uint8_t lssSub = data[6];
 80056b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b2:	799b      	ldrb	r3, [r3, #6]
 80056b4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    uint8_t lssNext = data[7];
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ba:	79db      	ldrb	r3, [r3, #7]
 80056bc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 80056c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056c4:	2b1f      	cmp	r3, #31
 80056c6:	d903      	bls.n	80056d0 <CO_LSSslave_receive+0x1d0>
 80056c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056cc:	2b80      	cmp	r3, #128	@ 0x80
 80056ce:	d16d      	bne.n	80057ac <CO_LSSslave_receive+0x2ac>
 80056d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d869      	bhi.n	80057ac <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 80056d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d865      	bhi.n	80057ac <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 80056e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e2:	3301      	adds	r3, #1
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
                    ack = false;
 80056ec:	2300      	movs	r3, #0
 80056ee:	63bb      	str	r3, [r7, #56]	@ 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 80056f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056f4:	2b80      	cmp	r3, #128	@ 0x80
 80056f6:	d10d      	bne.n	8005714 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 80056f8:	2301      	movs	r3, #1
 80056fa:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8005704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005706:	3324      	adds	r3, #36	@ 0x24
 8005708:	2210      	movs	r2, #16
 800570a:	2100      	movs	r1, #0
 800570c:	4618      	mov	r0, r3
 800570e:	f00c fcc9 	bl	80120a4 <memset>
 8005712:	e02c      	b.n	800576e <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800571a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800571e:	429a      	cmp	r2, r3
 8005720:	d125      	bne.n	800576e <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8005722:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005730:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	405a      	eors	r2, r3
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005742:	2b00      	cmp	r3, #0
 8005744:	d113      	bne.n	800576e <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8005746:	2301      	movs	r3, #1
 8005748:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = lssNext;
 800574a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8005754:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005758:	2b00      	cmp	r3, #0
 800575a:	d108      	bne.n	800576e <CO_LSSslave_receive+0x26e>
 800575c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005760:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005764:	429a      	cmp	r2, r3
 8005766:	d202      	bcs.n	800576e <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576a:	2201      	movs	r2, #1
 800576c:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01a      	beq.n	80057aa <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8005774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005776:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800577a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 800577e:	2301      	movs	r3, #1
 8005780:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                    }
                }
                break;
 8005782:	e012      	b.n	80057aa <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	3349      	adds	r3, #73	@ 0x49
 8005788:	2208      	movs	r2, #8
 800578a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800578c:	4618      	mov	r0, r3
 800578e:	f00c fd70 	bl	8012272 <memcpy>
            LSSslave->service = cs;
 8005792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005794:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005798:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 800579c:	2301      	movs	r3, #1
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a0:	e004      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
                break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
                break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <CO_LSSslave_receive+0x2ac>
                break;
 80057aa:	bf00      	nop
        }

        if (request_LSSslave_process) {
 80057ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	2201      	movs	r2, #1
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 80057b8:	bf00      	nop
 80057ba:	3740      	adds	r7, #64	@ 0x40
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	@ 0x28
 80057c4:	af04      	add	r7, sp, #16
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d018      	beq.n	800580a <CO_LSSslave_init+0x4a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <CO_LSSslave_init+0x4a>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <CO_LSSslave_init+0x4a>
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00f      	beq.n	800580a <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 80057ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b25b      	sxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da06      	bge.n	8005810 <CO_LSSslave_init+0x50>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2bff      	cmp	r3, #255	@ 0xff
 8005808:	d002      	beq.n	8005810 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	e046      	b.n	800589e <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005810:	2274      	movs	r2, #116	@ 0x74
 8005812:	2100      	movs	r1, #0
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f00c fc45 	bl	80120a4 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2210      	movs	r2, #16
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f00c fd26 	bl	8012272 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781a      	ldrb	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8005850:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005852:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005854:	4b14      	ldr	r3, [pc, #80]	@ (80058a8 <CO_LSSslave_init+0xe8>)
 8005856:	9302      	str	r3, [sp, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	2300      	movs	r3, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005864:	6a38      	ldr	r0, [r7, #32]
 8005866:	f000 ffdf 	bl	8006828 <CO_CANrxBufferInit>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005872:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8005874:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005876:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8005878:	2300      	movs	r3, #0
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	2308      	movs	r3, #8
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005884:	f001 f82c 	bl	80068e0 <CO_CANtxBufferInit>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	671a      	str	r2, [r3, #112]	@ 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005896:	23ff      	movs	r3, #255	@ 0xff
 8005898:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800589a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	08005501 	.word	0x08005501

080058ac <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <CO_NMT_getInternalState+0x16>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f993 3000 	ldrsb.w	r3, [r3]
 80058c0:	e000      	b.n	80058c4 <CO_NMT_getInternalState+0x18>
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80058e6:	2144      	movs	r1, #68	@ 0x44
 80058e8:	2001      	movs	r0, #1
 80058ea:	f00b ff79 	bl	80117e0 <calloc>
 80058ee:	4603      	mov	r3, r0
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8112 	beq.w	8005b1e <CO_new+0x24e>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	3344      	adds	r3, #68	@ 0x44
 80058fe:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8005900:	2134      	movs	r1, #52	@ 0x34
 8005902:	2001      	movs	r0, #1
 8005904:	f00b ff6c 	bl	80117e0 <calloc>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	611a      	str	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8102 	beq.w	8005b1e <CO_new+0x24e>
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	3334      	adds	r3, #52	@ 0x34
 800591e:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8005920:	2308      	movs	r3, #8
 8005922:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8005924:	2130      	movs	r1, #48	@ 0x30
 8005926:	2001      	movs	r0, #1
 8005928:	f00b ff5a 	bl	80117e0 <calloc>
 800592c:	4603      	mov	r3, r0
 800592e:	461a      	mov	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	615a      	str	r2, [r3, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80f0 	beq.w	8005b1e <CO_new+0x24e>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3330      	adds	r3, #48	@ 0x30
 8005942:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8005944:	7afb      	ldrb	r3, [r7, #11]
 8005946:	2110      	movs	r1, #16
 8005948:	4618      	mov	r0, r3
 800594a:	f00b ff49 	bl	80117e0 <calloc>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	619a      	str	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80df 	beq.w	8005b1e <CO_new+0x24e>
 8005960:	7afb      	ldrb	r3, [r7, #11]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 800596a:	2150      	movs	r1, #80	@ 0x50
 800596c:	2001      	movs	r0, #1
 800596e:	f00b ff37 	bl	80117e0 <calloc>
 8005972:	4603      	mov	r3, r0
 8005974:	461a      	mov	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	61da      	str	r2, [r3, #28]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80cd 	beq.w	8005b1e <CO_new+0x24e>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	3350      	adds	r3, #80	@ 0x50
 8005988:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 800598a:	2311      	movs	r3, #17
 800598c:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 800598e:	7abb      	ldrb	r3, [r7, #10]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d912      	bls.n	80059ba <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005994:	7abb      	ldrb	r3, [r7, #10]
 8005996:	2108      	movs	r1, #8
 8005998:	4618      	mov	r0, r3
 800599a:	f00b ff21 	bl	80117e0 <calloc>
 800599e:	4603      	mov	r3, r0
 80059a0:	461a      	mov	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	621a      	str	r2, [r3, #32]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80b7 	beq.w	8005b1e <CO_new+0x24e>
 80059b0:	7abb      	ldrb	r3, [r7, #10]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4413      	add	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80059ba:	21a8      	movs	r1, #168	@ 0xa8
 80059bc:	2001      	movs	r0, #1
 80059be:	f00b ff0f 	bl	80117e0 <calloc>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80a5 	beq.w	8005b1e <CO_new+0x24e>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	33a8      	adds	r3, #168	@ 0xa8
 80059d8:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 80059da:	2178      	movs	r1, #120	@ 0x78
 80059dc:	2001      	movs	r0, #1
 80059de:	f00b feff 	bl	80117e0 <calloc>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8095 	beq.w	8005b1e <CO_new+0x24e>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3378      	adds	r3, #120	@ 0x78
 80059f8:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80059fa:	212c      	movs	r1, #44	@ 0x2c
 80059fc:	2001      	movs	r0, #1
 80059fe:	f00b feef 	bl	80117e0 <calloc>
 8005a02:	4603      	mov	r3, r0
 8005a04:	461a      	mov	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8085 	beq.w	8005b1e <CO_new+0x24e>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	332c      	adds	r3, #44	@ 0x2c
 8005a18:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8005a1a:	2160      	movs	r1, #96	@ 0x60
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	f00b fedf 	bl	80117e0 <calloc>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d075      	beq.n	8005b1e <CO_new+0x24e>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	3360      	adds	r3, #96	@ 0x60
 8005a36:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8005a38:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8005a3c:	2004      	movs	r0, #4
 8005a3e:	f00b fecf 	bl	80117e0 <calloc>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d065      	beq.n	8005b1e <CO_new+0x24e>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8005a58:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8005a5a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8005a5e:	2004      	movs	r0, #4
 8005a60:	f00b febe 	bl	80117e0 <calloc>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d054      	beq.n	8005b1e <CO_new+0x24e>
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8005a7a:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8005a7c:	210c      	movs	r1, #12
 8005a7e:	2001      	movs	r0, #1
 8005a80:	f00b feae 	bl	80117e0 <calloc>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d044      	beq.n	8005b1e <CO_new+0x24e>
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	330c      	adds	r3, #12
 8005a98:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8005a9a:	2174      	movs	r1, #116	@ 0x74
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f00b fe9f 	bl	80117e0 <calloc>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d035      	beq.n	8005b1e <CO_new+0x24e>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3374      	adds	r3, #116	@ 0x74
 8005ab6:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8005ab8:	2138      	movs	r1, #56	@ 0x38
 8005aba:	2001      	movs	r0, #1
 8005abc:	f00b fe90 	bl	80117e0 <calloc>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d026      	beq.n	8005b1e <CO_new+0x24e>
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	3338      	adds	r3, #56	@ 0x38
 8005ad4:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8005ad6:	210c      	movs	r1, #12
 8005ad8:	2012      	movs	r0, #18
 8005ada:	f00b fe81 	bl	80117e0 <calloc>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	609a      	str	r2, [r3, #8]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d017      	beq.n	8005b1e <CO_new+0x24e>
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	33d8      	adds	r3, #216	@ 0xd8
 8005af2:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8005af4:	2118      	movs	r1, #24
 8005af6:	200b      	movs	r0, #11
 8005af8:	f00b fe72 	bl	80117e0 <calloc>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <CO_new+0x24e>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005b12:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <CO_new+0x25a>
        CO_delete(co);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f80b 	bl	8005b40 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <CO_new+0x266>
        *heapMemoryUsed = mem;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8005b36:	697b      	ldr	r3, [r7, #20]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <CO_delete>:

void CO_delete(CO_t *co) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d058      	beq.n	8005c00 <CO_delete+0xc0>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fe52 	bl	80067fc <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f00b fe63 	bl	8011828 <free>
    CO_free(co->CANrx);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f00b fe5e 	bl	8011828 <free>
    CO_free(co->CANmodule);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f00b fe59 	bl	8011828 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f00b fe54 	bl	8011828 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b84:	4618      	mov	r0, r3
 8005b86:	f00b fe4f 	bl	8011828 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f00b fe4a 	bl	8011828 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f00b fe45 	bl	8011828 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f00b fe40 	bl	8011828 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	4618      	mov	r0, r3
 8005bae:	f00b fe3b 	bl	8011828 <free>
#endif

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f00b fe36 	bl	8011828 <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f00b fe31 	bl	8011828 <free>

    /* Emergency */
    CO_free(co->em);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f00b fe2c 	bl	8011828 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f00b fe27 	bl	8011828 <free>
#if (CO_CONFIG_NODE_GUARDING) & CO_CONFIG_NODE_GUARDING_MASTER_ENABLE
    CO_free(co->NGmaster);
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f00b fe22 	bl	8011828 <free>
    CO_free(co->HBcons);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f00b fe1d 	bl	8011828 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f00b fe18 	bl	8011828 <free>

    /* CANopen object */
    CO_free(co);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f00b fe15 	bl	8011828 <free>
 8005bfe:	e000      	b.n	8005c02 <CO_delete+0xc2>
        return;
 8005c00:	bf00      	nop
}
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af04      	add	r7, sp, #16
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <CO_CANinit+0x1a>
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	e01a      	b.n	8005c58 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8005c2a:	68b8      	ldr	r0, [r7, #8]
 8005c2c:	f000 fd14 	bl	8006658 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6858      	ldr	r0, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6899      	ldr	r1, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	9202      	str	r2, [sp, #8]
 8005c40:	220b      	movs	r2, #11
 8005c42:	9201      	str	r2, [sp, #4]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2312      	movs	r3, #18
 8005c48:	460a      	mov	r2, r1
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	f000 fd2c 	bl	80066a8 <CO_CANmodule_init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8005c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	@ 0x30
 8005c64:	af06      	add	r7, sp, #24
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	e01a      	b.n	8005cb0 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	6852      	ldr	r2, [r2, #4]
 8005c86:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 8005c8a:	9105      	str	r1, [sp, #20]
 8005c8c:	210a      	movs	r1, #10
 8005c8e:	9104      	str	r1, [sp, #16]
 8005c90:	9203      	str	r2, [sp, #12]
 8005c92:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 8005c96:	9202      	str	r2, [sp, #8]
 8005c98:	2211      	movs	r2, #17
 8005c9a:	9201      	str	r2, [sp, #4]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	f7ff fd8c 	bl	80057c0 <CO_LSSslave_init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8005cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8005cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cba:	b095      	sub	sp, #84	@ 0x54
 8005cbc:	af0c      	add	r7, sp, #48	@ 0x30
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	e17f      	b.n	8005fd2 <CO_CANopenInit+0x31a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <CO_CANopenInit+0x26>
        em = co->em;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8005ce4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005ce8:	2bff      	cmp	r3, #255	@ 0xff
 8005cea:	d103      	bne.n	8005cf4 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e00a      	b.n	8005d0a <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8005cf4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <CO_CANopenInit+0x4c>
 8005cfc:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	da02      	bge.n	8005d0a <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	e163      	b.n	8005fd2 <CO_CANopenInit+0x31a>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fbde 	bl	80054d0 <CO_LEDs_init>
 8005d14:	4603      	mov	r3, r0
 8005d16:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 8005d18:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <CO_CANopenInit+0x6e>
 8005d20:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005d24:	e155      	b.n	8005fd2 <CO_CANopenInit+0x31a>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8005d2e:	f06f 0312 	mvn.w	r3, #18
 8005d32:	e14e      	b.n	8005fd2 <CO_CANopenInit+0x31a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	69d8      	ldr	r0, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8005d3c:	4ba3      	ldr	r3, [pc, #652]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8005d4a:	4ba0      	ldr	r3, [pc, #640]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8005d50:	336c      	adds	r3, #108	@ 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8005d52:	4a9e      	ldr	r2, [pc, #632]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8005d58:	3218      	adds	r2, #24
 8005d5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d5c:	9105      	str	r1, [sp, #20]
 8005d5e:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8005d62:	9104      	str	r1, [sp, #16]
 8005d64:	9203      	str	r2, [sp, #12]
 8005d66:	2202      	movs	r2, #2
 8005d68:	9202      	str	r2, [sp, #8]
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	2311      	movs	r3, #17
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	4633      	mov	r3, r6
 8005d72:	462a      	mov	r2, r5
 8005d74:	4621      	mov	r1, r4
 8005d76:	f7fb fb01 	bl	800137c <CO_EM_init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8005d7e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <CO_CANopenInit+0xd4>
 8005d86:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005d8a:	e122      	b.n	8005fd2 <CO_CANopenInit+0x31a>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691d      	ldr	r5, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8005d90:	4b8e      	ldr	r3, [pc, #568]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8005d96:	f103 0690 	add.w	r6, r3, #144	@ 0x90
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	6852      	ldr	r2, [r2, #4]
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	6849      	ldr	r1, [r1, #4]
 8005da6:	f897 0050 	ldrb.w	r0, [r7, #80]	@ 0x50
 8005daa:	b280      	uxth	r0, r0
 8005dac:	f500 60e0 	add.w	r0, r0, #1792	@ 0x700
 8005db0:	b280      	uxth	r0, r0
 8005db2:	f897 c050 	ldrb.w	ip, [r7, #80]	@ 0x50
 8005db6:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8005db8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005dba:	900a      	str	r0, [sp, #40]	@ 0x28
 8005dbc:	2009      	movs	r0, #9
 8005dbe:	9009      	str	r0, [sp, #36]	@ 0x24
 8005dc0:	9108      	str	r1, [sp, #32]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	9107      	str	r1, [sp, #28]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	9106      	str	r1, [sp, #24]
 8005dca:	9205      	str	r2, [sp, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	9204      	str	r2, [sp, #16]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	9203      	str	r2, [sp, #12]
 8005dd4:	9302      	str	r3, [sp, #8]
 8005dd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4663      	mov	r3, ip
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7fb fefc 	bl	8001be4 <CO_NMT_init>
 8005dec:	4603      	mov	r3, r0
 8005dee:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 8005df0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <CO_CANopenInit+0x146>
 8005df8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005dfc:	e0e9      	b.n	8005fd2 <CO_CANopenInit+0x31a>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6958      	ldr	r0, [r3, #20]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8005e06:	4b71      	ldr	r3, [pc, #452]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 8005e0c:	3384      	adds	r3, #132	@ 0x84
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	6852      	ldr	r2, [r2, #4]
 8005e12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e14:	9103      	str	r1, [sp, #12]
 8005e16:	2109      	movs	r1, #9
 8005e18:	9102      	str	r1, [sp, #8]
 8005e1a:	9201      	str	r2, [sp, #4]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	2308      	movs	r3, #8
 8005e20:	4622      	mov	r2, r4
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	f7fb fcf4 	bl	8001810 <CO_HBconsumer_init>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8005e2c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <CO_CANopenInit+0x182>
 8005e34:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005e38:	e0cb      	b.n	8005fd2 <CO_CANopenInit+0x31a>
    if (err) return err;
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8005e3a:	4b64      	ldr	r3, [pc, #400]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	33b4      	adds	r3, #180	@ 0xb4
 8005e42:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005e44:	2300      	movs	r3, #0
 8005e46:	837b      	strh	r3, [r7, #26]
 8005e48:	e034      	b.n	8005eb4 <CO_CANopenInit+0x1fc>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005e52:	21a8      	movs	r1, #168	@ 0xa8
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	18d6      	adds	r6, r2, r3
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	f102 030c 	add.w	r3, r2, #12
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	8b79      	ldrh	r1, [r7, #26]
 8005e68:	3107      	adds	r1, #7
 8005e6a:	b289      	uxth	r1, r1
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	6840      	ldr	r0, [r0, #4]
 8005e70:	8b7c      	ldrh	r4, [r7, #26]
 8005e72:	3407      	adds	r4, #7
 8005e74:	b2a4      	uxth	r4, r4
 8005e76:	f897 c050 	ldrb.w	ip, [r7, #80]	@ 0x50
 8005e7a:	6d7d      	ldr	r5, [r7, #84]	@ 0x54
 8005e7c:	9505      	str	r5, [sp, #20]
 8005e7e:	9404      	str	r4, [sp, #16]
 8005e80:	9003      	str	r0, [sp, #12]
 8005e82:	9102      	str	r1, [sp, #8]
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4663      	mov	r3, ip
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7fe fbf5 	bl	8004680 <CO_SDOserver_init>
 8005e96:	4603      	mov	r3, r0
 8005e98:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8005e9a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <CO_CANopenInit+0x1f0>
 8005ea2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ea6:	e094      	b.n	8005fd2 <CO_CANopenInit+0x31a>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005ea8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	837b      	strh	r3, [r7, #26]
 8005eb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	ddc6      	ble.n	8005e4a <CO_CANopenInit+0x192>
        }
    }

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    if (CO_GET_CNT(SDO_CLI) > 0) {
        OD_entry_t *SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 8005ebc:	4b43      	ldr	r3, [pc, #268]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	33c0      	adds	r3, #192	@ 0xc0
 8005ec4:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	827b      	strh	r3, [r7, #18]
 8005eca:	e032      	b.n	8005f32 <CO_CANopenInit+0x27a>
            err = CO_SDOclient_init(&co->SDOclient[i],
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005ed0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	18ce      	adds	r6, r1, r3
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	f102 030c 	add.w	r3, r2, #12
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	8a79      	ldrh	r1, [r7, #18]
 8005eec:	3108      	adds	r1, #8
 8005eee:	b289      	uxth	r1, r1
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	6840      	ldr	r0, [r0, #4]
 8005ef4:	8a7c      	ldrh	r4, [r7, #18]
 8005ef6:	3408      	adds	r4, #8
 8005ef8:	b2a4      	uxth	r4, r4
 8005efa:	f897 c050 	ldrb.w	ip, [r7, #80]	@ 0x50
 8005efe:	6d7d      	ldr	r5, [r7, #84]	@ 0x54
 8005f00:	9504      	str	r5, [sp, #16]
 8005f02:	9403      	str	r4, [sp, #12]
 8005f04:	9002      	str	r0, [sp, #8]
 8005f06:	9101      	str	r1, [sp, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	4663      	mov	r3, ip
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7fd fe6e 	bl	8003bf0 <CO_SDOclient_init>
 8005f14:	4603      	mov	r3, r0
 8005f16:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
            if (err) return err;
 8005f18:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <CO_CANopenInit+0x26e>
 8005f20:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f24:	e055      	b.n	8005fd2 <CO_CANopenInit+0x31a>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 8005f26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	827b      	strh	r3, [r7, #18]
 8005f32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	ddc8      	ble.n	8005ecc <CO_CANopenInit+0x214>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8005f3e:	4b23      	ldr	r3, [pc, #140]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8005f44:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2302      	movs	r3, #2
 8005f52:	f7ff f96b 	bl	800522c <CO_TIME_init>
 8005f56:	4603      	mov	r3, r0
 8005f58:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 8005f5a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <CO_CANopenInit+0x2b0>
 8005f62:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005f66:	e034      	b.n	8005fd2 <CO_CANopenInit+0x31a>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8005f6c:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8005f72:	f103 0624 	add.w	r6, r3, #36	@ 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005f76:	4b15      	ldr	r3, [pc, #84]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8005f7c:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8005f80:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8005f86:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8005f88:	4a10      	ldr	r2, [pc, #64]	@ (8005fcc <CO_CANopenInit+0x314>)
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 8005f8e:	32a8      	adds	r2, #168	@ 0xa8
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	6849      	ldr	r1, [r1, #4]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	6840      	ldr	r0, [r0, #4]
 8005f98:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8005f9a:	9406      	str	r4, [sp, #24]
 8005f9c:	2401      	movs	r4, #1
 8005f9e:	9405      	str	r4, [sp, #20]
 8005fa0:	9004      	str	r0, [sp, #16]
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	9003      	str	r0, [sp, #12]
 8005fa6:	9102      	str	r1, [sp, #8]
 8005fa8:	9201      	str	r2, [sp, #4]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	4663      	mov	r3, ip
 8005fae:	4632      	mov	r2, r6
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f7fe fe82 	bl	8004cbc <CO_SYNC_init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8005fbc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <CO_CANopenInit+0x318>
 8005fc4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005fc8:	e003      	b.n	8005fd2 <CO_CANopenInit+0x31a>
 8005fca:	bf00      	nop
 8005fcc:	240003cc 	.word	0x240003cc
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3724      	adds	r7, #36	@ 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fda:	bf00      	nop

08005fdc <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	b093      	sub	sp, #76	@ 0x4c
 8005fe0:	af06      	add	r7, sp, #24
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff4:	e0c3      	b.n	800617e <CO_CANopenInitPDO+0x1a2>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <CO_CANopenInitPDO+0x30>
 8005ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006000:	2b00      	cmp	r3, #0
 8006002:	db03      	blt.n	800600c <CO_CANopenInitPDO+0x30>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <CO_CANopenInitPDO+0x3e>
 8006014:	f06f 0312 	mvn.w	r3, #18
 8006018:	e0b1      	b.n	800617e <CO_CANopenInitPDO+0x1a2>
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	e0ae      	b.n	800617e <CO_CANopenInitPDO+0x1a2>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8006020:	4b59      	ldr	r3, [pc, #356]	@ (8006188 <CO_CANopenInitPDO+0x1ac>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	33cc      	adds	r3, #204	@ 0xcc
 8006028:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 800602a:	4b57      	ldr	r3, [pc, #348]	@ (8006188 <CO_CANopenInitPDO+0x1ac>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	33fc      	adds	r3, #252	@ 0xfc
 8006032:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006034:	2300      	movs	r3, #0
 8006036:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006038:	e044      	b.n	80060c4 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 800603e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006042:	2b03      	cmp	r3, #3
 8006044:	dc09      	bgt.n	800605a <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8006046:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800604a:	3302      	adds	r3, #2
 800604c:	b29b      	uxth	r3, r3
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	b29a      	uxth	r2, r3
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	b29b      	uxth	r3, r3
 8006056:	4413      	add	r3, r2
 8006058:	84bb      	strh	r3, [r7, #36]	@ 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800605e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006062:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8006066:	fb01 f303 	mul.w	r3, r1, r3
 800606a:	18d5      	adds	r5, r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8006070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006072:	f103 020c 	add.w	r2, r3, #12
 8006076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800607a:	f102 010c 	add.w	r1, r2, #12
 800607e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006080:	68f9      	ldr	r1, [r7, #12]
 8006082:	6849      	ldr	r1, [r1, #4]
 8006084:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8006086:	3003      	adds	r0, #3
 8006088:	b280      	uxth	r0, r0
 800608a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800608c:	9405      	str	r4, [sp, #20]
 800608e:	9004      	str	r0, [sp, #16]
 8006090:	9103      	str	r1, [sp, #12]
 8006092:	9202      	str	r2, [sp, #8]
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4633      	mov	r3, r6
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7fc fe25 	bl	8002cf0 <CO_RPDO_init>
 80060a6:	4603      	mov	r3, r0
 80060a8:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 80060aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <CO_CANopenInitPDO+0xdc>
 80060b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80060b6:	e062      	b.n	800617e <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80060b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80060c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	ddb6      	ble.n	800603a <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80060cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006188 <CO_CANopenInitPDO+0x1ac>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80060d6:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80060d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <CO_CANopenInitPDO+0x1ac>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80060e2:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80060e4:	2300      	movs	r3, #0
 80060e6:	837b      	strh	r3, [r7, #26]
 80060e8:	e044      	b.n	8006174 <CO_CANopenInitPDO+0x198>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 80060ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	dc09      	bgt.n	800610a <CO_CANopenInitPDO+0x12e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 80060f6:	8b7b      	ldrh	r3, [r7, #26]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4413      	add	r3, r2
 8006102:	b29b      	uxth	r3, r3
 8006104:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006108:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800610e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006112:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	18d5      	adds	r5, r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	f103 020c 	add.w	r2, r3, #12
 8006126:	623a      	str	r2, [r7, #32]
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	f102 010c 	add.w	r1, r2, #12
 800612e:	61f9      	str	r1, [r7, #28]
 8006130:	68f9      	ldr	r1, [r7, #12]
 8006132:	6849      	ldr	r1, [r1, #4]
 8006134:	8b78      	ldrh	r0, [r7, #26]
 8006136:	3003      	adds	r0, #3
 8006138:	b280      	uxth	r0, r0
 800613a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800613c:	9405      	str	r4, [sp, #20]
 800613e:	9004      	str	r0, [sp, #16]
 8006140:	9103      	str	r1, [sp, #12]
 8006142:	9202      	str	r2, [sp, #8]
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	8b3b      	ldrh	r3, [r7, #24]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	4633      	mov	r3, r6
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4628      	mov	r0, r5
 8006152:	f7fd f999 	bl	8003488 <CO_TPDO_init>
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 800615a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <CO_CANopenInitPDO+0x18c>
 8006162:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006166:	e00a      	b.n	800617e <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006168:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800616c:	b29b      	uxth	r3, r3
 800616e:	3301      	adds	r3, #1
 8006170:	b29b      	uxth	r3, r3
 8006172:	837b      	strh	r3, [r7, #26]
 8006174:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006178:	2b03      	cmp	r3, #3
 800617a:	ddb6      	ble.n	80060ea <CO_CANopenInitPDO+0x10e>
        }
    }
#endif

    return CO_ERROR_NO;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3734      	adds	r7, #52	@ 0x34
 8006182:	46bd      	mov	sp, r7
 8006184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006186:	bf00      	nop
 8006188:	240003cc 	.word	0x240003cc

0800618c <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8006198:	2300      	movs	r3, #0
 800619a:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d12e      	bne.n	8006202 <CO_process_SYNC+0x76>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fb7f 	bl	80058ac <CO_NMT_getInternalState>
 80061ae:	4603      	mov	r3, r0
 80061b0:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 80061b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80061b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061b8:	d003      	beq.n	80061c2 <CO_process_SYNC+0x36>
 80061ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80061be:	2b05      	cmp	r3, #5
 80061c0:	d101      	bne.n	80061c6 <CO_process_SYNC+0x3a>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <CO_process_SYNC+0x3c>
 80061c6:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80061c8:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	6979      	ldr	r1, [r7, #20]
 80061d4:	f7fe fe9a 	bl	8004f0c <CO_SYNC_process>
 80061d8:	4603      	mov	r3, r0
 80061da:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 80061dc:	7cfb      	ldrb	r3, [r7, #19]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d008      	beq.n	80061f4 <CO_process_SYNC+0x68>
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	dc0d      	bgt.n	8006202 <CO_process_SYNC+0x76>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <CO_process_SYNC+0x74>
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d109      	bne.n	8006202 <CO_process_SYNC+0x76>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 80061ee:	2301      	movs	r3, #1
 80061f0:	61fb      	str	r3, [r7, #28]
                break;
 80061f2:	e006      	b.n	8006202 <CO_process_SYNC+0x76>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fc7a 	bl	8006af2 <CO_CANclearPendingSyncPDOs>
                break;
 80061fe:	e000      	b.n	8006202 <CO_process_SYNC+0x76>
                break;
 8006200:	bf00      	nop
        }
    }

    return syncWas;
 8006202:	69fb      	ldr	r3, [r7, #28]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d129      	bne.n	8006276 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fb40 	bl	80058ac <CO_NMT_getInternalState>
 800622c:	4603      	mov	r3, r0
 800622e:	2b05      	cmp	r3, #5
 8006230:	bf0c      	ite	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	2300      	movne	r3, #0
 8006236:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8006238:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800623a:	2300      	movs	r3, #0
 800623c:	82fb      	strh	r3, [r7, #22]
 800623e:	e015      	b.n	800626c <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006248:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	18d0      	adds	r0, r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	f7fc fe8e 	bl	8002f7c <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006260:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006264:	b29b      	uxth	r3, r3
 8006266:	3301      	adds	r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	82fb      	strh	r3, [r7, #22]
 800626c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006270:	2b03      	cmp	r3, #3
 8006272:	dde5      	ble.n	8006240 <CO_process_RPDO+0x34>
 8006274:	e000      	b.n	8006278 <CO_process_RPDO+0x6c>
        return;
 8006276:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af02      	add	r7, sp, #8
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d129      	bne.n	80062e8 <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fb07 	bl	80058ac <CO_NMT_getInternalState>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 80062aa:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80062ac:	2300      	movs	r3, #0
 80062ae:	82fb      	strh	r3, [r7, #22]
 80062b0:	e015      	b.n	80062de <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062ba:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	18d0      	adds	r0, r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	f7fd faf7 	bl	80038c0 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80062d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3301      	adds	r3, #1
 80062da:	b29b      	uxth	r3, r3
 80062dc:	82fb      	strh	r3, [r7, #22]
 80062de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	dde5      	ble.n	80062b2 <CO_process_TPDO+0x34>
 80062e6:	e000      	b.n	80062ea <CO_process_TPDO+0x6c>
        return;
 80062e8:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 80062f8:	4a13      	ldr	r2, [pc, #76]	@ (8006348 <canopen_app_init+0x58>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	4619      	mov	r1, r3
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fae1 	bl	80058d0 <CO_new>
 800630e:	4603      	mov	r3, r0
 8006310:	4a0e      	ldr	r2, [pc, #56]	@ (800634c <canopen_app_init+0x5c>)
 8006312:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006314:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <canopen_app_init+0x5c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 800631c:	480c      	ldr	r0, [pc, #48]	@ (8006350 <canopen_app_init+0x60>)
 800631e:	f00b fda7 	bl	8011e70 <puts>
        return 1;
 8006322:	2301      	movs	r3, #1
 8006324:	e00c      	b.n	8006340 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4619      	mov	r1, r3
 800632a:	480a      	ldr	r0, [pc, #40]	@ (8006354 <canopen_app_init+0x64>)
 800632c:	f00b fd38 	bl	8011da0 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006330:	4b05      	ldr	r3, [pc, #20]	@ (8006348 <canopen_app_init+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a05      	ldr	r2, [pc, #20]	@ (800634c <canopen_app_init+0x5c>)
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 800633a:	f000 f80d 	bl	8006358 <canopen_app_resetCommunication>
    return 0;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	2400056c 	.word	0x2400056c
 800634c:	24000570 	.word	0x24000570
 8006350:	08012f28 	.word	0x08012f28
 8006354:	08012f48 	.word	0x08012f48

08006358 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b08f      	sub	sp, #60	@ 0x3c
 800635c:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 800635e:	488d      	ldr	r0, [pc, #564]	@ (8006594 <canopen_app_resetCommunication+0x23c>)
 8006360:	f00b fd86 	bl	8011e70 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006364:	4b8c      	ldr	r3, [pc, #560]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 800636e:	4b8b      	ldr	r3, [pc, #556]	@ (800659c <canopen_app_resetCommunication+0x244>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f000 f970 	bl	8006658 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006378:	4b87      	ldr	r3, [pc, #540]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fa3c 	bl	80067fc <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006384:	4b84      	ldr	r3, [pc, #528]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a84      	ldr	r2, [pc, #528]	@ (800659c <canopen_app_resetCommunication+0x244>)
 800638a:	6811      	ldr	r1, [r2, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fc3a 	bl	8005c08 <CO_CANinit>
 8006394:	4603      	mov	r3, r0
 8006396:	461a      	mov	r2, r3
 8006398:	4b81      	ldr	r3, [pc, #516]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 800639a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 800639c:	4b80      	ldr	r3, [pc, #512]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 800639e:	f993 3000 	ldrsb.w	r3, [r3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80063a6:	4b7e      	ldr	r3, [pc, #504]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 80063a8:	f993 3000 	ldrsb.w	r3, [r3]
 80063ac:	4619      	mov	r1, r3
 80063ae:	487d      	ldr	r0, [pc, #500]	@ (80065a4 <canopen_app_resetCommunication+0x24c>)
 80063b0:	f00b fcf6 	bl	8011da0 <iprintf>
        return 1;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0e9      	b.n	800658c <canopen_app_resetCommunication+0x234>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80063b8:	4b7b      	ldr	r3, [pc, #492]	@ (80065a8 <canopen_app_resetCommunication+0x250>)
 80063ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063bc:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 80063be:	4b7a      	ldr	r3, [pc, #488]	@ (80065a8 <canopen_app_resetCommunication+0x250>)
 80063c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80063c2:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 80063c4:	4b78      	ldr	r3, [pc, #480]	@ (80065a8 <canopen_app_resetCommunication+0x250>)
 80063c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80063c8:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 80063ca:	4b77      	ldr	r3, [pc, #476]	@ (80065a8 <canopen_app_resetCommunication+0x250>)
 80063cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80063ce:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 80063d0:	4b71      	ldr	r3, [pc, #452]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	4b71      	ldr	r3, [pc, #452]	@ (800659c <canopen_app_resetCommunication+0x244>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	4b70      	ldr	r3, [pc, #448]	@ (800659c <canopen_app_resetCommunication+0x244>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3302      	adds	r3, #2
 80063e0:	f107 0108 	add.w	r1, r7, #8
 80063e4:	f7ff fc3c 	bl	8005c60 <CO_LSSinit>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	4b6c      	ldr	r3, [pc, #432]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 80063ee:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80063f0:	4b6b      	ldr	r3, [pc, #428]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 80063f2:	f993 3000 	ldrsb.w	r3, [r3]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 80063fa:	4b69      	ldr	r3, [pc, #420]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 80063fc:	f993 3000 	ldrsb.w	r3, [r3]
 8006400:	4619      	mov	r1, r3
 8006402:	486a      	ldr	r0, [pc, #424]	@ (80065ac <canopen_app_resetCommunication+0x254>)
 8006404:	f00b fccc 	bl	8011da0 <iprintf>
        return 2;
 8006408:	2302      	movs	r3, #2
 800640a:	e0bf      	b.n	800658c <canopen_app_resetCommunication+0x234>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 800640c:	4b63      	ldr	r3, [pc, #396]	@ (800659c <canopen_app_resetCommunication+0x244>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b62      	ldr	r3, [pc, #392]	@ (800659c <canopen_app_resetCommunication+0x244>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 800641c:	4b5e      	ldr	r3, [pc, #376]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	4b63      	ldr	r3, [pc, #396]	@ (80065b0 <canopen_app_resetCommunication+0x258>)
 8006422:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006424:	4b5d      	ldr	r3, [pc, #372]	@ (800659c <canopen_app_resetCommunication+0x244>)
 8006426:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	1d3a      	adds	r2, r7, #4
 800642c:	9207      	str	r2, [sp, #28]
 800642e:	9306      	str	r3, [sp, #24]
 8006430:	2300      	movs	r3, #0
 8006432:	9305      	str	r3, [sp, #20]
 8006434:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006444:	9302      	str	r3, [sp, #8]
 8006446:	f242 1311 	movw	r3, #8465	@ 0x2111
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	460b      	mov	r3, r1
 8006452:	2200      	movs	r2, #0
 8006454:	2100      	movs	r1, #0
 8006456:	f7ff fc2f 	bl	8005cb8 <CO_CANopenInit>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	4b50      	ldr	r3, [pc, #320]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 8006460:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006462:	4b4f      	ldr	r3, [pc, #316]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 8006464:	f993 3000 	ldrsb.w	r3, [r3]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01a      	beq.n	80064a2 <canopen_app_resetCommunication+0x14a>
 800646c:	4b4c      	ldr	r3, [pc, #304]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 800646e:	f993 3000 	ldrsb.w	r3, [r3]
 8006472:	f113 0f13 	cmn.w	r3, #19
 8006476:	d014      	beq.n	80064a2 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006478:	4b49      	ldr	r3, [pc, #292]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 800647a:	f993 3000 	ldrsb.w	r3, [r3]
 800647e:	f113 0f0c 	cmn.w	r3, #12
 8006482:	d105      	bne.n	8006490 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4619      	mov	r1, r3
 8006488:	484a      	ldr	r0, [pc, #296]	@ (80065b4 <canopen_app_resetCommunication+0x25c>)
 800648a:	f00b fc89 	bl	8011da0 <iprintf>
 800648e:	e006      	b.n	800649e <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006490:	4b43      	ldr	r3, [pc, #268]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 8006492:	f993 3000 	ldrsb.w	r3, [r3]
 8006496:	4619      	mov	r1, r3
 8006498:	4847      	ldr	r0, [pc, #284]	@ (80065b8 <canopen_app_resetCommunication+0x260>)
 800649a:	f00b fc81 	bl	8011da0 <iprintf>
        }
        return 3;
 800649e:	2303      	movs	r3, #3
 80064a0:	e074      	b.n	800658c <canopen_app_resetCommunication+0x234>
    }
    CO_NMT_sendCommand(canopenNodeSTM32->canOpenStack->NMT, CO_NMT_RESET_NODE, canopenNodeSTM32->activeNodeID);
 80064a2:	4b3e      	ldr	r3, [pc, #248]	@ (800659c <canopen_app_resetCommunication+0x244>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	6918      	ldr	r0, [r3, #16]
 80064aa:	4b3c      	ldr	r3, [pc, #240]	@ (800659c <canopen_app_resetCommunication+0x244>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	461a      	mov	r2, r3
 80064b2:	2181      	movs	r1, #129	@ 0x81
 80064b4:	f7fb fc70 	bl	8001d98 <CO_NMT_sendCommand>
    CO_NMT_sendCommand(canopenNodeSTM32->canOpenStack->NMT, CO_NMT_ENTER_PRE_OPERATIONAL, canopenNodeSTM32->activeNodeID);
 80064b8:	4b38      	ldr	r3, [pc, #224]	@ (800659c <canopen_app_resetCommunication+0x244>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	6918      	ldr	r0, [r3, #16]
 80064c0:	4b36      	ldr	r3, [pc, #216]	@ (800659c <canopen_app_resetCommunication+0x244>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	461a      	mov	r2, r3
 80064c8:	2180      	movs	r1, #128	@ 0x80
 80064ca:	f7fb fc65 	bl	8001d98 <CO_NMT_sendCommand>
    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80064ce:	4b32      	ldr	r3, [pc, #200]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	4b31      	ldr	r3, [pc, #196]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69d9      	ldr	r1, [r3, #28]
 80064d8:	4b35      	ldr	r3, [pc, #212]	@ (80065b0 <canopen_app_resetCommunication+0x258>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b2f      	ldr	r3, [pc, #188]	@ (800659c <canopen_app_resetCommunication+0x244>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	785c      	ldrb	r4, [r3, #1]
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	4623      	mov	r3, r4
 80064e8:	f7ff fd78 	bl	8005fdc <CO_CANopenInitPDO>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b2b      	ldr	r3, [pc, #172]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 80064f2:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80064f4:	4b2a      	ldr	r3, [pc, #168]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 80064f6:	f993 3000 	ldrsb.w	r3, [r3]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d014      	beq.n	8006528 <canopen_app_resetCommunication+0x1d0>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80064fe:	4b28      	ldr	r3, [pc, #160]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 8006500:	f993 3000 	ldrsb.w	r3, [r3]
 8006504:	f113 0f0c 	cmn.w	r3, #12
 8006508:	d105      	bne.n	8006516 <canopen_app_resetCommunication+0x1be>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4619      	mov	r1, r3
 800650e:	4829      	ldr	r0, [pc, #164]	@ (80065b4 <canopen_app_resetCommunication+0x25c>)
 8006510:	f00b fc46 	bl	8011da0 <iprintf>
 8006514:	e006      	b.n	8006524 <canopen_app_resetCommunication+0x1cc>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006516:	4b22      	ldr	r3, [pc, #136]	@ (80065a0 <canopen_app_resetCommunication+0x248>)
 8006518:	f993 3000 	ldrsb.w	r3, [r3]
 800651c:	4619      	mov	r1, r3
 800651e:	4827      	ldr	r0, [pc, #156]	@ (80065bc <canopen_app_resetCommunication+0x264>)
 8006520:	f00b fc3e 	bl	8011da0 <iprintf>
        }
        return 4;
 8006524:	2304      	movs	r3, #4
 8006526:	e031      	b.n	800658c <canopen_app_resetCommunication+0x234>
    }
    CO_NMT_sendCommand(canopenNodeSTM32->canOpenStack->NMT, CO_NMT_ENTER_OPERATIONAL, canopenNodeSTM32->activeNodeID);
 8006528:	4b1c      	ldr	r3, [pc, #112]	@ (800659c <canopen_app_resetCommunication+0x244>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	6918      	ldr	r0, [r3, #16]
 8006530:	4b1a      	ldr	r3, [pc, #104]	@ (800659c <canopen_app_resetCommunication+0x244>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	461a      	mov	r2, r3
 8006538:	2101      	movs	r1, #1
 800653a:	f7fb fc2d 	bl	8001d98 <CO_NMT_sendCommand>
    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 800653e:	4b17      	ldr	r3, [pc, #92]	@ (800659c <canopen_app_resetCommunication+0x244>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4618      	mov	r0, r3
 8006546:	f006 fe45 	bl	800d1d4 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 800654a:	4b13      	ldr	r3, [pc, #76]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <canopen_app_resetCommunication+0x202>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8006554:	481a      	ldr	r0, [pc, #104]	@ (80065c0 <canopen_app_resetCommunication+0x268>)
 8006556:	f00b fc8b 	bl	8011e70 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 800655a:	4b0f      	ldr	r3, [pc, #60]	@ (8006598 <canopen_app_resetCommunication+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 f889 	bl	8006678 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8006566:	4817      	ldr	r0, [pc, #92]	@ (80065c4 <canopen_app_resetCommunication+0x26c>)
 8006568:	f00b fc82 	bl	8011e70 <puts>
    fflush(stdout);
 800656c:	4b16      	ldr	r3, [pc, #88]	@ (80065c8 <canopen_app_resetCommunication+0x270>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f00b fb3e 	bl	8011bf4 <fflush>
    time_old = time_current = HAL_GetTick();
 8006578:	f001 f9e4 	bl	8007944 <HAL_GetTick>
 800657c:	4603      	mov	r3, r0
 800657e:	4a13      	ldr	r2, [pc, #76]	@ (80065cc <canopen_app_resetCommunication+0x274>)
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <canopen_app_resetCommunication+0x274>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a12      	ldr	r2, [pc, #72]	@ (80065d0 <canopen_app_resetCommunication+0x278>)
 8006588:	6013      	str	r3, [r2, #0]
    return 0;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd90      	pop	{r4, r7, pc}
 8006594:	08012f70 	.word	0x08012f70
 8006598:	24000570 	.word	0x24000570
 800659c:	2400056c 	.word	0x2400056c
 80065a0:	2400057c 	.word	0x2400057c
 80065a4:	08012f98 	.word	0x08012f98
 80065a8:	24000000 	.word	0x24000000
 80065ac:	08012fc0 	.word	0x08012fc0
 80065b0:	240003cc 	.word	0x240003cc
 80065b4:	08012fec 	.word	0x08012fec
 80065b8:	08013014 	.word	0x08013014
 80065bc:	08013040 	.word	0x08013040
 80065c0:	08013068 	.word	0x08013068
 80065c4:	08013090 	.word	0x08013090
 80065c8:	240004dc 	.word	0x240004dc
 80065cc:	24000578 	.word	0x24000578
 80065d0:	24000574 	.word	0x24000574

080065d4 <canopen_app_interrupt>:
    }
}

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 80065da:	4b1e      	ldr	r3, [pc, #120]	@ (8006654 <canopen_app_interrupt+0x80>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e0:	f3ef 8210 	mrs	r2, PRIMASK
 80065e4:	607a      	str	r2, [r7, #4]
  return(result);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80065ea:	b672      	cpsid	i
}
 80065ec:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 80065ee:	4b19      	ldr	r3, [pc, #100]	@ (8006654 <canopen_app_interrupt+0x80>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d120      	bne.n	800663a <canopen_app_interrupt+0x66>
 80065f8:	4b16      	ldr	r3, [pc, #88]	@ (8006654 <canopen_app_interrupt+0x80>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01a      	beq.n	800663a <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8006608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800660c:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 800660e:	4b11      	ldr	r3, [pc, #68]	@ (8006654 <canopen_app_interrupt+0x80>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fdb8 	bl	800618c <CO_process_SYNC>
 800661c:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <canopen_app_interrupt+0x80>)
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	f7ff fdf0 	bl	800620c <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 800662c:	4b09      	ldr	r3, [pc, #36]	@ (8006654 <canopen_app_interrupt+0x80>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	68f9      	ldr	r1, [r7, #12]
 8006636:	f7ff fe22 	bl	800627e <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 800663a:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <canopen_app_interrupt+0x80>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006642:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f383 8810 	msr	PRIMASK, r3
}
 800664a:	bf00      	nop
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	24000570 	.word	0x24000570

08006658 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fd62 	bl	8008134 <HAL_FDCAN_Stop>
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#endif
    }
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fd25 	bl	80080de <HAL_FDCAN_Start>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <CO_CANsetNormalMode+0x28>
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#endif
        {
            CANmodule->CANnormal = true;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	615a      	str	r2, [r3, #20]
        }
    }
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <CO_CANmodule_init+0x20>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <CO_CANmodule_init+0x20>
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295
 80066cc:	e08e      	b.n	80067ec <CO_CANmodule_init+0x144>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 80066d4:	4a47      	ldr	r2, [pc, #284]	@ (80067f4 <CO_CANmodule_init+0x14c>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	887a      	ldrh	r2, [r7, #2]
 80066e4:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a3a      	ldr	r2, [r7, #32]
 80066ea:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066f0:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 800671c:	2300      	movs	r3, #0
 800671e:	82fb      	strh	r3, [r7, #22]
 8006720:	e02b      	b.n	800677a <CO_CANmodule_init+0xd2>
        rxArray[i].ident = 0U;
 8006722:	8afa      	ldrh	r2, [r7, #22]
 8006724:	4613      	mov	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	461a      	mov	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4413      	add	r3, r2
 8006732:	2200      	movs	r2, #0
 8006734:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8006736:	8afa      	ldrh	r2, [r7, #22]
 8006738:	4613      	mov	r3, r2
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	461a      	mov	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4413      	add	r3, r2
 8006746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800674a:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 800674c:	8afa      	ldrh	r2, [r7, #22]
 800674e:	4613      	mov	r3, r2
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	461a      	mov	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	2200      	movs	r2, #0
 800675e:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8006760:	8afa      	ldrh	r2, [r7, #22]
 8006762:	4613      	mov	r3, r2
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4413      	add	r3, r2
 8006770:	2200      	movs	r2, #0
 8006772:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8006774:	8afb      	ldrh	r3, [r7, #22]
 8006776:	3301      	adds	r3, #1
 8006778:	82fb      	strh	r3, [r7, #22]
 800677a:	8afa      	ldrh	r2, [r7, #22]
 800677c:	887b      	ldrh	r3, [r7, #2]
 800677e:	429a      	cmp	r2, r3
 8006780:	d3cf      	bcc.n	8006722 <CO_CANmodule_init+0x7a>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8006782:	2300      	movs	r3, #0
 8006784:	82bb      	strh	r3, [r7, #20]
 8006786:	e00c      	b.n	80067a2 <CO_CANmodule_init+0xfa>
        txArray[i].bufferFull = false;
 8006788:	8aba      	ldrh	r2, [r7, #20]
 800678a:	4613      	mov	r3, r2
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	461a      	mov	r2, r3
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	4413      	add	r3, r2
 8006798:	2200      	movs	r2, #0
 800679a:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800679c:	8abb      	ldrh	r3, [r7, #20]
 800679e:	3301      	adds	r3, #1
 80067a0:	82bb      	strh	r3, [r7, #20]
 80067a2:	8aba      	ldrh	r2, [r7, #20]
 80067a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d3ee      	bcc.n	8006788 <CO_CANmodule_init+0xe0>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	4798      	blx	r3
     * Accept non-matching standard ID messages
     * Reject non-matching extended ID messages
     */

#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ConfigGlobalFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT,
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6898      	ldr	r0, [r3, #8]
 80067b4:	2300      	movs	r3, #0
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2300      	movs	r3, #0
 80067ba:	2202      	movs	r2, #2
 80067bc:	2100      	movs	r1, #0
 80067be:	f001 fc61 	bl	8008084 <HAL_FDCAN_ConfigGlobalFilter>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <CO_CANmodule_init+0x126>
                                     FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295
 80067cc:	e00e      	b.n	80067ec <CO_CANmodule_init+0x144>
    }
#endif
    /* Enable notifications */
    /* Activate the CAN notification interrupts */
#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle,
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f04f 32ff 	mov.w	r2, #4294967295
 80067d6:	4908      	ldr	r1, [pc, #32]	@ (80067f8 <CO_CANmodule_init+0x150>)
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 feed 	bl	80085b8 <HAL_FDCAN_ActivateNotification>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <CO_CANmodule_init+0x142>
                                           | FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_FIFO_EMPTY | FDCAN_IT_BUS_OFF
                                           | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
                                           | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING,
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	e000      	b.n	80067ec <CO_CANmodule_init+0x144>
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	24000580 	.word	0x24000580
 80067f8:	1b800a11 	.word	0x1b800a11

080067fc <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <CO_CANmodule_disable+0x22>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fc8b 	bl	8008134 <HAL_FDCAN_Stop>

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
#endif
    }
}
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	461a      	mov	r2, r3
 8006836:	4603      	mov	r3, r0
 8006838:	817b      	strh	r3, [r7, #10]
 800683a:	460b      	mov	r3, r1
 800683c:	813b      	strh	r3, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d03a      	beq.n	80068c2 <CO_CANrxBufferInit+0x9a>
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	2b00      	cmp	r3, #0
 8006850:	d037      	beq.n	80068c2 <CO_CANrxBufferInit+0x9a>
 8006852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006854:	2b00      	cmp	r3, #0
 8006856:	d034      	beq.n	80068c2 <CO_CANrxBufferInit+0x9a>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	891b      	ldrh	r3, [r3, #8]
 800685c:	897a      	ldrh	r2, [r7, #10]
 800685e:	429a      	cmp	r2, r3
 8006860:	d22f      	bcs.n	80068c2 <CO_CANrxBufferInit+0x9a>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6859      	ldr	r1, [r3, #4]
 8006866:	897a      	ldrh	r2, [r7, #10]
 8006868:	4613      	mov	r3, r2
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006878:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800687e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8006880:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006888:	b21b      	sxth	r3, r3
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	2a00      	cmp	r2, #0
 800688e:	d001      	beq.n	8006894 <CO_CANrxBufferInit+0x6c>
 8006890:	4a12      	ldr	r2, [pc, #72]	@ (80068dc <CO_CANrxBufferInit+0xb4>)
 8006892:	e000      	b.n	8006896 <CO_CANrxBufferInit+0x6e>
 8006894:	2200      	movs	r2, #0
 8006896:	4313      	orrs	r3, r2
 8006898:	b21b      	sxth	r3, r3
 800689a:	b29a      	uxth	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 80068a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068a8:	b21a      	sxth	r2, r3
 80068aa:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <CO_CANrxBufferInit+0xb4>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	b21b      	sxth	r3, r3
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <CO_CANrxBufferInit+0xa0>
            __NOP();
 80068be:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80068c0:	e002      	b.n	80068c8 <CO_CANrxBufferInit+0xa0>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80068c2:	23ff      	movs	r3, #255	@ 0xff
 80068c4:	75fb      	strb	r3, [r7, #23]
 80068c6:	e000      	b.n	80068ca <CO_CANrxBufferInit+0xa2>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80068c8:	bf00      	nop
    }

    return ret;
 80068ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	ffff8000 	.word	0xffff8000

080068e0 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	817b      	strh	r3, [r7, #10]
 80068ee:	4613      	mov	r3, r2
 80068f0:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d024      	beq.n	8006946 <CO_CANtxBufferInit+0x66>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8a1b      	ldrh	r3, [r3, #16]
 8006900:	897a      	ldrh	r2, [r7, #10]
 8006902:	429a      	cmp	r2, r3
 8006904:	d21f      	bcs.n	8006946 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68d9      	ldr	r1, [r3, #12]
 800690a:	897a      	ldrh	r2, [r7, #10]
 800690c:	4613      	mov	r3, r2
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	4413      	add	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	440b      	add	r3, r1
 8006916:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8006918:	893b      	ldrh	r3, [r7, #8]
 800691a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	2a00      	cmp	r2, #0
 8006922:	d002      	beq.n	800692a <CO_CANtxBufferInit+0x4a>
 8006924:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006928:	e000      	b.n	800692c <CO_CANtxBufferInit+0x4c>
 800692a:	2200      	movs	r2, #0
 800692c:	431a      	orrs	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006938:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2200      	movs	r2, #0
 800693e:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006944:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8006946:	697b      	ldr	r3, [r7, #20]
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_TxHeaderTypeDef tx_hdr;
    if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4618      	mov	r0, r3
 800696a:	f001 fe13 	bl	8008594 <HAL_FDCAN_GetTxFifoFreeLevel>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d074      	beq.n	8006a5e <prv_send_can_message+0x10a>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800697c:	4a3a      	ldr	r2, [pc, #232]	@ (8006a68 <prv_send_can_message+0x114>)
 800697e:	6013      	str	r3, [r2, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	039b      	lsls	r3, r3, #14
 8006986:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800698a:	4a37      	ldr	r2, [pc, #220]	@ (8006a68 <prv_send_can_message+0x114>)
 800698c:	6093      	str	r3, [r2, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 800698e:	4b36      	ldr	r3, [pc, #216]	@ (8006a68 <prv_send_can_message+0x114>)
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 8006994:	4b34      	ldr	r3, [pc, #208]	@ (8006a68 <prv_send_can_message+0x114>)
 8006996:	2200      	movs	r2, #0
 8006998:	619a      	str	r2, [r3, #24]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 800699a:	4b33      	ldr	r3, [pc, #204]	@ (8006a68 <prv_send_can_message+0x114>)
 800699c:	2200      	movs	r2, #0
 800699e:	615a      	str	r2, [r3, #20]
        tx_hdr.MessageMarker = 0;
 80069a0:	4b31      	ldr	r3, [pc, #196]	@ (8006a68 <prv_send_can_message+0x114>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	621a      	str	r2, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80069a6:	4b30      	ldr	r3, [pc, #192]	@ (8006a68 <prv_send_can_message+0x114>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	611a      	str	r2, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80069ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006a68 <prv_send_can_message+0x114>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	61da      	str	r2, [r3, #28]

        switch (buffer->DLC) {
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	791b      	ldrb	r3, [r3, #4]
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d840      	bhi.n	8006a3c <prv_send_can_message+0xe8>
 80069ba:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <prv_send_can_message+0x6c>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	080069f7 	.word	0x080069f7
 80069cc:	08006a01 	.word	0x08006a01
 80069d0:	08006a0b 	.word	0x08006a0b
 80069d4:	08006a15 	.word	0x08006a15
 80069d8:	08006a1f 	.word	0x08006a1f
 80069dc:	08006a29 	.word	0x08006a29
 80069e0:	08006a33 	.word	0x08006a33
            case 0:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 80069e4:	4b20      	ldr	r3, [pc, #128]	@ (8006a68 <prv_send_can_message+0x114>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	60da      	str	r2, [r3, #12]
                break;
 80069ea:	e028      	b.n	8006a3e <prv_send_can_message+0xea>
            case 1:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 80069ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006a68 <prv_send_can_message+0x114>)
 80069ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80069f2:	60da      	str	r2, [r3, #12]
                break;
 80069f4:	e023      	b.n	8006a3e <prv_send_can_message+0xea>
            case 2:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 80069f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006a68 <prv_send_can_message+0x114>)
 80069f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80069fc:	60da      	str	r2, [r3, #12]
                break;
 80069fe:	e01e      	b.n	8006a3e <prv_send_can_message+0xea>
            case 3:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 8006a00:	4b19      	ldr	r3, [pc, #100]	@ (8006a68 <prv_send_can_message+0x114>)
 8006a02:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006a06:	60da      	str	r2, [r3, #12]
                break;
 8006a08:	e019      	b.n	8006a3e <prv_send_can_message+0xea>
            case 4:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 8006a0a:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <prv_send_can_message+0x114>)
 8006a0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006a10:	60da      	str	r2, [r3, #12]
                break;
 8006a12:	e014      	b.n	8006a3e <prv_send_can_message+0xea>
            case 5:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 8006a14:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <prv_send_can_message+0x114>)
 8006a16:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8006a1a:	60da      	str	r2, [r3, #12]
                break;
 8006a1c:	e00f      	b.n	8006a3e <prv_send_can_message+0xea>
            case 6:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 8006a1e:	4b12      	ldr	r3, [pc, #72]	@ (8006a68 <prv_send_can_message+0x114>)
 8006a20:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8006a24:	60da      	str	r2, [r3, #12]
                break;
 8006a26:	e00a      	b.n	8006a3e <prv_send_can_message+0xea>
            case 7:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 8006a28:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <prv_send_can_message+0x114>)
 8006a2a:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006a2e:	60da      	str	r2, [r3, #12]
                break;
 8006a30:	e005      	b.n	8006a3e <prv_send_can_message+0xea>
            case 8:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 8006a32:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <prv_send_can_message+0x114>)
 8006a34:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006a38:	60da      	str	r2, [r3, #12]
                break;
 8006a3a:	e000      	b.n	8006a3e <prv_send_can_message+0xea>
            default: /* Hard error... */
                break;
 8006a3c:	bf00      	nop
        }

        /* Now add message to FIFO. Should not fail */
        success =
            HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6898      	ldr	r0, [r3, #8]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	3305      	adds	r3, #5
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4907      	ldr	r1, [pc, #28]	@ (8006a68 <prv_send_can_message+0x114>)
 8006a4c:	f001 fbe9 	bl	8008222 <HAL_FDCAN_AddMessageToTxFifoQ>
 8006a50:	4603      	mov	r3, r0
            == HAL_OK;
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf0c      	ite	eq
 8006a56:	2301      	moveq	r3, #1
 8006a58:	2300      	movne	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
        success =
 8006a5c:	73fb      	strb	r3, [r7, #15]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	24000584 	.word	0x24000584

08006a6c <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00c      	beq.n	8006a9c <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8a5b      	ldrh	r3, [r3, #18]
 8006a8e:	f043 0308 	orr.w	r3, r3, #8
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8006a98:	23f7      	movs	r3, #247	@ 0xf7
 8006a9a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8006aa2:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006aa8:	b672      	cpsid	i
}
 8006aaa:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ff50 	bl	8006954 <prv_send_can_message>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	61da      	str	r2, [r3, #28]
 8006ac2:	e009      	b.n	8006ad8 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f383 8810 	msr	PRIMASK, r3
}
 8006ae4:	bf00      	nop

    return err;
 8006ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8006af2:	b480      	push	{r7}
 8006af4:	b087      	sub	sp, #28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afe:	f3ef 8310 	mrs	r3, PRIMASK
 8006b02:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b04:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006b0a:	b672      	cpsid	i
}
 8006b0c:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d032      	beq.n	8006b90 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8a1b      	ldrh	r3, [r3, #16]
 8006b2e:	827b      	strh	r3, [r7, #18]
 8006b30:	e02b      	b.n	8006b8a <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68d9      	ldr	r1, [r3, #12]
 8006b36:	8a7a      	ldrh	r2, [r7, #18]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	440b      	add	r3, r1
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01d      	beq.n	8006b84 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68d9      	ldr	r1, [r3, #12]
 8006b4c:	8a7a      	ldrh	r2, [r7, #18]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	4413      	add	r3, r2
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	440b      	add	r3, r1
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d012      	beq.n	8006b84 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68d9      	ldr	r1, [r3, #12]
 8006b62:	8a7a      	ldrh	r2, [r7, #18]
 8006b64:	4613      	mov	r3, r2
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	4413      	add	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	440b      	add	r3, r1
 8006b6e:	2200      	movs	r2, #0
 8006b70:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 8006b80:	2302      	movs	r3, #2
 8006b82:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8006b84:	8a7b      	ldrh	r3, [r7, #18]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	827b      	strh	r3, [r7, #18]
 8006b8a:	8a7b      	ldrh	r3, [r7, #18]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1d0      	bne.n	8006b32 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	bf00      	nop
    if (tpdoDeleted) {
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d006      	beq.n	8006bb2 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8a5b      	ldrh	r3, [r3, #18]
 8006ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	825a      	strh	r2, [r3, #18]
    }
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
	...

08006bc0 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08c      	sub	sp, #48	@ 0x30
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8006bd6:	f107 0314 	add.w	r3, r7, #20
 8006bda:	3305      	adds	r3, #5
 8006bdc:	4a53      	ldr	r2, [pc, #332]	@ (8006d2c <prv_read_can_received_msg+0x16c>)
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f001 fb79 	bl	80082d8 <HAL_FDCAN_GetRxMessage>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 809a 	bne.w	8006d22 <prv_read_can_received_msg+0x162>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 8006bee:	4b4f      	ldr	r3, [pc, #316]	@ (8006d2c <prv_read_can_received_msg+0x16c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8006d2c <prv_read_can_received_msg+0x16c>)
 8006bf4:	6892      	ldr	r2, [r2, #8]
 8006bf6:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8006bfa:	d102      	bne.n	8006c02 <prv_read_can_received_msg+0x42>
 8006bfc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006c00:	e000      	b.n	8006c04 <prv_read_can_received_msg+0x44>
 8006c02:	2200      	movs	r2, #0
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
    switch (rx_hdr.DataLength) {
 8006c08:	4b48      	ldr	r3, [pc, #288]	@ (8006d2c <prv_read_can_received_msg+0x16c>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c10:	d044      	beq.n	8006c9c <prv_read_can_received_msg+0xdc>
 8006c12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c16:	d844      	bhi.n	8006ca2 <prv_read_can_received_msg+0xe2>
 8006c18:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8006c1c:	d03b      	beq.n	8006c96 <prv_read_can_received_msg+0xd6>
 8006c1e:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8006c22:	d83e      	bhi.n	8006ca2 <prv_read_can_received_msg+0xe2>
 8006c24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006c28:	d032      	beq.n	8006c90 <prv_read_can_received_msg+0xd0>
 8006c2a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006c2e:	d838      	bhi.n	8006ca2 <prv_read_can_received_msg+0xe2>
 8006c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c34:	d029      	beq.n	8006c8a <prv_read_can_received_msg+0xca>
 8006c36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c3a:	d832      	bhi.n	8006ca2 <prv_read_can_received_msg+0xe2>
 8006c3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c40:	d020      	beq.n	8006c84 <prv_read_can_received_msg+0xc4>
 8006c42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c46:	d82c      	bhi.n	8006ca2 <prv_read_can_received_msg+0xe2>
 8006c48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c4c:	d017      	beq.n	8006c7e <prv_read_can_received_msg+0xbe>
 8006c4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c52:	d826      	bhi.n	8006ca2 <prv_read_can_received_msg+0xe2>
 8006c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c58:	d00e      	beq.n	8006c78 <prv_read_can_received_msg+0xb8>
 8006c5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c5e:	d820      	bhi.n	8006ca2 <prv_read_can_received_msg+0xe2>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <prv_read_can_received_msg+0xac>
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c68:	d003      	beq.n	8006c72 <prv_read_can_received_msg+0xb2>
 8006c6a:	e01a      	b.n	8006ca2 <prv_read_can_received_msg+0xe2>
        case FDCAN_DLC_BYTES_0:
            rcvMsg.dlc = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	763b      	strb	r3, [r7, #24]
            break;
 8006c70:	e01a      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_1:
            rcvMsg.dlc = 1;
 8006c72:	2301      	movs	r3, #1
 8006c74:	763b      	strb	r3, [r7, #24]
            break;
 8006c76:	e017      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_2:
            rcvMsg.dlc = 2;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	763b      	strb	r3, [r7, #24]
            break;
 8006c7c:	e014      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_3:
            rcvMsg.dlc = 3;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	763b      	strb	r3, [r7, #24]
            break;
 8006c82:	e011      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_4:
            rcvMsg.dlc = 4;
 8006c84:	2304      	movs	r3, #4
 8006c86:	763b      	strb	r3, [r7, #24]
            break;
 8006c88:	e00e      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_5:
            rcvMsg.dlc = 5;
 8006c8a:	2305      	movs	r3, #5
 8006c8c:	763b      	strb	r3, [r7, #24]
            break;
 8006c8e:	e00b      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_6:
            rcvMsg.dlc = 6;
 8006c90:	2306      	movs	r3, #6
 8006c92:	763b      	strb	r3, [r7, #24]
            break;
 8006c94:	e008      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_7:
            rcvMsg.dlc = 7;
 8006c96:	2307      	movs	r3, #7
 8006c98:	763b      	strb	r3, [r7, #24]
            break;
 8006c9a:	e005      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_8:
            rcvMsg.dlc = 8;
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	763b      	strb	r3, [r7, #24]
            break;
 8006ca0:	e002      	b.n	8006ca8 <prv_read_can_received_msg+0xe8>
        default:
            rcvMsg.dlc = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	763b      	strb	r3, [r7, #24]
            break; /* Invalid length when more than 8 */
 8006ca6:	bf00      	nop
    }
    rcvMsgIdent = rcvMsg.ident;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8006cac:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <prv_read_can_received_msg+0x170>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <prv_read_can_received_msg+0xfa>
        __BKPT(0);
 8006cb6:	be00      	bkpt	0x0000
 8006cb8:	e01f      	b.n	8006cfa <prv_read_can_received_msg+0x13a>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8006cba:	4b1d      	ldr	r3, [pc, #116]	@ (8006d30 <prv_read_can_received_msg+0x170>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d30 <prv_read_can_received_msg+0x170>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	891b      	ldrh	r3, [r3, #8]
 8006cc8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006cca:	e013      	b.n	8006cf4 <prv_read_can_received_msg+0x134>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8006ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	4053      	eors	r3, r2
 8006cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd8:	8852      	ldrh	r2, [r2, #2]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d103      	bne.n	8006ce8 <prv_read_can_received_msg+0x128>
                messageFound = 1;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                break;
 8006ce6:	e008      	b.n	8006cfa <prv_read_can_received_msg+0x13a>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006ce8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006cea:	3b01      	subs	r3, #1
 8006cec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e8      	bne.n	8006ccc <prv_read_can_received_msg+0x10c>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8006cfa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <prv_read_can_received_msg+0x164>
 8006d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <prv_read_can_received_msg+0x164>
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <prv_read_can_received_msg+0x164>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d16:	6852      	ldr	r2, [r2, #4]
 8006d18:	f107 0114 	add.w	r1, r7, #20
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
 8006d20:	e000      	b.n	8006d24 <prv_read_can_received_msg+0x164>
        return;
 8006d22:	bf00      	nop
    }
}
 8006d24:	3730      	adds	r7, #48	@ 0x30
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	240005a8 	.word	0x240005a8
 8006d30:	24000580 	.word	0x24000580

08006d34 <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <HAL_FDCAN_RxFifo0Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	2140      	movs	r1, #64	@ 0x40
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ff37 	bl	8006bc0 <prv_read_can_received_msg>
    }
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
    CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8006d66:	4b2c      	ldr	r3, [pc, #176]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	621a      	str	r2, [r3, #32]
    CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8006d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	61da      	str	r2, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8006d76:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d045      	beq.n	8006e0e <HAL_FDCAN_TxBufferCompleteCallback+0xb2>
        CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 8006d82:	4b25      	ldr	r3, [pc, #148]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	617b      	str	r3, [r7, #20]
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 8006d8a:	4b23      	ldr	r3, [pc, #140]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8e:	f3ef 8210 	mrs	r2, PRIMASK
 8006d92:	60fa      	str	r2, [r7, #12]
  return(result);
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006d98:	b672      	cpsid	i
}
 8006d9a:	bf00      	nop
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	8a1b      	ldrh	r3, [r3, #16]
 8006da2:	827b      	strh	r3, [r7, #18]
 8006da4:	e021      	b.n	8006dea <HAL_FDCAN_TxBufferCompleteCallback+0x8e>
            /* Try to send message */
            if (buffer->bufferFull) {
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d017      	beq.n	8006dde <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                if (prv_send_can_message(CANModule_local, buffer)) {
 8006dae:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fdcd 	bl	8006954 <prv_send_can_message>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                    buffer->bufferFull = false;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	611a      	str	r2, [r3, #16]
                    CANModule_local->CANtxCount--;
 8006dc6:	4b14      	ldr	r3, [pc, #80]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	3a01      	subs	r2, #1
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 8006dd4:	4b10      	ldr	r3, [pc, #64]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	6952      	ldr	r2, [r2, #20]
 8006ddc:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8006dde:	8a7b      	ldrh	r3, [r7, #18]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	827b      	strh	r3, [r7, #18]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3318      	adds	r3, #24
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	8a7b      	ldrh	r3, [r7, #18]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1da      	bne.n	8006da6 <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8006df0:	8a7b      	ldrh	r3, [r7, #18]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <HAL_FDCAN_TxBufferCompleteCallback+0xa2>
            CANModule_local->CANtxCount = 0U;
 8006df6:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 8006dfe:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f383 8810 	msr	PRIMASK, r3
}
 8006e0c:	bf00      	nop
    }
}
 8006e0e:	bf00      	nop
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	24000580 	.word	0x24000580

08006e1c <HAL_TIM_PeriodElapsedCallback>:

uint32_t tmp = 0x00;
uint8_t amount_read = 0;
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
    if (htim == canopenNodeSTM32->timerHandle) {
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d101      	bne.n	8006e34 <HAL_TIM_PeriodElapsedCallback+0x18>
        canopen_app_interrupt();
 8006e30:	f7ff fbd0 	bl	80065d4 <canopen_app_interrupt>
    }
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	2400056c 	.word	0x2400056c

08006e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006e46:	f000 fcf7 	bl	8007838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006e4a:	f000 f887 	bl	8006f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006e4e:	f000 f9c3 	bl	80071d8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8006e52:	f000 f905 	bl	8007060 <MX_FDCAN1_Init>
  MX_TIM14_Init();
 8006e56:	f000 f99b 	bl	8007190 <MX_TIM14_Init>
  MX_RNG_Init();
 8006e5a:	f000 f983 	bl	8007164 <MX_RNG_Init>
  MX_USB_DEVICE_Init();
 8006e5e:	f009 ff4d 	bl	8010cfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canopenNode_1;

  canopen_app_user_init(&canopenNode_1,
 8006e62:	4638      	mov	r0, r7
 8006e64:	4b36      	ldr	r3, [pc, #216]	@ (8006f40 <main+0x100>)
 8006e66:	4a37      	ldr	r2, [pc, #220]	@ (8006f44 <main+0x104>)
 8006e68:	4937      	ldr	r1, [pc, #220]	@ (8006f48 <main+0x108>)
 8006e6a:	f7f9 faa1 	bl	80003b0 <canopen_app_user_init>
  							&hfdcan1,
							&MX_FDCAN1_Init,
							&htim14);


canopen_app_user_config(&canopenNode_1);
 8006e6e:	463b      	mov	r3, r7
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7f9 fabb 	bl	80003ec <canopen_app_user_config>

  /* USER CODE END 2 */
// Servo node ID
  uint8_t servoNodeId1 = 1;
 8006e76:	2301      	movs	r3, #1
 8006e78:	76fb      	strb	r3, [r7, #27]

  SDOmode(&canopenNode_1, servoNodeId1, 0x01);
 8006e7a:	7ef9      	ldrb	r1, [r7, #27]
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fa f813 	bl	8000eac <SDOmode>
  SDO_TargetPossition(&canopenNode_1, servoNodeId1, 500000);
 8006e86:	7ef9      	ldrb	r1, [r7, #27]
 8006e88:	463b      	mov	r3, r7
 8006e8a:	4a30      	ldr	r2, [pc, #192]	@ (8006f4c <main+0x10c>)
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7f9 fead 	bl	8000bec <SDO_TargetPossition>
  SDO_ProfileVelocity(&canopenNode_1, servoNodeId1, 10000000);
 8006e92:	7ef9      	ldrb	r1, [r7, #27]
 8006e94:	463b      	mov	r3, r7
 8006e96:	4a2e      	ldr	r2, [pc, #184]	@ (8006f50 <main+0x110>)
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7f9 fed5 	bl	8000c48 <SDO_ProfileVelocity>
  SDO_ProfileAcceleration(&canopenNode_1, servoNodeId1, 1000000);
 8006e9e:	7ef9      	ldrb	r1, [r7, #27]
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8006f54 <main+0x114>)
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7f9 ff7f 	bl	8000da8 <SDO_ProfileAcceleration>
  SDO_ProfileDeceleration(&canopenNode_1, servoNodeId1, 1000000);
 8006eaa:	7ef9      	ldrb	r1, [r7, #27]
 8006eac:	463b      	mov	r3, r7
 8006eae:	4a29      	ldr	r2, [pc, #164]	@ (8006f54 <main+0x114>)
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7f9 ffa7 	bl	8000e04 <SDO_ProfileDeceleration>
  Electronic_Gear_Molecule(&canopenNode_1, servoNodeId1, 1);
 8006eb6:	7ef9      	ldrb	r1, [r7, #27]
 8006eb8:	463b      	mov	r3, r7
 8006eba:	2201      	movs	r2, #1
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7f9 ff17 	bl	8000cf0 <Electronic_Gear_Molecule>
  Electronic_Gear_Denominator(&canopenNode_1, servoNodeId1, 1);
 8006ec2:	7ef9      	ldrb	r1, [r7, #27]
 8006ec4:	463b      	mov	r3, r7
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7f9 ff3f 	bl	8000d4c <Electronic_Gear_Denominator>
  setbit6to1(&canopenNode_1, servoNodeId1);
 8006ece:	7efa      	ldrb	r2, [r7, #27]
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7f9 fc3d 	bl	8000754 <setbit6to1>
  setbit4to1(&canopenNode_1, servoNodeId1);
 8006eda:	7efa      	ldrb	r2, [r7, #27]
 8006edc:	463b      	mov	r3, r7
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7f9 fc5d 	bl	80007a0 <setbit4to1>
  setbit6to1(&canopenNode_1, servoNodeId1);
 8006ee6:	7efa      	ldrb	r2, [r7, #27]
 8006ee8:	463b      	mov	r3, r7
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7f9 fc31 	bl	8000754 <setbit6to1>
  HAL_Delay(3000);
 8006ef2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8006ef6:	f000 fd31 	bl	800795c <HAL_Delay>

  int32_t position = -500000;
 8006efa:	4b17      	ldr	r3, [pc, #92]	@ (8006f58 <main+0x118>)
 8006efc:	61fb      	str	r3, [r7, #28]
//	  HAL_Delay(1);
//	  Send_PDOControlWord(&canopenNode_1, 0x200 + servoNodeId1, 0x4F);
	  //HAL_Delay(50);
//
//	  //Send_PDOControlWord(&canopenNode_1, 0x200 + servoNodeId2, 0x4F);
	  SDO_TargetPossition(&canopenNode_1, servoNodeId1, position);
 8006efe:	7ef9      	ldrb	r1, [r7, #27]
 8006f00:	463b      	mov	r3, r7
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7f9 fe71 	bl	8000bec <SDO_TargetPossition>
	  setbit6to1(&canopenNode_1, servoNodeId1);
 8006f0a:	7efa      	ldrb	r2, [r7, #27]
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7f9 fc1f 	bl	8000754 <setbit6to1>
	  setbit4to1(&canopenNode_1, servoNodeId1);
 8006f16:	7efa      	ldrb	r2, [r7, #27]
 8006f18:	463b      	mov	r3, r7
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7f9 fc3f 	bl	80007a0 <setbit4to1>
	  setbit6to1(&canopenNode_1, servoNodeId1);
 8006f22:	7efa      	ldrb	r2, [r7, #27]
 8006f24:	463b      	mov	r3, r7
 8006f26:	4611      	mov	r1, r2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7f9 fc13 	bl	8000754 <setbit6to1>
	  position =  -position;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	425b      	negs	r3, r3
 8006f32:	61fb      	str	r3, [r7, #28]
	  HAL_Delay(3000);
 8006f34:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8006f38:	f000 fd10 	bl	800795c <HAL_Delay>
	  SDO_TargetPossition(&canopenNode_1, servoNodeId1, position);
 8006f3c:	bf00      	nop
 8006f3e:	e7de      	b.n	8006efe <main+0xbe>
 8006f40:	24000684 	.word	0x24000684
 8006f44:	08007061 	.word	0x08007061
 8006f48:	240005d0 	.word	0x240005d0
 8006f4c:	0007a120 	.word	0x0007a120
 8006f50:	00989680 	.word	0x00989680
 8006f54:	000f4240 	.word	0x000f4240
 8006f58:	fff85ee0 	.word	0xfff85ee0

08006f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b09c      	sub	sp, #112	@ 0x70
 8006f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f66:	224c      	movs	r2, #76	@ 0x4c
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f00b f89a 	bl	80120a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f70:	1d3b      	adds	r3, r7, #4
 8006f72:	2220      	movs	r2, #32
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f00b f894 	bl	80120a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006f7c:	2002      	movs	r0, #2
 8006f7e:	f003 fd19 	bl	800a9b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006f82:	2300      	movs	r3, #0
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	4b34      	ldr	r3, [pc, #208]	@ (8007058 <SystemClock_Config+0xfc>)
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	4a33      	ldr	r2, [pc, #204]	@ (8007058 <SystemClock_Config+0xfc>)
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f92:	4b31      	ldr	r3, [pc, #196]	@ (8007058 <SystemClock_Config+0xfc>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800705c <SystemClock_Config+0x100>)
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800705c <SystemClock_Config+0x100>)
 8006fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006faa:	6193      	str	r3, [r2, #24]
 8006fac:	4b2b      	ldr	r3, [pc, #172]	@ (800705c <SystemClock_Config+0x100>)
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006fb8:	bf00      	nop
 8006fba:	4b28      	ldr	r3, [pc, #160]	@ (800705c <SystemClock_Config+0x100>)
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc6:	d1f8      	bne.n	8006fba <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8006fc8:	2323      	movs	r3, #35	@ 0x23
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006fcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006fd6:	2340      	movs	r3, #64	@ 0x40
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8006fea:	230c      	movs	r3, #12
 8006fec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8006ffe:	2302      	movs	r3, #2
 8007000:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800700a:	4618      	mov	r0, r3
 800700c:	f003 fd1c 	bl	800aa48 <HAL_RCC_OscConfig>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8007016:	f000 f943 	bl	80072a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800701a:	233f      	movs	r3, #63	@ 0x3f
 800701c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8007036:	2300      	movs	r3, #0
 8007038:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800703a:	1d3b      	adds	r3, r7, #4
 800703c:	2101      	movs	r1, #1
 800703e:	4618      	mov	r0, r3
 8007040:	f004 f95c 	bl	800b2fc <HAL_RCC_ClockConfig>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800704a:	f000 f929 	bl	80072a0 <Error_Handler>
  }
}
 800704e:	bf00      	nop
 8007050:	3770      	adds	r7, #112	@ 0x70
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	58000400 	.word	0x58000400
 800705c:	58024800 	.word	0x58024800

08007060 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8007066:	4b3d      	ldr	r3, [pc, #244]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007068:	4a3d      	ldr	r2, [pc, #244]	@ (8007160 <MX_FDCAN1_Init+0x100>)
 800706a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800706c:	4b3b      	ldr	r3, [pc, #236]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 800706e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007072:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8007074:	4b39      	ldr	r3, [pc, #228]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007076:	2200      	movs	r2, #0
 8007078:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800707a:	4b38      	ldr	r3, [pc, #224]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 800707c:	2201      	movs	r2, #1
 800707e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8007080:	4b36      	ldr	r3, [pc, #216]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007082:	2200      	movs	r2, #0
 8007084:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8007086:	4b35      	ldr	r3, [pc, #212]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007088:	2200      	movs	r2, #0
 800708a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800708c:	4b33      	ldr	r3, [pc, #204]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 800708e:	2201      	movs	r2, #1
 8007090:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8007092:	4b32      	ldr	r3, [pc, #200]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007094:	2207      	movs	r2, #7
 8007096:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8007098:	4b30      	ldr	r3, [pc, #192]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 800709a:	222a      	movs	r2, #42	@ 0x2a
 800709c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 800709e:	4b2f      	ldr	r3, [pc, #188]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070a0:	2207      	movs	r2, #7
 80070a2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 80070a4:	4b2d      	ldr	r3, [pc, #180]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070a6:	220a      	movs	r2, #10
 80070a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80070aa:	4b2c      	ldr	r3, [pc, #176]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 80070b0:	4b2a      	ldr	r3, [pc, #168]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070b2:	2203      	movs	r2, #3
 80070b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80070b6:	4b29      	ldr	r3, [pc, #164]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80070bc:	4b27      	ldr	r3, [pc, #156]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070be:	2200      	movs	r2, #0
 80070c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80070c2:	4b26      	ldr	r3, [pc, #152]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80070c8:	4b24      	ldr	r3, [pc, #144]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80070ce:	4b23      	ldr	r3, [pc, #140]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070d0:	2240      	movs	r2, #64	@ 0x40
 80070d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 80070d4:	4b21      	ldr	r3, [pc, #132]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070d6:	2205      	movs	r2, #5
 80070d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80070da:	4b20      	ldr	r3, [pc, #128]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070dc:	2200      	movs	r2, #0
 80070de:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80070e0:	4b1e      	ldr	r3, [pc, #120]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070e2:	2204      	movs	r2, #4
 80070e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80070e6:	4b1d      	ldr	r3, [pc, #116]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80070ec:	4b1b      	ldr	r3, [pc, #108]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070ee:	2204      	movs	r2, #4
 80070f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80070f2:	4b1a      	ldr	r3, [pc, #104]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80070f8:	4b18      	ldr	r3, [pc, #96]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80070fe:	4b17      	ldr	r3, [pc, #92]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007100:	2201      	movs	r2, #1
 8007102:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007104:	4b15      	ldr	r3, [pc, #84]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007106:	2200      	movs	r2, #0
 8007108:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800710a:	4b14      	ldr	r3, [pc, #80]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 800710c:	2205      	movs	r2, #5
 800710e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8007110:	4812      	ldr	r0, [pc, #72]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007112:	f000 fd63 	bl	8007bdc <HAL_FDCAN_Init>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 800711c:	f000 f8c0 	bl	80072a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8007120:	2300      	movs	r3, #0
 8007122:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007128:	2302      	movs	r3, #2
 800712a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_DISABLE; //FDCAN_FILTER_TO_RXFIFO0
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8007134:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8007138:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800713e:	463b      	mov	r3, r7
 8007140:	4619      	mov	r1, r3
 8007142:	4806      	ldr	r0, [pc, #24]	@ (800715c <MX_FDCAN1_Init+0xfc>)
 8007144:	f000 ff28 	bl	8007f98 <HAL_FDCAN_ConfigFilter>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <MX_FDCAN1_Init+0xf2>
  {
    /* Filter configuration Error */
    Error_Handler();
 800714e:	f000 f8a7 	bl	80072a0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8007152:	bf00      	nop
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	240005d0 	.word	0x240005d0
 8007160:	4000a000 	.word	0x4000a000

08007164 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8007168:	4b07      	ldr	r3, [pc, #28]	@ (8007188 <MX_RNG_Init+0x24>)
 800716a:	4a08      	ldr	r2, [pc, #32]	@ (800718c <MX_RNG_Init+0x28>)
 800716c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800716e:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <MX_RNG_Init+0x24>)
 8007170:	2200      	movs	r2, #0
 8007172:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8007174:	4804      	ldr	r0, [pc, #16]	@ (8007188 <MX_RNG_Init+0x24>)
 8007176:	f005 ff73 	bl	800d060 <HAL_RNG_Init>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8007180:	f000 f88e 	bl	80072a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}
 8007188:	24000670 	.word	0x24000670
 800718c:	48021800 	.word	0x48021800

08007190 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8007194:	4b0e      	ldr	r3, [pc, #56]	@ (80071d0 <MX_TIM14_Init+0x40>)
 8007196:	4a0f      	ldr	r2, [pc, #60]	@ (80071d4 <MX_TIM14_Init+0x44>)
 8007198:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <MX_TIM14_Init+0x40>)
 800719c:	223f      	movs	r2, #63	@ 0x3f
 800719e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071a0:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <MX_TIM14_Init+0x40>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80071a6:	4b0a      	ldr	r3, [pc, #40]	@ (80071d0 <MX_TIM14_Init+0x40>)
 80071a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071ac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071ae:	4b08      	ldr	r3, [pc, #32]	@ (80071d0 <MX_TIM14_Init+0x40>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071b4:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <MX_TIM14_Init+0x40>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80071ba:	4805      	ldr	r0, [pc, #20]	@ (80071d0 <MX_TIM14_Init+0x40>)
 80071bc:	f005 ffb2 	bl	800d124 <HAL_TIM_Base_Init>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80071c6:	f000 f86b 	bl	80072a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	24000684 	.word	0x24000684
 80071d4:	40002000 	.word	0x40002000

080071d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	@ 0x28
 80071dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071de:	f107 0314 	add.w	r3, r7, #20
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	609a      	str	r2, [r3, #8]
 80071ea:	60da      	str	r2, [r3, #12]
 80071ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80071ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007298 <MX_GPIO_Init+0xc0>)
 80071f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071f4:	4a28      	ldr	r2, [pc, #160]	@ (8007298 <MX_GPIO_Init+0xc0>)
 80071f6:	f043 0304 	orr.w	r3, r3, #4
 80071fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071fe:	4b26      	ldr	r3, [pc, #152]	@ (8007298 <MX_GPIO_Init+0xc0>)
 8007200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800720c:	4b22      	ldr	r3, [pc, #136]	@ (8007298 <MX_GPIO_Init+0xc0>)
 800720e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007212:	4a21      	ldr	r2, [pc, #132]	@ (8007298 <MX_GPIO_Init+0xc0>)
 8007214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007218:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800721c:	4b1e      	ldr	r3, [pc, #120]	@ (8007298 <MX_GPIO_Init+0xc0>)
 800721e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800722a:	4b1b      	ldr	r3, [pc, #108]	@ (8007298 <MX_GPIO_Init+0xc0>)
 800722c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007230:	4a19      	ldr	r2, [pc, #100]	@ (8007298 <MX_GPIO_Init+0xc0>)
 8007232:	f043 0308 	orr.w	r3, r3, #8
 8007236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800723a:	4b17      	ldr	r3, [pc, #92]	@ (8007298 <MX_GPIO_Init+0xc0>)
 800723c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007248:	4b13      	ldr	r3, [pc, #76]	@ (8007298 <MX_GPIO_Init+0xc0>)
 800724a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800724e:	4a12      	ldr	r2, [pc, #72]	@ (8007298 <MX_GPIO_Init+0xc0>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007258:	4b0f      	ldr	r3, [pc, #60]	@ (8007298 <MX_GPIO_Init+0xc0>)
 800725a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8007266:	2200      	movs	r2, #0
 8007268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800726c:	480b      	ldr	r0, [pc, #44]	@ (800729c <MX_GPIO_Init+0xc4>)
 800726e:	f002 f8cf 	bl	8009410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007278:	2301      	movs	r3, #1
 800727a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007280:	2300      	movs	r3, #0
 8007282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007284:	f107 0314 	add.w	r3, r7, #20
 8007288:	4619      	mov	r1, r3
 800728a:	4804      	ldr	r0, [pc, #16]	@ (800729c <MX_GPIO_Init+0xc4>)
 800728c:	f001 ff10 	bl	80090b0 <HAL_GPIO_Init>

}
 8007290:	bf00      	nop
 8007292:	3728      	adds	r7, #40	@ 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	58024400 	.word	0x58024400
 800729c:	58020c00 	.word	0x58020c00

080072a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80072a4:	b672      	cpsid	i
}
 80072a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80072a8:	bf00      	nop
 80072aa:	e7fd      	b.n	80072a8 <Error_Handler+0x8>

080072ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072b2:	4b0a      	ldr	r3, [pc, #40]	@ (80072dc <HAL_MspInit+0x30>)
 80072b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072b8:	4a08      	ldr	r2, [pc, #32]	@ (80072dc <HAL_MspInit+0x30>)
 80072ba:	f043 0302 	orr.w	r3, r3, #2
 80072be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80072c2:	4b06      	ldr	r3, [pc, #24]	@ (80072dc <HAL_MspInit+0x30>)
 80072c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	607b      	str	r3, [r7, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	58024400 	.word	0x58024400

080072e0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b0ba      	sub	sp, #232	@ 0xe8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	609a      	str	r2, [r3, #8]
 80072f4:	60da      	str	r2, [r3, #12]
 80072f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072f8:	f107 0310 	add.w	r3, r7, #16
 80072fc:	22c0      	movs	r2, #192	@ 0xc0
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f00a fecf 	bl	80120a4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a2f      	ldr	r2, [pc, #188]	@ (80073c8 <HAL_FDCAN_MspInit+0xe8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d156      	bne.n	80073be <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8007310:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800731c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007324:	f107 0310 	add.w	r3, r7, #16
 8007328:	4618      	mov	r0, r3
 800732a:	f004 fb47 	bl	800b9bc <HAL_RCCEx_PeriphCLKConfig>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8007334:	f7ff ffb4 	bl	80072a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8007338:	4b24      	ldr	r3, [pc, #144]	@ (80073cc <HAL_FDCAN_MspInit+0xec>)
 800733a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800733e:	4a23      	ldr	r2, [pc, #140]	@ (80073cc <HAL_FDCAN_MspInit+0xec>)
 8007340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007344:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8007348:	4b20      	ldr	r3, [pc, #128]	@ (80073cc <HAL_FDCAN_MspInit+0xec>)
 800734a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007356:	4b1d      	ldr	r3, [pc, #116]	@ (80073cc <HAL_FDCAN_MspInit+0xec>)
 8007358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800735c:	4a1b      	ldr	r2, [pc, #108]	@ (80073cc <HAL_FDCAN_MspInit+0xec>)
 800735e:	f043 0308 	orr.w	r3, r3, #8
 8007362:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007366:	4b19      	ldr	r3, [pc, #100]	@ (80073cc <HAL_FDCAN_MspInit+0xec>)
 8007368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	60bb      	str	r3, [r7, #8]
 8007372:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007374:	2303      	movs	r3, #3
 8007376:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737a:	2302      	movs	r3, #2
 800737c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007380:	2300      	movs	r3, #0
 8007382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007386:	2300      	movs	r3, #0
 8007388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800738c:	2309      	movs	r3, #9
 800738e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007392:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007396:	4619      	mov	r1, r3
 8007398:	480d      	ldr	r0, [pc, #52]	@ (80073d0 <HAL_FDCAN_MspInit+0xf0>)
 800739a:	f001 fe89 	bl	80090b0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800739e:	2200      	movs	r2, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	2013      	movs	r0, #19
 80073a4:	f000 fbe5 	bl	8007b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80073a8:	2013      	movs	r0, #19
 80073aa:	f000 fbfc 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80073ae:	2200      	movs	r2, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	2015      	movs	r0, #21
 80073b4:	f000 fbdd 	bl	8007b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80073b8:	2015      	movs	r0, #21
 80073ba:	f000 fbf4 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80073be:	bf00      	nop
 80073c0:	37e8      	adds	r7, #232	@ 0xe8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	4000a000 	.word	0x4000a000
 80073cc:	58024400 	.word	0x58024400
 80073d0:	58020c00 	.word	0x58020c00

080073d4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b0b4      	sub	sp, #208	@ 0xd0
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	22c0      	movs	r2, #192	@ 0xc0
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f00a fe5d 	bl	80120a4 <memset>
  if(hrng->Instance==RNG)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a14      	ldr	r2, [pc, #80]	@ (8007440 <HAL_RNG_MspInit+0x6c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d121      	bne.n	8007438 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80073f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007400:	2300      	movs	r3, #0
 8007402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007406:	f107 0310 	add.w	r3, r7, #16
 800740a:	4618      	mov	r0, r3
 800740c:	f004 fad6 	bl	800b9bc <HAL_RCCEx_PeriphCLKConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8007416:	f7ff ff43 	bl	80072a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800741a:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <HAL_RNG_MspInit+0x70>)
 800741c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007420:	4a08      	ldr	r2, [pc, #32]	@ (8007444 <HAL_RNG_MspInit+0x70>)
 8007422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007426:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_RNG_MspInit+0x70>)
 800742c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8007438:	bf00      	nop
 800743a:	37d0      	adds	r7, #208	@ 0xd0
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	48021800 	.word	0x48021800
 8007444:	58024400 	.word	0x58024400

08007448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a0e      	ldr	r2, [pc, #56]	@ (8007490 <HAL_TIM_Base_MspInit+0x48>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d116      	bne.n	8007488 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800745a:	4b0e      	ldr	r3, [pc, #56]	@ (8007494 <HAL_TIM_Base_MspInit+0x4c>)
 800745c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007460:	4a0c      	ldr	r2, [pc, #48]	@ (8007494 <HAL_TIM_Base_MspInit+0x4c>)
 8007462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007466:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800746a:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <HAL_TIM_Base_MspInit+0x4c>)
 800746c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	202d      	movs	r0, #45	@ 0x2d
 800747e:	f000 fb78 	bl	8007b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007482:	202d      	movs	r0, #45	@ 0x2d
 8007484:	f000 fb8f 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8007488:	bf00      	nop
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40002000 	.word	0x40002000
 8007494:	58024400 	.word	0x58024400

08007498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <NMI_Handler+0x4>

080074a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <HardFault_Handler+0x4>

080074a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074ac:	bf00      	nop
 80074ae:	e7fd      	b.n	80074ac <MemManage_Handler+0x4>

080074b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <BusFault_Handler+0x4>

080074b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <UsageFault_Handler+0x4>

080074c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074c4:	bf00      	nop
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074ce:	b480      	push	{r7}
 80074d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074e0:	bf00      	nop
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074ee:	f000 fa15 	bl	800791c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80074fc:	4802      	ldr	r0, [pc, #8]	@ (8007508 <FDCAN1_IT0_IRQHandler+0x10>)
 80074fe:	f001 f8d5 	bl	80086ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	240005d0 	.word	0x240005d0

0800750c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007510:	4802      	ldr	r0, [pc, #8]	@ (800751c <FDCAN1_IT1_IRQHandler+0x10>)
 8007512:	f001 f8cb 	bl	80086ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	240005d0 	.word	0x240005d0

08007520 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007524:	4802      	ldr	r0, [pc, #8]	@ (8007530 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8007526:	f005 fecd 	bl	800d2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800752a:	bf00      	nop
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	24000684 	.word	0x24000684

08007534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007538:	4802      	ldr	r0, [pc, #8]	@ (8007544 <OTG_FS_IRQHandler+0x10>)
 800753a:	f002 f8db 	bl	80096f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800753e:	bf00      	nop
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	24001c20 	.word	0x24001c20

08007548 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return 1;
 800754c:	2301      	movs	r3, #1
}
 800754e:	4618      	mov	r0, r3
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <_kill>:

int _kill(int pid, int sig)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007562:	f00a fe59 	bl	8012218 <__errno>
 8007566:	4603      	mov	r3, r0
 8007568:	2216      	movs	r2, #22
 800756a:	601a      	str	r2, [r3, #0]
  return -1;
 800756c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <_exit>:

void _exit (int status)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007580:	f04f 31ff 	mov.w	r1, #4294967295
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ffe7 	bl	8007558 <_kill>
  while (1) {}    /* Make sure we hang here */
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <_exit+0x12>

0800758e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800759a:	2300      	movs	r3, #0
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e00a      	b.n	80075b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80075a0:	f3af 8000 	nop.w
 80075a4:	4601      	mov	r1, r0
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	60ba      	str	r2, [r7, #8]
 80075ac:	b2ca      	uxtb	r2, r1
 80075ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	3301      	adds	r3, #1
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	dbf0      	blt.n	80075a0 <_read+0x12>
  }

  return len;
 80075be:	687b      	ldr	r3, [r7, #4]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e009      	b.n	80075ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	60ba      	str	r2, [r7, #8]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3301      	adds	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	dbf1      	blt.n	80075da <_write+0x12>
  }
  return len;
 80075f6:	687b      	ldr	r3, [r7, #4]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <_close>:

int _close(int file)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007628:	605a      	str	r2, [r3, #4]
  return 0;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <_isatty>:

int _isatty(int file)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007640:	2301      	movs	r3, #1
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007670:	4a14      	ldr	r2, [pc, #80]	@ (80076c4 <_sbrk+0x5c>)
 8007672:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <_sbrk+0x60>)
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800767c:	4b13      	ldr	r3, [pc, #76]	@ (80076cc <_sbrk+0x64>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007684:	4b11      	ldr	r3, [pc, #68]	@ (80076cc <_sbrk+0x64>)
 8007686:	4a12      	ldr	r2, [pc, #72]	@ (80076d0 <_sbrk+0x68>)
 8007688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800768a:	4b10      	ldr	r3, [pc, #64]	@ (80076cc <_sbrk+0x64>)
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	429a      	cmp	r2, r3
 8007696:	d207      	bcs.n	80076a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007698:	f00a fdbe 	bl	8012218 <__errno>
 800769c:	4603      	mov	r3, r0
 800769e:	220c      	movs	r2, #12
 80076a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295
 80076a6:	e009      	b.n	80076bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076a8:	4b08      	ldr	r3, [pc, #32]	@ (80076cc <_sbrk+0x64>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076ae:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <_sbrk+0x64>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	4a05      	ldr	r2, [pc, #20]	@ (80076cc <_sbrk+0x64>)
 80076b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	24060000 	.word	0x24060000
 80076c8:	00000400 	.word	0x00000400
 80076cc:	24000738 	.word	0x24000738
 80076d0:	24002498 	.word	0x24002498

080076d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80076d8:	4b37      	ldr	r3, [pc, #220]	@ (80077b8 <SystemInit+0xe4>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076de:	4a36      	ldr	r2, [pc, #216]	@ (80077b8 <SystemInit+0xe4>)
 80076e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80076e8:	4b34      	ldr	r3, [pc, #208]	@ (80077bc <SystemInit+0xe8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	2b06      	cmp	r3, #6
 80076f2:	d807      	bhi.n	8007704 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80076f4:	4b31      	ldr	r3, [pc, #196]	@ (80077bc <SystemInit+0xe8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 030f 	bic.w	r3, r3, #15
 80076fc:	4a2f      	ldr	r2, [pc, #188]	@ (80077bc <SystemInit+0xe8>)
 80076fe:	f043 0307 	orr.w	r3, r3, #7
 8007702:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007704:	4b2e      	ldr	r3, [pc, #184]	@ (80077c0 <SystemInit+0xec>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a2d      	ldr	r2, [pc, #180]	@ (80077c0 <SystemInit+0xec>)
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007710:	4b2b      	ldr	r3, [pc, #172]	@ (80077c0 <SystemInit+0xec>)
 8007712:	2200      	movs	r2, #0
 8007714:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007716:	4b2a      	ldr	r3, [pc, #168]	@ (80077c0 <SystemInit+0xec>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4929      	ldr	r1, [pc, #164]	@ (80077c0 <SystemInit+0xec>)
 800771c:	4b29      	ldr	r3, [pc, #164]	@ (80077c4 <SystemInit+0xf0>)
 800771e:	4013      	ands	r3, r2
 8007720:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007722:	4b26      	ldr	r3, [pc, #152]	@ (80077bc <SystemInit+0xe8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800772e:	4b23      	ldr	r3, [pc, #140]	@ (80077bc <SystemInit+0xe8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f023 030f 	bic.w	r3, r3, #15
 8007736:	4a21      	ldr	r2, [pc, #132]	@ (80077bc <SystemInit+0xe8>)
 8007738:	f043 0307 	orr.w	r3, r3, #7
 800773c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800773e:	4b20      	ldr	r3, [pc, #128]	@ (80077c0 <SystemInit+0xec>)
 8007740:	2200      	movs	r2, #0
 8007742:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007744:	4b1e      	ldr	r3, [pc, #120]	@ (80077c0 <SystemInit+0xec>)
 8007746:	2200      	movs	r2, #0
 8007748:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800774a:	4b1d      	ldr	r3, [pc, #116]	@ (80077c0 <SystemInit+0xec>)
 800774c:	2200      	movs	r2, #0
 800774e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007750:	4b1b      	ldr	r3, [pc, #108]	@ (80077c0 <SystemInit+0xec>)
 8007752:	4a1d      	ldr	r2, [pc, #116]	@ (80077c8 <SystemInit+0xf4>)
 8007754:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007756:	4b1a      	ldr	r3, [pc, #104]	@ (80077c0 <SystemInit+0xec>)
 8007758:	4a1c      	ldr	r2, [pc, #112]	@ (80077cc <SystemInit+0xf8>)
 800775a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800775c:	4b18      	ldr	r3, [pc, #96]	@ (80077c0 <SystemInit+0xec>)
 800775e:	4a1c      	ldr	r2, [pc, #112]	@ (80077d0 <SystemInit+0xfc>)
 8007760:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007762:	4b17      	ldr	r3, [pc, #92]	@ (80077c0 <SystemInit+0xec>)
 8007764:	2200      	movs	r2, #0
 8007766:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007768:	4b15      	ldr	r3, [pc, #84]	@ (80077c0 <SystemInit+0xec>)
 800776a:	4a19      	ldr	r2, [pc, #100]	@ (80077d0 <SystemInit+0xfc>)
 800776c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800776e:	4b14      	ldr	r3, [pc, #80]	@ (80077c0 <SystemInit+0xec>)
 8007770:	2200      	movs	r2, #0
 8007772:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007774:	4b12      	ldr	r3, [pc, #72]	@ (80077c0 <SystemInit+0xec>)
 8007776:	4a16      	ldr	r2, [pc, #88]	@ (80077d0 <SystemInit+0xfc>)
 8007778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800777a:	4b11      	ldr	r3, [pc, #68]	@ (80077c0 <SystemInit+0xec>)
 800777c:	2200      	movs	r2, #0
 800777e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007780:	4b0f      	ldr	r3, [pc, #60]	@ (80077c0 <SystemInit+0xec>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a0e      	ldr	r2, [pc, #56]	@ (80077c0 <SystemInit+0xec>)
 8007786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800778a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800778c:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <SystemInit+0xec>)
 800778e:	2200      	movs	r2, #0
 8007790:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007792:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <SystemInit+0x100>)
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <SystemInit+0x104>)
 8007798:	4013      	ands	r3, r2
 800779a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800779e:	d202      	bcs.n	80077a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80077a0:	4b0e      	ldr	r3, [pc, #56]	@ (80077dc <SystemInit+0x108>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80077a6:	4b0e      	ldr	r3, [pc, #56]	@ (80077e0 <SystemInit+0x10c>)
 80077a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80077ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80077ae:	bf00      	nop
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	e000ed00 	.word	0xe000ed00
 80077bc:	52002000 	.word	0x52002000
 80077c0:	58024400 	.word	0x58024400
 80077c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80077c8:	02020200 	.word	0x02020200
 80077cc:	01ff0000 	.word	0x01ff0000
 80077d0:	01010280 	.word	0x01010280
 80077d4:	5c001000 	.word	0x5c001000
 80077d8:	ffff0000 	.word	0xffff0000
 80077dc:	51008108 	.word	0x51008108
 80077e0:	52004000 	.word	0x52004000

080077e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80077e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800781c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80077e8:	f7ff ff74 	bl	80076d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80077ec:	480c      	ldr	r0, [pc, #48]	@ (8007820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80077ee:	490d      	ldr	r1, [pc, #52]	@ (8007824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80077f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80077f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80077f4:	e002      	b.n	80077fc <LoopCopyDataInit>

080077f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80077f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80077f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80077fa:	3304      	adds	r3, #4

080077fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80077fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80077fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007800:	d3f9      	bcc.n	80077f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007802:	4a0a      	ldr	r2, [pc, #40]	@ (800782c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007804:	4c0a      	ldr	r4, [pc, #40]	@ (8007830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007808:	e001      	b.n	800780e <LoopFillZerobss>

0800780a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800780a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800780c:	3204      	adds	r2, #4

0800780e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800780e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007810:	d3fb      	bcc.n	800780a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007812:	f00a fd07 	bl	8012224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007816:	f7ff fb13 	bl	8006e40 <main>
  bx  lr
 800781a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800781c:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 8007820:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007824:	2400052c 	.word	0x2400052c
  ldr r2, =_sidata
 8007828:	08013a74 	.word	0x08013a74
  ldr r2, =_sbss
 800782c:	2400052c 	.word	0x2400052c
  ldr r4, =_ebss
 8007830:	24002498 	.word	0x24002498

08007834 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007834:	e7fe      	b.n	8007834 <ADC3_IRQHandler>
	...

08007838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800783e:	2003      	movs	r0, #3
 8007840:	f000 f98c 	bl	8007b5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007844:	f003 ff10 	bl	800b668 <HAL_RCC_GetSysClockFreq>
 8007848:	4602      	mov	r2, r0
 800784a:	4b15      	ldr	r3, [pc, #84]	@ (80078a0 <HAL_Init+0x68>)
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	0a1b      	lsrs	r3, r3, #8
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	4913      	ldr	r1, [pc, #76]	@ (80078a4 <HAL_Init+0x6c>)
 8007856:	5ccb      	ldrb	r3, [r1, r3]
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
 8007860:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007862:	4b0f      	ldr	r3, [pc, #60]	@ (80078a0 <HAL_Init+0x68>)
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	f003 030f 	and.w	r3, r3, #15
 800786a:	4a0e      	ldr	r2, [pc, #56]	@ (80078a4 <HAL_Init+0x6c>)
 800786c:	5cd3      	ldrb	r3, [r2, r3]
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
 8007878:	4a0b      	ldr	r2, [pc, #44]	@ (80078a8 <HAL_Init+0x70>)
 800787a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800787c:	4a0b      	ldr	r2, [pc, #44]	@ (80078ac <HAL_Init+0x74>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007882:	200f      	movs	r0, #15
 8007884:	f000 f814 	bl	80078b0 <HAL_InitTick>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e002      	b.n	8007898 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007892:	f7ff fd0b 	bl	80072ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	58024400 	.word	0x58024400
 80078a4:	08013860 	.word	0x08013860
 80078a8:	240003d4 	.word	0x240003d4
 80078ac:	240003d0 	.word	0x240003d0

080078b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80078b8:	4b15      	ldr	r3, [pc, #84]	@ (8007910 <HAL_InitTick+0x60>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e021      	b.n	8007908 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80078c4:	4b13      	ldr	r3, [pc, #76]	@ (8007914 <HAL_InitTick+0x64>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <HAL_InitTick+0x60>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80078d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f971 	bl	8007bc2 <HAL_SYSTICK_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e00e      	b.n	8007908 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b0f      	cmp	r3, #15
 80078ee:	d80a      	bhi.n	8007906 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078f0:	2200      	movs	r2, #0
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	f000 f93b 	bl	8007b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078fc:	4a06      	ldr	r2, [pc, #24]	@ (8007918 <HAL_InitTick+0x68>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	240003dc 	.word	0x240003dc
 8007914:	240003d0 	.word	0x240003d0
 8007918:	240003d8 	.word	0x240003d8

0800791c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007920:	4b06      	ldr	r3, [pc, #24]	@ (800793c <HAL_IncTick+0x20>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <HAL_IncTick+0x24>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4413      	add	r3, r2
 800792c:	4a04      	ldr	r2, [pc, #16]	@ (8007940 <HAL_IncTick+0x24>)
 800792e:	6013      	str	r3, [r2, #0]
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	240003dc 	.word	0x240003dc
 8007940:	2400073c 	.word	0x2400073c

08007944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  return uwTick;
 8007948:	4b03      	ldr	r3, [pc, #12]	@ (8007958 <HAL_GetTick+0x14>)
 800794a:	681b      	ldr	r3, [r3, #0]
}
 800794c:	4618      	mov	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	2400073c 	.word	0x2400073c

0800795c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007964:	f7ff ffee 	bl	8007944 <HAL_GetTick>
 8007968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d005      	beq.n	8007982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007976:	4b0a      	ldr	r3, [pc, #40]	@ (80079a0 <HAL_Delay+0x44>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007982:	bf00      	nop
 8007984:	f7ff ffde 	bl	8007944 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	429a      	cmp	r2, r3
 8007992:	d8f7      	bhi.n	8007984 <HAL_Delay+0x28>
  {
  }
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	240003dc 	.word	0x240003dc

080079a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80079a8:	4b03      	ldr	r3, [pc, #12]	@ (80079b8 <HAL_GetREVID+0x14>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	0c1b      	lsrs	r3, r3, #16
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	5c001000 	.word	0x5c001000

080079bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079cc:	4b0b      	ldr	r3, [pc, #44]	@ (80079fc <__NVIC_SetPriorityGrouping+0x40>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80079d8:	4013      	ands	r3, r2
 80079da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80079e4:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <__NVIC_SetPriorityGrouping+0x44>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079ea:	4a04      	ldr	r2, [pc, #16]	@ (80079fc <__NVIC_SetPriorityGrouping+0x40>)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	60d3      	str	r3, [r2, #12]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	e000ed00 	.word	0xe000ed00
 8007a00:	05fa0000 	.word	0x05fa0000

08007a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a08:	4b04      	ldr	r3, [pc, #16]	@ (8007a1c <__NVIC_GetPriorityGrouping+0x18>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	0a1b      	lsrs	r3, r3, #8
 8007a0e:	f003 0307 	and.w	r3, r3, #7
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	e000ed00 	.word	0xe000ed00

08007a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	db0b      	blt.n	8007a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	f003 021f 	and.w	r2, r3, #31
 8007a38:	4907      	ldr	r1, [pc, #28]	@ (8007a58 <__NVIC_EnableIRQ+0x38>)
 8007a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	2001      	movs	r0, #1
 8007a42:	fa00 f202 	lsl.w	r2, r0, r2
 8007a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	e000e100 	.word	0xe000e100

08007a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	db0a      	blt.n	8007a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	490c      	ldr	r1, [pc, #48]	@ (8007aa8 <__NVIC_SetPriority+0x4c>)
 8007a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a7a:	0112      	lsls	r2, r2, #4
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	440b      	add	r3, r1
 8007a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a84:	e00a      	b.n	8007a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	4908      	ldr	r1, [pc, #32]	@ (8007aac <__NVIC_SetPriority+0x50>)
 8007a8c:	88fb      	ldrh	r3, [r7, #6]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	3b04      	subs	r3, #4
 8007a94:	0112      	lsls	r2, r2, #4
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	440b      	add	r3, r1
 8007a9a:	761a      	strb	r2, [r3, #24]
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	e000e100 	.word	0xe000e100
 8007aac:	e000ed00 	.word	0xe000ed00

08007ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b089      	sub	sp, #36	@ 0x24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f1c3 0307 	rsb	r3, r3, #7
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	bf28      	it	cs
 8007ace:	2304      	movcs	r3, #4
 8007ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d902      	bls.n	8007ae0 <NVIC_EncodePriority+0x30>
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3b03      	subs	r3, #3
 8007ade:	e000      	b.n	8007ae2 <NVIC_EncodePriority+0x32>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	43da      	mvns	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	401a      	ands	r2, r3
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007af8:	f04f 31ff 	mov.w	r1, #4294967295
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	fa01 f303 	lsl.w	r3, r1, r3
 8007b02:	43d9      	mvns	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b08:	4313      	orrs	r3, r2
         );
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3724      	adds	r7, #36	@ 0x24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b28:	d301      	bcc.n	8007b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e00f      	b.n	8007b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b58 <SysTick_Config+0x40>)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b36:	210f      	movs	r1, #15
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	f7ff ff8e 	bl	8007a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b40:	4b05      	ldr	r3, [pc, #20]	@ (8007b58 <SysTick_Config+0x40>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b46:	4b04      	ldr	r3, [pc, #16]	@ (8007b58 <SysTick_Config+0x40>)
 8007b48:	2207      	movs	r2, #7
 8007b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	e000e010 	.word	0xe000e010

08007b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff ff29 	bl	80079bc <__NVIC_SetPriorityGrouping>
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b086      	sub	sp, #24
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	4603      	mov	r3, r0
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b80:	f7ff ff40 	bl	8007a04 <__NVIC_GetPriorityGrouping>
 8007b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	f7ff ff90 	bl	8007ab0 <NVIC_EncodePriority>
 8007b90:	4602      	mov	r2, r0
 8007b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff5f 	bl	8007a5c <__NVIC_SetPriority>
}
 8007b9e:	bf00      	nop
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	4603      	mov	r3, r0
 8007bae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff ff33 	bl	8007a20 <__NVIC_EnableIRQ>
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff ffa4 	bl	8007b18 <SysTick_Config>
 8007bd0:	4603      	mov	r3, r0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b098      	sub	sp, #96	@ 0x60
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007be4:	4a84      	ldr	r2, [pc, #528]	@ (8007df8 <HAL_FDCAN_Init+0x21c>)
 8007be6:	f107 030c 	add.w	r3, r7, #12
 8007bea:	4611      	mov	r1, r2
 8007bec:	224c      	movs	r2, #76	@ 0x4c
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f00a fb3f 	bl	8012272 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e1c6      	b.n	8007f8c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a7e      	ldr	r2, [pc, #504]	@ (8007dfc <HAL_FDCAN_Init+0x220>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d106      	bne.n	8007c16 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007c10:	461a      	mov	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff fb58 	bl	80072e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0210 	bic.w	r2, r2, #16
 8007c3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c40:	f7ff fe80 	bl	8007944 <HAL_GetTick>
 8007c44:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007c46:	e014      	b.n	8007c72 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007c48:	f7ff fe7c 	bl	8007944 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	2b0a      	cmp	r3, #10
 8007c54:	d90d      	bls.n	8007c72 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5c:	f043 0201 	orr.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2203      	movs	r2, #3
 8007c6a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e18c      	b.n	8007f8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d0e3      	beq.n	8007c48 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c90:	f7ff fe58 	bl	8007944 <HAL_GetTick>
 8007c94:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007c96:	e014      	b.n	8007cc2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007c98:	f7ff fe54 	bl	8007944 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b0a      	cmp	r3, #10
 8007ca4:	d90d      	bls.n	8007cc2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cac:	f043 0201 	orr.w	r2, r3, #1
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e164      	b.n	8007f8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0e3      	beq.n	8007c98 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0202 	orr.w	r2, r2, #2
 8007cde:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7c1b      	ldrb	r3, [r3, #16]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d108      	bne.n	8007cfa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf6:	619a      	str	r2, [r3, #24]
 8007cf8:	e007      	b.n	8007d0a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d08:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7c5b      	ldrb	r3, [r3, #17]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d108      	bne.n	8007d24 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d20:	619a      	str	r2, [r3, #24]
 8007d22:	e007      	b.n	8007d34 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d32:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7c9b      	ldrb	r3, [r3, #18]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d108      	bne.n	8007d4e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d4a:	619a      	str	r2, [r3, #24]
 8007d4c:	e007      	b.n	8007d5e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	699a      	ldr	r2, [r3, #24]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d5c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007d82:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0210 	bic.w	r2, r2, #16
 8007d92:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d108      	bne.n	8007dae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0204 	orr.w	r2, r2, #4
 8007daa:	619a      	str	r2, [r3, #24]
 8007dac:	e030      	b.n	8007e10 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d02c      	beq.n	8007e10 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d020      	beq.n	8007e00 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007dcc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0210 	orr.w	r2, r2, #16
 8007ddc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d114      	bne.n	8007e10 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0220 	orr.w	r2, r2, #32
 8007df4:	619a      	str	r2, [r3, #24]
 8007df6:	e00b      	b.n	8007e10 <HAL_FDCAN_Init+0x234>
 8007df8:	080130f0 	.word	0x080130f0
 8007dfc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0220 	orr.w	r2, r2, #32
 8007e0e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e20:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007e28:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007e38:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e3a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e44:	d115      	bne.n	8007e72 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e50:	3b01      	subs	r3, #1
 8007e52:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e54:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007e5e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e66:	3b01      	subs	r3, #1
 8007e68:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007e6e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e70:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e98:	4413      	add	r3, r2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d011      	beq.n	8007ec2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007ea6:	f023 0107 	bic.w	r1, r3, #7
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	3360      	adds	r3, #96	@ 0x60
 8007eb2:	443b      	add	r3, r7
 8007eb4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d011      	beq.n	8007eee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ed2:	f023 0107 	bic.w	r1, r3, #7
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	3360      	adds	r3, #96	@ 0x60
 8007ede:	443b      	add	r3, r7
 8007ee0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d012      	beq.n	8007f1c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007efe:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	3360      	adds	r3, #96	@ 0x60
 8007f0a:	443b      	add	r3, r7
 8007f0c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007f10:	011a      	lsls	r2, r3, #4
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d012      	beq.n	8007f4a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f2c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	3360      	adds	r3, #96	@ 0x60
 8007f38:	443b      	add	r3, r7
 8007f3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007f3e:	021a      	lsls	r2, r3, #8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a11      	ldr	r2, [pc, #68]	@ (8007f94 <HAL_FDCAN_Init+0x3b8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d107      	bne.n	8007f64 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f022 0203 	bic.w	r2, r2, #3
 8007f62:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fe93 	bl	8008ca8 <FDCAN_CalcultateRamBlockAddresses>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007f88:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3760      	adds	r7, #96	@ 0x60
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	4000a000 	.word	0x4000a000

08007f98 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007fa8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d002      	beq.n	8007fb6 <HAL_FDCAN_ConfigFilter+0x1e>
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d157      	bne.n	8008066 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d12b      	bne.n	8008016 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	2b07      	cmp	r3, #7
 8007fc4:	d10d      	bne.n	8007fe2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007fd2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007fd8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007fda:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	e00e      	b.n	8008000 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007fee:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007ff6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e025      	b.n	8008062 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	075a      	lsls	r2, r3, #29
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b07      	cmp	r3, #7
 800802a:	d103      	bne.n	8008034 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	e006      	b.n	8008042 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	079a      	lsls	r2, r3, #30
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4413      	add	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3304      	adds	r3, #4
 800805a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	e008      	b.n	8008078 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800806c:	f043 0202 	orr.w	r2, r3, #2
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
  }
}
 8008078:	4618      	mov	r0, r3
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b01      	cmp	r3, #1
 800809c:	d110      	bne.n	80080c0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80080a6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80080ac:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80080b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e008      	b.n	80080d2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080c6:	f043 0204 	orr.w	r2, r3, #4
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
  }
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d111      	bne.n	8008116 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2202      	movs	r2, #2
 80080f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 0201 	bic.w	r2, r2, #1
 8008108:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	e008      	b.n	8008128 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800811c:	f043 0204 	orr.w	r2, r3, #4
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
  }
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d15b      	bne.n	8008204 <HAL_FDCAN_Stop+0xd0>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800815c:	e013      	b.n	8008186 <HAL_FDCAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b32      	cmp	r3, #50	@ 0x32
 8008162:	d90d      	bls.n	8008180 <HAL_FDCAN_Stop+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800816a:	f043 0201 	orr.w	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2203      	movs	r2, #3
 8008178:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e04a      	b.n	8008216 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0e4      	beq.n	800815e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0210 	bic.w	r2, r2, #16
 80081a6:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80081a8:	e013      	b.n	80081d2 <HAL_FDCAN_Stop+0x9e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b32      	cmp	r3, #50	@ 0x32
 80081ae:	d90d      	bls.n	80081cc <HAL_FDCAN_Stop+0x98>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081b6:	f043 0201 	orr.w	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2203      	movs	r2, #3
 80081c4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

        return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e024      	b.n	8008216 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d0e4      	beq.n	80081aa <HAL_FDCAN_Stop+0x76>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0202 	orr.w	r2, r2, #2
 80081ee:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Return function status */
    return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e008      	b.n	8008216 <HAL_FDCAN_Stop+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800820a:	f043 0208 	orr.w	r2, r3, #8
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
  }
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b086      	sub	sp, #24
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d141      	bne.n	80082be <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008242:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008250:	f043 0220 	orr.w	r2, r3, #32
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e038      	b.n	80082d0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008274:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e026      	b.n	80082d0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fe8b 	bl	8008fb4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2101      	movs	r1, #1
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	fa01 f202 	lsl.w	r2, r1, r2
 80082aa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80082ae:	2201      	movs	r2, #1
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	409a      	lsls	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e008      	b.n	80082d0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082c4:	f043 0208 	orr.w	r2, r3, #8
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
  }
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80082d8:	b480      	push	{r7}
 80082da:	b08b      	sub	sp, #44	@ 0x2c
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80082f0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80082f2:	7efb      	ldrb	r3, [r7, #27]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f040 813b 	bne.w	8008570 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b40      	cmp	r3, #64	@ 0x40
 80082fe:	d145      	bne.n	800838c <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008308:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d109      	bne.n	8008324 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008316:	f043 0220 	orr.w	r2, r3, #32
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e12e      	b.n	8008582 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800832c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008330:	2b00      	cmp	r3, #0
 8008332:	d109      	bne.n	8008348 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800833a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e11c      	b.n	8008582 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008358:	d103      	bne.n	8008362 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800836a:	0a1b      	lsrs	r3, r3, #8
 800836c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837e:	69f9      	ldr	r1, [r7, #28]
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
 800838a:	e061      	b.n	8008450 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b41      	cmp	r3, #65	@ 0x41
 8008390:	d145      	bne.n	800841e <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800839a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083a8:	f043 0220 	orr.w	r2, r3, #32
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e0e5      	b.n	8008582 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e0d3      	b.n	8008582 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083ea:	d103      	bne.n	80083f4 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083fc:	0a1b      	lsrs	r3, r3, #8
 80083fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008410:	69f9      	ldr	r1, [r7, #28]
 8008412:	fb01 f303 	mul.w	r3, r1, r3
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	627b      	str	r3, [r7, #36]	@ 0x24
 800841c:	e018      	b.n	8008450 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	429a      	cmp	r2, r3
 8008426:	d309      	bcc.n	800843c <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800842e:	f043 0220 	orr.w	r2, r3, #32
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e0a2      	b.n	8008582 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	fb01 f303 	mul.w	r3, r1, r3
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d107      	bne.n	8008474 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	0c9b      	lsrs	r3, r3, #18
 800846a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e005      	b.n	8008480 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849a:	3304      	adds	r3, #4
 800849c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	0e1b      	lsrs	r3, r3, #24
 80084d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	0fda      	lsrs	r2, r3, #31
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	3304      	adds	r3, #4
 80084e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80084ee:	2300      	movs	r3, #0
 80084f0:	623b      	str	r3, [r7, #32]
 80084f2:	e00a      	b.n	800850a <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	441a      	add	r2, r3
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	440b      	add	r3, r1
 8008500:	7812      	ldrb	r2, [r2, #0]
 8008502:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	3301      	adds	r3, #1
 8008508:	623b      	str	r3, [r7, #32]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	0c1b      	lsrs	r3, r3, #16
 8008510:	4a1f      	ldr	r2, [pc, #124]	@ (8008590 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8008512:	5cd3      	ldrb	r3, [r2, r3]
 8008514:	461a      	mov	r2, r3
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	4293      	cmp	r3, r2
 800851a:	d3eb      	bcc.n	80084f4 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b40      	cmp	r3, #64	@ 0x40
 8008520:	d105      	bne.n	800852e <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800852c:	e01e      	b.n	800856c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b41      	cmp	r3, #65	@ 0x41
 8008532:	d105      	bne.n	8008540 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800853e:	e015      	b.n	800856c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b1f      	cmp	r3, #31
 8008544:	d808      	bhi.n	8008558 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2101      	movs	r1, #1
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	fa01 f202 	lsl.w	r2, r1, r2
 8008552:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8008556:	e009      	b.n	800856c <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f003 021f 	and.w	r2, r3, #31
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2101      	movs	r1, #1
 8008564:	fa01 f202 	lsl.w	r2, r1, r2
 8008568:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	e008      	b.n	8008582 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008576:	f043 0208 	orr.w	r2, r3, #8
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	372c      	adds	r7, #44	@ 0x2c
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	08013870 	.word	0x08013870

08008594 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80085a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80085ca:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d002      	beq.n	80085d8 <HAL_FDCAN_ActivateNotification+0x20>
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d155      	bne.n	8008684 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f042 0201 	orr.w	r2, r2, #1
 80085f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80085f6:	e014      	b.n	8008622 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4013      	ands	r3, r2
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	429a      	cmp	r2, r3
 8008606:	d108      	bne.n	800861a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0202 	orr.w	r2, r2, #2
 8008616:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008618:	e003      	b.n	8008622 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2203      	movs	r2, #3
 8008620:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008628:	2b00      	cmp	r3, #0
 800862a:	d009      	beq.n	8008640 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	430a      	orrs	r2, r1
 800863c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	430a      	orrs	r2, r1
 800865a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	4b0f      	ldr	r3, [pc, #60]	@ (80086a4 <HAL_FDCAN_ActivateNotification+0xec>)
 8008668:	4013      	ands	r3, r2
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	6812      	ldr	r2, [r2, #0]
 800866e:	430b      	orrs	r3, r1
 8008670:	6553      	str	r3, [r2, #84]	@ 0x54
 8008672:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8008674:	695a      	ldr	r2, [r3, #20]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	0f9b      	lsrs	r3, r3, #30
 800867a:	490b      	ldr	r1, [pc, #44]	@ (80086a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800867c:	4313      	orrs	r3, r2
 800867e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	e008      	b.n	8008696 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800868a:	f043 0202 	orr.w	r2, r3, #2
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
  }
}
 8008696:	4618      	mov	r0, r3
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	3fcfffff 	.word	0x3fcfffff
 80086a8:	4000a800 	.word	0x4000a800

080086ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b096      	sub	sp, #88	@ 0x58
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80086b4:	4b9a      	ldr	r3, [pc, #616]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	079b      	lsls	r3, r3, #30
 80086ba:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80086bc:	4b98      	ldr	r3, [pc, #608]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	079b      	lsls	r3, r3, #30
 80086c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086c4:	4013      	ands	r3, r2
 80086c6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ce:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80086d2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80086dc:	4013      	ands	r3, r2
 80086de:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086f4:	4013      	ands	r3, r2
 80086f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800870c:	4013      	ands	r3, r2
 800870e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008716:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800871a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008724:	4013      	ands	r3, r2
 8008726:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800872e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8008732:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800873c:	4013      	ands	r3, r2
 800873e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800874e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008752:	0a1b      	lsrs	r3, r3, #8
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d010      	beq.n	800877e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800875c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875e:	0a1b      	lsrs	r3, r3, #8
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008770:	651a      	str	r2, [r3, #80]	@ 0x50
 8008772:	4b6b      	ldr	r3, [pc, #428]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 8008774:	2200      	movs	r2, #0
 8008776:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fa49 	bl	8008c10 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800877e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008780:	0a9b      	lsrs	r3, r3, #10
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01d      	beq.n	80087c6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800878a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878c:	0a9b      	lsrs	r3, r3, #10
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d017      	beq.n	80087c6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800879e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087aa:	4013      	ands	r3, r2
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80087b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80087b8:	4b59      	ldr	r3, [pc, #356]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80087be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9fc 	bl	8008bbe <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80087c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00d      	beq.n	80087e8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087d2:	4b54      	ldr	r3, [pc, #336]	@ (8008924 <HAL_FDCAN_IRQHandler+0x278>)
 80087d4:	400b      	ands	r3, r1
 80087d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80087d8:	4a51      	ldr	r2, [pc, #324]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 80087da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087dc:	0f9b      	lsrs	r3, r3, #30
 80087de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80087e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f9c0 	bl	8008b68 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80087e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00d      	beq.n	800880a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087f4:	4b4b      	ldr	r3, [pc, #300]	@ (8008924 <HAL_FDCAN_IRQHandler+0x278>)
 80087f6:	400b      	ands	r3, r1
 80087f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80087fa:	4a49      	ldr	r2, [pc, #292]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 80087fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087fe:	0f9b      	lsrs	r3, r3, #30
 8008800:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008802:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f9ba 	bl	8008b7e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800880a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00d      	beq.n	800882c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008816:	4b43      	ldr	r3, [pc, #268]	@ (8008924 <HAL_FDCAN_IRQHandler+0x278>)
 8008818:	400b      	ands	r3, r1
 800881a:	6513      	str	r3, [r2, #80]	@ 0x50
 800881c:	4a40      	ldr	r2, [pc, #256]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 800881e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008820:	0f9b      	lsrs	r3, r3, #30
 8008822:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008824:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fe fa84 	bl	8006d34 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800882c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008838:	4b3a      	ldr	r3, [pc, #232]	@ (8008924 <HAL_FDCAN_IRQHandler+0x278>)
 800883a:	400b      	ands	r3, r1
 800883c:	6513      	str	r3, [r2, #80]	@ 0x50
 800883e:	4a38      	ldr	r2, [pc, #224]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 8008840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008842:	0f9b      	lsrs	r3, r3, #30
 8008844:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008846:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9a3 	bl	8008b94 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	0adb      	lsrs	r3, r3, #11
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d010      	beq.n	800887c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800885a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885c:	0adb      	lsrs	r3, r3, #11
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800886e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008870:	4b2b      	ldr	r3, [pc, #172]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f997 	bl	8008baa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800887c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887e:	0a5b      	lsrs	r3, r3, #9
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01d      	beq.n	80088c4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	0a5b      	lsrs	r3, r3, #9
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d017      	beq.n	80088c4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800889c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a8:	4013      	ands	r3, r2
 80088aa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80088b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80088bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fe fa4c 	bl	8006d5c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80088c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c6:	0cdb      	lsrs	r3, r3, #19
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d010      	beq.n	80088f2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80088d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d2:	0cdb      	lsrs	r3, r3, #19
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80088e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80088e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f971 	bl	8008bd4 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80088f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f4:	0c1b      	lsrs	r3, r3, #16
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d016      	beq.n	800892c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80088fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008900:	0c1b      	lsrs	r3, r3, #16
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d010      	beq.n	800892c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008912:	651a      	str	r2, [r3, #80]	@ 0x50
 8008914:	4b02      	ldr	r3, [pc, #8]	@ (8008920 <HAL_FDCAN_IRQHandler+0x274>)
 8008916:	2200      	movs	r2, #0
 8008918:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	e004      	b.n	8008928 <HAL_FDCAN_IRQHandler+0x27c>
 800891e:	bf00      	nop
 8008920:	4000a800 	.word	0x4000a800
 8008924:	3fcfffff 	.word	0x3fcfffff
 8008928:	f000 f95e 	bl	8008be8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800892c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892e:	0c9b      	lsrs	r3, r3, #18
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d010      	beq.n	800895a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	0c9b      	lsrs	r3, r3, #18
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800894c:	651a      	str	r2, [r3, #80]	@ 0x50
 800894e:	4b83      	ldr	r3, [pc, #524]	@ (8008b5c <HAL_FDCAN_IRQHandler+0x4b0>)
 8008950:	2200      	movs	r2, #0
 8008952:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f951 	bl	8008bfc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800895a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895c:	0c5b      	lsrs	r3, r3, #17
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d015      	beq.n	8008992 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	0c5b      	lsrs	r3, r3, #17
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00f      	beq.n	8008992 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800897a:	651a      	str	r2, [r3, #80]	@ 0x50
 800897c:	4b77      	ldr	r3, [pc, #476]	@ (8008b5c <HAL_FDCAN_IRQHandler+0x4b0>)
 800897e:	2200      	movs	r2, #0
 8008980:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008988:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00d      	beq.n	80089b4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800899e:	4b70      	ldr	r3, [pc, #448]	@ (8008b60 <HAL_FDCAN_IRQHandler+0x4b4>)
 80089a0:	400b      	ands	r3, r1
 80089a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80089a4:	4a6d      	ldr	r2, [pc, #436]	@ (8008b5c <HAL_FDCAN_IRQHandler+0x4b0>)
 80089a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089a8:	0f9b      	lsrs	r3, r3, #30
 80089aa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80089ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f942 	bl	8008c38 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80089b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d011      	beq.n	80089de <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089c0:	4b67      	ldr	r3, [pc, #412]	@ (8008b60 <HAL_FDCAN_IRQHandler+0x4b4>)
 80089c2:	400b      	ands	r3, r1
 80089c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80089c6:	4a65      	ldr	r2, [pc, #404]	@ (8008b5c <HAL_FDCAN_IRQHandler+0x4b0>)
 80089c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ca:	0f9b      	lsrs	r3, r3, #30
 80089cc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80089d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a60      	ldr	r2, [pc, #384]	@ (8008b64 <HAL_FDCAN_IRQHandler+0x4b8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	f040 80ac 	bne.w	8008b42 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80a4 	beq.w	8008b42 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a0e:	4013      	ands	r3, r2
 8008a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a26:	4013      	ands	r3, r2
 8008a28:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008a34:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a3e:	4013      	ands	r3, r2
 8008a40:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8008a4c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	4013      	ands	r3, r2
 8008a58:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8008a64:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8008a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a8e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8008a90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f8db 	bl	8008c4e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8008a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aa4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8008aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f8db 	bl	8008c64 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	099b      	lsrs	r3, r3, #6
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01a      	beq.n	8008af0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	099b      	lsrs	r3, r3, #6
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d014      	beq.n	8008af0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008adc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2240      	movs	r2, #64	@ 0x40
 8008ae4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	6939      	ldr	r1, [r7, #16]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f8c5 	bl	8008c7a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d007      	beq.n	8008b06 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008afc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008afe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f8c6 	bl	8008c92 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00b      	beq.n	8008b24 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6a3a      	ldr	r2, [r7, #32]
 8008b12:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00b      	beq.n	8008b42 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f869 	bl	8008c24 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008b52:	bf00      	nop
 8008b54:	3758      	adds	r7, #88	@ 0x58
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	4000a800 	.word	0x4000a800
 8008b60:	3fcfffff 	.word	0x3fcfffff
 8008b64:	4000a000 	.word	0x4000a000

08008b68 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8008c86:	bf00      	nop
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008cbe:	4ba7      	ldr	r3, [pc, #668]	@ (8008f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	0091      	lsls	r1, r2, #2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6812      	ldr	r2, [r2, #0]
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cd8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce0:	041a      	lsls	r2, r3, #16
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008cfe:	4b97      	ldr	r3, [pc, #604]	@ (8008f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	0091      	lsls	r1, r2, #2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6812      	ldr	r2, [r2, #0]
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d18:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d20:	041a      	lsls	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	4413      	add	r3, r2
 8008d36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d40:	4b86      	ldr	r3, [pc, #536]	@ (8008f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d42:	4013      	ands	r3, r2
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	0091      	lsls	r1, r2, #2
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d5a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	041a      	lsls	r2, r3, #16
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008d88:	4b74      	ldr	r3, [pc, #464]	@ (8008f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	0091      	lsls	r1, r2, #2
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6812      	ldr	r2, [r2, #0]
 8008d94:	430b      	orrs	r3, r1
 8008d96:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008da2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008daa:	041a      	lsls	r2, r3, #16
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008dbe:	fb02 f303 	mul.w	r3, r2, r3
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008dd0:	4b62      	ldr	r3, [pc, #392]	@ (8008f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	0091      	lsls	r1, r2, #2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008dea:	fb02 f303 	mul.w	r3, r2, r3
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	4413      	add	r3, r2
 8008df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008dfc:	4b57      	ldr	r3, [pc, #348]	@ (8008f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	0091      	lsls	r1, r2, #2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e16:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e1e:	041a      	lsls	r2, r3, #16
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	4413      	add	r3, r2
 8008e34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008e3e:	4b47      	ldr	r3, [pc, #284]	@ (8008f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	0091      	lsls	r1, r2, #2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e58:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e60:	041a      	lsls	r2, r3, #16
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e74:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e7c:	061a      	lsls	r2, r3, #24
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e8c:	4b34      	ldr	r3, [pc, #208]	@ (8008f60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008e8e:	4413      	add	r3, r2
 8008e90:	009a      	lsls	r2, r3, #2
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	441a      	add	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	441a      	add	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	441a      	add	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	441a      	add	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008ef2:	fb01 f303 	mul.w	r3, r1, r3
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	441a      	add	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	441a      	add	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008f22:	fb01 f303 	mul.w	r3, r1, r3
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	441a      	add	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008f3e:	fb01 f303 	mul.w	r3, r1, r3
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	441a      	add	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f52:	4a04      	ldr	r2, [pc, #16]	@ (8008f64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d915      	bls.n	8008f84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008f58:	e006      	b.n	8008f68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008f5a:	bf00      	nop
 8008f5c:	ffff0003 	.word	0xffff0003
 8008f60:	10002b00 	.word	0x10002b00
 8008f64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f6e:	f043 0220 	orr.w	r2, r3, #32
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e010      	b.n	8008fa6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	e005      	b.n	8008f98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3304      	adds	r3, #4
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3f3      	bcc.n	8008f8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop

08008fb4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b089      	sub	sp, #36	@ 0x24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008fd2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	61fb      	str	r3, [r7, #28]
 8008fde:	e00a      	b.n	8008ff6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008fe8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008fee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008ff0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ff4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8009000:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009006:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800900c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	3304      	adds	r3, #4
 8009036:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	3304      	adds	r3, #4
 8009042:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	e020      	b.n	800908c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	3303      	adds	r3, #3
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	3302      	adds	r3, #2
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	440b      	add	r3, r1
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8009062:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3301      	adds	r3, #1
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	440b      	add	r3, r1
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8009070:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	440a      	add	r2, r1
 8009078:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800907a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	3304      	adds	r3, #4
 8009084:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	3304      	adds	r3, #4
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	0c1b      	lsrs	r3, r3, #16
 8009092:	4a06      	ldr	r2, [pc, #24]	@ (80090ac <FDCAN_CopyMessageToRAM+0xf8>)
 8009094:	5cd3      	ldrb	r3, [r2, r3]
 8009096:	461a      	mov	r2, r3
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	4293      	cmp	r3, r2
 800909c:	d3d5      	bcc.n	800904a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800909e:	bf00      	nop
 80090a0:	bf00      	nop
 80090a2:	3724      	adds	r7, #36	@ 0x24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	08013870 	.word	0x08013870

080090b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b089      	sub	sp, #36	@ 0x24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80090be:	4b89      	ldr	r3, [pc, #548]	@ (80092e4 <HAL_GPIO_Init+0x234>)
 80090c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80090c2:	e194      	b.n	80093ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	2101      	movs	r1, #1
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	fa01 f303 	lsl.w	r3, r1, r3
 80090d0:	4013      	ands	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 8186 	beq.w	80093e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f003 0303 	and.w	r3, r3, #3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d005      	beq.n	80090f4 <HAL_GPIO_Init+0x44>
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d130      	bne.n	8009156 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	2203      	movs	r2, #3
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	43db      	mvns	r3, r3
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	4013      	ands	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	fa02 f303 	lsl.w	r3, r2, r3
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	4313      	orrs	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800912a:	2201      	movs	r2, #1
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	fa02 f303 	lsl.w	r3, r2, r3
 8009132:	43db      	mvns	r3, r3
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	4013      	ands	r3, r2
 8009138:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	091b      	lsrs	r3, r3, #4
 8009140:	f003 0201 	and.w	r2, r3, #1
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	4313      	orrs	r3, r2
 800914e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d017      	beq.n	8009192 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	2203      	movs	r2, #3
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	43db      	mvns	r3, r3
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	4013      	ands	r3, r2
 8009178:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	fa02 f303 	lsl.w	r3, r2, r3
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	4313      	orrs	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d123      	bne.n	80091e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	08da      	lsrs	r2, r3, #3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3208      	adds	r2, #8
 80091a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	220f      	movs	r2, #15
 80091b6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ba:	43db      	mvns	r3, r3
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	4013      	ands	r3, r2
 80091c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	691a      	ldr	r2, [r3, #16]
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	08da      	lsrs	r2, r3, #3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3208      	adds	r2, #8
 80091e0:	69b9      	ldr	r1, [r7, #24]
 80091e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	2203      	movs	r2, #3
 80091f2:	fa02 f303 	lsl.w	r3, r2, r3
 80091f6:	43db      	mvns	r3, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	4013      	ands	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f003 0203 	and.w	r2, r3, #3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	fa02 f303 	lsl.w	r3, r2, r3
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	4313      	orrs	r3, r2
 8009212:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80e0 	beq.w	80093e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009228:	4b2f      	ldr	r3, [pc, #188]	@ (80092e8 <HAL_GPIO_Init+0x238>)
 800922a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800922e:	4a2e      	ldr	r2, [pc, #184]	@ (80092e8 <HAL_GPIO_Init+0x238>)
 8009230:	f043 0302 	orr.w	r3, r3, #2
 8009234:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009238:	4b2b      	ldr	r3, [pc, #172]	@ (80092e8 <HAL_GPIO_Init+0x238>)
 800923a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009246:	4a29      	ldr	r2, [pc, #164]	@ (80092ec <HAL_GPIO_Init+0x23c>)
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	089b      	lsrs	r3, r3, #2
 800924c:	3302      	adds	r3, #2
 800924e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	220f      	movs	r2, #15
 800925e:	fa02 f303 	lsl.w	r3, r2, r3
 8009262:	43db      	mvns	r3, r3
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	4013      	ands	r3, r2
 8009268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a20      	ldr	r2, [pc, #128]	@ (80092f0 <HAL_GPIO_Init+0x240>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d052      	beq.n	8009318 <HAL_GPIO_Init+0x268>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a1f      	ldr	r2, [pc, #124]	@ (80092f4 <HAL_GPIO_Init+0x244>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d031      	beq.n	80092de <HAL_GPIO_Init+0x22e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a1e      	ldr	r2, [pc, #120]	@ (80092f8 <HAL_GPIO_Init+0x248>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d02b      	beq.n	80092da <HAL_GPIO_Init+0x22a>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a1d      	ldr	r2, [pc, #116]	@ (80092fc <HAL_GPIO_Init+0x24c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d025      	beq.n	80092d6 <HAL_GPIO_Init+0x226>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a1c      	ldr	r2, [pc, #112]	@ (8009300 <HAL_GPIO_Init+0x250>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d01f      	beq.n	80092d2 <HAL_GPIO_Init+0x222>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a1b      	ldr	r2, [pc, #108]	@ (8009304 <HAL_GPIO_Init+0x254>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d019      	beq.n	80092ce <HAL_GPIO_Init+0x21e>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a1a      	ldr	r2, [pc, #104]	@ (8009308 <HAL_GPIO_Init+0x258>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d013      	beq.n	80092ca <HAL_GPIO_Init+0x21a>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a19      	ldr	r2, [pc, #100]	@ (800930c <HAL_GPIO_Init+0x25c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00d      	beq.n	80092c6 <HAL_GPIO_Init+0x216>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a18      	ldr	r2, [pc, #96]	@ (8009310 <HAL_GPIO_Init+0x260>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d007      	beq.n	80092c2 <HAL_GPIO_Init+0x212>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a17      	ldr	r2, [pc, #92]	@ (8009314 <HAL_GPIO_Init+0x264>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d101      	bne.n	80092be <HAL_GPIO_Init+0x20e>
 80092ba:	2309      	movs	r3, #9
 80092bc:	e02d      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092be:	230a      	movs	r3, #10
 80092c0:	e02b      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092c2:	2308      	movs	r3, #8
 80092c4:	e029      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092c6:	2307      	movs	r3, #7
 80092c8:	e027      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092ca:	2306      	movs	r3, #6
 80092cc:	e025      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092ce:	2305      	movs	r3, #5
 80092d0:	e023      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092d2:	2304      	movs	r3, #4
 80092d4:	e021      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092d6:	2303      	movs	r3, #3
 80092d8:	e01f      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092da:	2302      	movs	r3, #2
 80092dc:	e01d      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092de:	2301      	movs	r3, #1
 80092e0:	e01b      	b.n	800931a <HAL_GPIO_Init+0x26a>
 80092e2:	bf00      	nop
 80092e4:	58000080 	.word	0x58000080
 80092e8:	58024400 	.word	0x58024400
 80092ec:	58000400 	.word	0x58000400
 80092f0:	58020000 	.word	0x58020000
 80092f4:	58020400 	.word	0x58020400
 80092f8:	58020800 	.word	0x58020800
 80092fc:	58020c00 	.word	0x58020c00
 8009300:	58021000 	.word	0x58021000
 8009304:	58021400 	.word	0x58021400
 8009308:	58021800 	.word	0x58021800
 800930c:	58021c00 	.word	0x58021c00
 8009310:	58022000 	.word	0x58022000
 8009314:	58022400 	.word	0x58022400
 8009318:	2300      	movs	r3, #0
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	f002 0203 	and.w	r2, r2, #3
 8009320:	0092      	lsls	r2, r2, #2
 8009322:	4093      	lsls	r3, r2
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	4313      	orrs	r3, r2
 8009328:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800932a:	4938      	ldr	r1, [pc, #224]	@ (800940c <HAL_GPIO_Init+0x35c>)
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	089b      	lsrs	r3, r3, #2
 8009330:	3302      	adds	r3, #2
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	43db      	mvns	r3, r3
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	4013      	ands	r3, r2
 8009348:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800935e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	43db      	mvns	r3, r3
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	4013      	ands	r3, r2
 8009376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d003      	beq.n	800938c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800938c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	43db      	mvns	r3, r3
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	4013      	ands	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	43db      	mvns	r3, r3
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	4013      	ands	r3, r2
 80093cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3301      	adds	r3, #1
 80093ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	fa22 f303 	lsr.w	r3, r2, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f ae63 	bne.w	80090c4 <HAL_GPIO_Init+0x14>
  }
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	3724      	adds	r7, #36	@ 0x24
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	58000400 	.word	0x58000400

08009410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	807b      	strh	r3, [r7, #2]
 800941c:	4613      	mov	r3, r2
 800941e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009420:	787b      	ldrb	r3, [r7, #1]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009426:	887a      	ldrh	r2, [r7, #2]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800942c:	e003      	b.n	8009436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800942e:	887b      	ldrh	r3, [r7, #2]
 8009430:	041a      	lsls	r2, r3, #16
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	619a      	str	r2, [r3, #24]
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009444:	b08f      	sub	sp, #60	@ 0x3c
 8009446:	af0a      	add	r7, sp, #40	@ 0x28
 8009448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e116      	b.n	8009682 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d106      	bne.n	8009474 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f007 fe7a 	bl	8011168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2203      	movs	r2, #3
 8009478:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f004 fa37 	bl	800d906 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	687e      	ldr	r6, [r7, #4]
 80094a0:	466d      	mov	r5, sp
 80094a2:	f106 0410 	add.w	r4, r6, #16
 80094a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80094b6:	1d33      	adds	r3, r6, #4
 80094b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094ba:	6838      	ldr	r0, [r7, #0]
 80094bc:	f004 f902 	bl	800d6c4 <USB_CoreInit>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2202      	movs	r2, #2
 80094ca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e0d7      	b.n	8009682 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f004 fa25 	bl	800d928 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
 80094e2:	e04a      	b.n	800957a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094e4:	7bfa      	ldrb	r2, [r7, #15]
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	4613      	mov	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	440b      	add	r3, r1
 80094f2:	333d      	adds	r3, #61	@ 0x3d
 80094f4:	2201      	movs	r2, #1
 80094f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80094f8:	7bfa      	ldrb	r2, [r7, #15]
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	333c      	adds	r3, #60	@ 0x3c
 8009508:	7bfa      	ldrb	r2, [r7, #15]
 800950a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800950c:	7bfa      	ldrb	r2, [r7, #15]
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	b298      	uxth	r0, r3
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	4613      	mov	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	440b      	add	r3, r1
 800951e:	3356      	adds	r3, #86	@ 0x56
 8009520:	4602      	mov	r2, r0
 8009522:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009524:	7bfa      	ldrb	r2, [r7, #15]
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4613      	mov	r3, r2
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	3340      	adds	r3, #64	@ 0x40
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009538:	7bfa      	ldrb	r2, [r7, #15]
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	4613      	mov	r3, r2
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	3344      	adds	r3, #68	@ 0x44
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800954c:	7bfa      	ldrb	r2, [r7, #15]
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4613      	mov	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	3348      	adds	r3, #72	@ 0x48
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009560:	7bfa      	ldrb	r2, [r7, #15]
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	4613      	mov	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	334c      	adds	r3, #76	@ 0x4c
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	3301      	adds	r3, #1
 8009578:	73fb      	strb	r3, [r7, #15]
 800957a:	7bfa      	ldrb	r2, [r7, #15]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d3af      	bcc.n	80094e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
 8009588:	e044      	b.n	8009614 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800958a:	7bfa      	ldrb	r2, [r7, #15]
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	4613      	mov	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	440b      	add	r3, r1
 8009598:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800959c:	2200      	movs	r2, #0
 800959e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095a0:	7bfa      	ldrb	r2, [r7, #15]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80095b2:	7bfa      	ldrb	r2, [r7, #15]
 80095b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095b6:	7bfa      	ldrb	r2, [r7, #15]
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80095c8:	2200      	movs	r2, #0
 80095ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095cc:	7bfa      	ldrb	r2, [r7, #15]
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	4613      	mov	r3, r2
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	440b      	add	r3, r1
 80095da:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095e2:	7bfa      	ldrb	r2, [r7, #15]
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095f8:	7bfa      	ldrb	r2, [r7, #15]
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	3301      	adds	r3, #1
 8009612:	73fb      	strb	r3, [r7, #15]
 8009614:	7bfa      	ldrb	r2, [r7, #15]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	429a      	cmp	r2, r3
 800961c:	d3b5      	bcc.n	800958a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	687e      	ldr	r6, [r7, #4]
 8009626:	466d      	mov	r5, sp
 8009628:	f106 0410 	add.w	r4, r6, #16
 800962c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800962e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009638:	e885 0003 	stmia.w	r5, {r0, r1}
 800963c:	1d33      	adds	r3, r6, #4
 800963e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009640:	6838      	ldr	r0, [r7, #0]
 8009642:	f004 f9bd 	bl	800d9c0 <USB_DevInit>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e014      	b.n	8009682 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966c:	2b01      	cmp	r3, #1
 800966e:	d102      	bne.n	8009676 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 f96f 	bl	800a954 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4618      	mov	r0, r3
 800967c:	f005 f9ff 	bl	800ea7e <USB_DevDisconnect>

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800968a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_PCD_Start+0x1c>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e022      	b.n	80096ec <HAL_PCD_Start+0x62>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d109      	bne.n	80096ce <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d105      	bne.n	80096ce <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f004 f906 	bl	800d8e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4618      	mov	r0, r3
 80096de:	f005 f9ad 	bl	800ea3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b08d      	sub	sp, #52	@ 0x34
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f005 fa6b 	bl	800ebe6 <USB_GetMode>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 84b7 	bne.w	800a086 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4618      	mov	r0, r3
 800971e:	f005 f9cf 	bl	800eac0 <USB_ReadInterrupts>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 84ad 	beq.w	800a084 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	0a1b      	lsrs	r3, r3, #8
 8009734:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4618      	mov	r0, r3
 8009744:	f005 f9bc 	bl	800eac0 <USB_ReadInterrupts>
 8009748:	4603      	mov	r3, r0
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b02      	cmp	r3, #2
 8009750:	d107      	bne.n	8009762 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	695a      	ldr	r2, [r3, #20]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f002 0202 	and.w	r2, r2, #2
 8009760:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f005 f9aa 	bl	800eac0 <USB_ReadInterrupts>
 800976c:	4603      	mov	r3, r0
 800976e:	f003 0310 	and.w	r3, r3, #16
 8009772:	2b10      	cmp	r3, #16
 8009774:	d161      	bne.n	800983a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	699a      	ldr	r2, [r3, #24]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0210 	bic.w	r2, r2, #16
 8009784:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	4613      	mov	r3, r2
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	4413      	add	r3, r2
 80097a2:	3304      	adds	r3, #4
 80097a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80097ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097b0:	d124      	bne.n	80097fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80097b8:	4013      	ands	r3, r2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d035      	beq.n	800982a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	091b      	lsrs	r3, r3, #4
 80097c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80097c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	6a38      	ldr	r0, [r7, #32]
 80097d2:	f004 ffe1 	bl	800e798 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	091b      	lsrs	r3, r3, #4
 80097de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097e2:	441a      	add	r2, r3
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	695a      	ldr	r2, [r3, #20]
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	091b      	lsrs	r3, r3, #4
 80097f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097f4:	441a      	add	r2, r3
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	615a      	str	r2, [r3, #20]
 80097fa:	e016      	b.n	800982a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009802:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009806:	d110      	bne.n	800982a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800980e:	2208      	movs	r2, #8
 8009810:	4619      	mov	r1, r3
 8009812:	6a38      	ldr	r0, [r7, #32]
 8009814:	f004 ffc0 	bl	800e798 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	695a      	ldr	r2, [r3, #20]
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	091b      	lsrs	r3, r3, #4
 8009820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009824:	441a      	add	r2, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0210 	orr.w	r2, r2, #16
 8009838:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f005 f93e 	bl	800eac0 <USB_ReadInterrupts>
 8009844:	4603      	mov	r3, r0
 8009846:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800984a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800984e:	f040 80a7 	bne.w	80099a0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f005 f943 	bl	800eae6 <USB_ReadDevAllOutEpInterrupt>
 8009860:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8009862:	e099      	b.n	8009998 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 808e 	beq.w	800998c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f005 f967 	bl	800eb4e <USB_ReadDevOutEPInterrupt>
 8009880:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00c      	beq.n	80098a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800988c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009898:	461a      	mov	r2, r3
 800989a:	2301      	movs	r3, #1
 800989c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800989e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fed1 	bl	800a648 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00c      	beq.n	80098ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098bc:	461a      	mov	r2, r3
 80098be:	2308      	movs	r3, #8
 80098c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80098c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 ffa7 	bl	800a818 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f003 0310 	and.w	r3, r3, #16
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d008      	beq.n	80098e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e0:	461a      	mov	r2, r3
 80098e2:	2310      	movs	r3, #16
 80098e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d030      	beq.n	8009952 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098f8:	2b80      	cmp	r3, #128	@ 0x80
 80098fa:	d109      	bne.n	8009910 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800990a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800990e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009912:	4613      	mov	r3, r2
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	4413      	add	r3, r2
 8009922:	3304      	adds	r3, #4
 8009924:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	78db      	ldrb	r3, [r3, #3]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d108      	bne.n	8009940 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2200      	movs	r2, #0
 8009932:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	b2db      	uxtb	r3, r3
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f007 fd3a 	bl	80113b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994c:	461a      	mov	r2, r3
 800994e:	2302      	movs	r3, #2
 8009950:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f003 0320 	and.w	r3, r3, #32
 8009958:	2b00      	cmp	r3, #0
 800995a:	d008      	beq.n	800996e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800995c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009968:	461a      	mov	r2, r3
 800996a:	2320      	movs	r3, #32
 800996c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d009      	beq.n	800998c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009984:	461a      	mov	r2, r3
 8009986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800998a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998e:	3301      	adds	r3, #1
 8009990:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009994:	085b      	lsrs	r3, r3, #1
 8009996:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999a:	2b00      	cmp	r3, #0
 800999c:	f47f af62 	bne.w	8009864 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f005 f88b 	bl	800eac0 <USB_ReadInterrupts>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80099b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099b4:	f040 80db 	bne.w	8009b6e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f005 f8ac 	bl	800eb1a <USB_ReadDevAllInEpInterrupt>
 80099c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80099c8:	e0cd      	b.n	8009b66 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	f003 0301 	and.w	r3, r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 80c2 	beq.w	8009b5a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f005 f8d2 	bl	800eb8a <USB_ReadDevInEPInterrupt>
 80099e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d057      	beq.n	8009aa2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	f003 030f 	and.w	r3, r3, #15
 80099f8:	2201      	movs	r2, #1
 80099fa:	fa02 f303 	lsl.w	r3, r2, r3
 80099fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	43db      	mvns	r3, r3
 8009a0c:	69f9      	ldr	r1, [r7, #28]
 8009a0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a12:	4013      	ands	r3, r2
 8009a14:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a22:	461a      	mov	r2, r3
 8009a24:	2301      	movs	r3, #1
 8009a26:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d132      	bne.n	8009a96 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a34:	4613      	mov	r3, r2
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	3348      	adds	r3, #72	@ 0x48
 8009a40:	6819      	ldr	r1, [r3, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a46:	4613      	mov	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4403      	add	r3, r0
 8009a50:	3344      	adds	r3, #68	@ 0x44
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4419      	add	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	00db      	lsls	r3, r3, #3
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4403      	add	r3, r0
 8009a64:	3348      	adds	r3, #72	@ 0x48
 8009a66:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d113      	bne.n	8009a96 <HAL_PCD_IRQHandler+0x3a2>
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a72:	4613      	mov	r3, r2
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	334c      	adds	r3, #76	@ 0x4c
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d108      	bne.n	8009a96 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6818      	ldr	r0, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2101      	movs	r1, #1
 8009a92:	f005 f8db 	bl	800ec4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f007 fc04 	bl	80112aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d008      	beq.n	8009abe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab8:	461a      	mov	r2, r3
 8009aba:	2308      	movs	r3, #8
 8009abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f003 0310 	and.w	r3, r3, #16
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d008      	beq.n	8009ada <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2310      	movs	r3, #16
 8009ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d008      	beq.n	8009af6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af0:	461a      	mov	r2, r3
 8009af2:	2340      	movs	r3, #64	@ 0x40
 8009af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d023      	beq.n	8009b48 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009b00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b02:	6a38      	ldr	r0, [r7, #32]
 8009b04:	f004 f8ba 	bl	800dc7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	3338      	adds	r3, #56	@ 0x38
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	4413      	add	r3, r2
 8009b18:	3304      	adds	r3, #4
 8009b1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	78db      	ldrb	r3, [r3, #3]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d108      	bne.n	8009b36 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2200      	movs	r2, #0
 8009b28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f007 fc51 	bl	80113d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b42:	461a      	mov	r2, r3
 8009b44:	2302      	movs	r3, #2
 8009b46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009b52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fcea 	bl	800a52e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b62:	085b      	lsrs	r3, r3, #1
 8009b64:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f47f af2e 	bne.w	80099ca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f004 ffa4 	bl	800eac0 <USB_ReadInterrupts>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b82:	d122      	bne.n	8009bca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	69fa      	ldr	r2, [r7, #28]
 8009b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b92:	f023 0301 	bic.w	r3, r3, #1
 8009b96:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d108      	bne.n	8009bb4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009baa:	2100      	movs	r1, #0
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fef5 	bl	800a99c <HAL_PCDEx_LPM_Callback>
 8009bb2:	e002      	b.n	8009bba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f007 fbef 	bl	8011398 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	695a      	ldr	r2, [r3, #20]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f004 ff76 	bl	800eac0 <USB_ReadInterrupts>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bde:	d112      	bne.n	8009c06 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d102      	bne.n	8009bf6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f007 fbab 	bl	801134c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695a      	ldr	r2, [r3, #20]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f004 ff58 	bl	800eac0 <USB_ReadInterrupts>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c1a:	d121      	bne.n	8009c60 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	695a      	ldr	r2, [r3, #20]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009c2a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d111      	bne.n	8009c5a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c44:	089b      	lsrs	r3, r3, #2
 8009c46:	f003 020f 	and.w	r2, r3, #15
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009c50:	2101      	movs	r1, #1
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fea2 	bl	800a99c <HAL_PCDEx_LPM_Callback>
 8009c58:	e002      	b.n	8009c60 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f007 fb76 	bl	801134c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f004 ff2b 	bl	800eac0 <USB_ReadInterrupts>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c74:	f040 80b7 	bne.w	8009de6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c86:	f023 0301 	bic.w	r3, r3, #1
 8009c8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2110      	movs	r1, #16
 8009c92:	4618      	mov	r0, r3
 8009c94:	f003 fff2 	bl	800dc7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c9c:	e046      	b.n	8009d2c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009caa:	461a      	mov	r2, r3
 8009cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009cb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cc2:	0151      	lsls	r1, r2, #5
 8009cc4:	69fa      	ldr	r2, [r7, #28]
 8009cc6:	440a      	add	r2, r1
 8009cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ccc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009cd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ce4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d16:	0151      	lsls	r1, r2, #5
 8009d18:	69fa      	ldr	r2, [r7, #28]
 8009d1a:	440a      	add	r2, r1
 8009d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d28:	3301      	adds	r3, #1
 8009d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d3b3      	bcc.n	8009c9e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d44:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009d48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d016      	beq.n	8009d80 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d5c:	69fa      	ldr	r2, [r7, #28]
 8009d5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d62:	f043 030b 	orr.w	r3, r3, #11
 8009d66:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d78:	f043 030b 	orr.w	r3, r3, #11
 8009d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d7e:	e015      	b.n	8009dac <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d8e:	4619      	mov	r1, r3
 8009d90:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009d94:	4313      	orrs	r3, r2
 8009d96:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009da6:	f043 030b 	orr.w	r3, r3, #11
 8009daa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	69fa      	ldr	r2, [r7, #28]
 8009db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009dbe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f004 ff3b 	bl	800ec4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	695a      	ldr	r2, [r3, #20]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f004 fe68 	bl	800eac0 <USB_ReadInterrupts>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dfa:	d124      	bne.n	8009e46 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f004 feff 	bl	800ec04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f003 ffb3 	bl	800dd76 <USB_GetDevSpeed>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461a      	mov	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681c      	ldr	r4, [r3, #0]
 8009e1c:	f001 fd9e 	bl	800b95c <HAL_RCC_GetHCLKFreq>
 8009e20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f003 fcb8 	bl	800d7a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f007 fa62 	bl	80112fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	695a      	ldr	r2, [r3, #20]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f004 fe38 	bl	800eac0 <USB_ReadInterrupts>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f003 0308 	and.w	r3, r3, #8
 8009e56:	2b08      	cmp	r3, #8
 8009e58:	d10a      	bne.n	8009e70 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f007 fa3f 	bl	80112de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	695a      	ldr	r2, [r3, #20]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f002 0208 	and.w	r2, r2, #8
 8009e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f004 fe23 	bl	800eac0 <USB_ReadInterrupts>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e80:	2b80      	cmp	r3, #128	@ 0x80
 8009e82:	d122      	bne.n	8009eca <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e90:	2301      	movs	r3, #1
 8009e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e94:	e014      	b.n	8009ec0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	4413      	add	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d105      	bne.n	8009eba <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fb09 	bl	800a4cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d3e5      	bcc.n	8009e96 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f004 fdf6 	bl	800eac0 <USB_ReadInterrupts>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ede:	d13b      	bne.n	8009f58 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ee4:	e02b      	b.n	8009f3e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009efa:	4613      	mov	r3, r2
 8009efc:	00db      	lsls	r3, r3, #3
 8009efe:	4413      	add	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	3340      	adds	r3, #64	@ 0x40
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d115      	bne.n	8009f38 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009f0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	da12      	bge.n	8009f38 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f16:	4613      	mov	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	333f      	adds	r3, #63	@ 0x3f
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 faca 	bl	800a4cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d3ce      	bcc.n	8009ee6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	695a      	ldr	r2, [r3, #20]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f004 fdaf 	bl	800eac0 <USB_ReadInterrupts>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f6c:	d155      	bne.n	800a01a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f6e:	2301      	movs	r3, #1
 8009f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f72:	e045      	b.n	800a000 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f88:	4613      	mov	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d12e      	bne.n	8009ffa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009f9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	da2b      	bge.n	8009ffa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8009fae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d121      	bne.n	8009ffa <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fba:	4613      	mov	r3, r2
 8009fbc:	00db      	lsls	r3, r3, #3
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8009fc8:	2201      	movs	r2, #1
 8009fca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009ff6:	6053      	str	r3, [r2, #4]
            break;
 8009ff8:	e007      	b.n	800a00a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a006:	429a      	cmp	r2, r3
 800a008:	d3b4      	bcc.n	8009f74 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	695a      	ldr	r2, [r3, #20]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800a018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f004 fd4e 	bl	800eac0 <USB_ReadInterrupts>
 800a024:	4603      	mov	r3, r0
 800a026:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a02a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a02e:	d10a      	bne.n	800a046 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f007 f9e3 	bl	80113fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	695a      	ldr	r2, [r3, #20]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f004 fd38 	bl	800eac0 <USB_ReadInterrupts>
 800a050:	4603      	mov	r3, r0
 800a052:	f003 0304 	and.w	r3, r3, #4
 800a056:	2b04      	cmp	r3, #4
 800a058:	d115      	bne.n	800a086 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f007 f9d3 	bl	8011418 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6859      	ldr	r1, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	430a      	orrs	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
 800a082:	e000      	b.n	800a086 <HAL_PCD_IRQHandler+0x992>
      return;
 800a084:	bf00      	nop
    }
  }
}
 800a086:	3734      	adds	r7, #52	@ 0x34
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd90      	pop	{r4, r7, pc}

0800a08c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <HAL_PCD_SetAddress+0x1a>
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e013      	b.n	800a0ce <HAL_PCD_SetAddress+0x42>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	78fa      	ldrb	r2, [r7, #3]
 800a0b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f004 fc96 	bl	800e9f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	4608      	mov	r0, r1
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	70fb      	strb	r3, [r7, #3]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	803b      	strh	r3, [r7, #0]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a0f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	da0f      	bge.n	800a11c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	f003 020f 	and.w	r2, r3, #15
 800a102:	4613      	mov	r3, r2
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	3338      	adds	r3, #56	@ 0x38
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	4413      	add	r3, r2
 800a110:	3304      	adds	r3, #4
 800a112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	705a      	strb	r2, [r3, #1]
 800a11a:	e00f      	b.n	800a13c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	f003 020f 	and.w	r2, r3, #15
 800a122:	4613      	mov	r3, r2
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	4413      	add	r3, r2
 800a132:	3304      	adds	r3, #4
 800a134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a13c:	78fb      	ldrb	r3, [r7, #3]
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	b2da      	uxtb	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a148:	883a      	ldrh	r2, [r7, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	78ba      	ldrb	r2, [r7, #2]
 800a152:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a166:	78bb      	ldrb	r3, [r7, #2]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d102      	bne.n	800a172 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_PCD_EP_Open+0xaa>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e00e      	b.n	800a19e <HAL_PCD_EP_Open+0xc8>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68f9      	ldr	r1, [r7, #12]
 800a18e:	4618      	mov	r0, r3
 800a190:	f003 fe16 	bl	800ddc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800a19c:	7afb      	ldrb	r3, [r7, #11]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a1b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	da0f      	bge.n	800a1da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	f003 020f 	and.w	r2, r3, #15
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	00db      	lsls	r3, r3, #3
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	3338      	adds	r3, #56	@ 0x38
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	705a      	strb	r2, [r3, #1]
 800a1d8:	e00f      	b.n	800a1fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	f003 020f 	and.w	r2, r3, #15
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1fa:	78fb      	ldrb	r3, [r7, #3]
 800a1fc:	f003 030f 	and.w	r3, r3, #15
 800a200:	b2da      	uxtb	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_PCD_EP_Close+0x6e>
 800a210:	2302      	movs	r3, #2
 800a212:	e00e      	b.n	800a232 <HAL_PCD_EP_Close+0x8c>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68f9      	ldr	r1, [r7, #12]
 800a222:	4618      	mov	r0, r3
 800a224:	f003 fe54 	bl	800ded0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b086      	sub	sp, #24
 800a23e:	af00      	add	r7, sp, #0
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	460b      	mov	r3, r1
 800a248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a24a:	7afb      	ldrb	r3, [r7, #11]
 800a24c:	f003 020f 	and.w	r2, r3, #15
 800a250:	4613      	mov	r3, r2
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	4413      	add	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	3304      	adds	r3, #4
 800a262:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2200      	movs	r2, #0
 800a274:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	2200      	movs	r2, #0
 800a27a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	b2da      	uxtb	r2, r3
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d102      	bne.n	800a296 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6818      	ldr	r0, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6979      	ldr	r1, [r7, #20]
 800a2a4:	f003 fef0 	bl	800e088 <USB_EPStartXfer>

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	f003 020f 	and.w	r2, r3, #15
 800a2c4:	6879      	ldr	r1, [r7, #4]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	440b      	add	r3, r1
 800a2d0:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800a2d4:	681b      	ldr	r3, [r3, #0]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b086      	sub	sp, #24
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	f003 020f 	and.w	r2, r3, #15
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	3338      	adds	r3, #56	@ 0x38
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4413      	add	r3, r2
 800a306:	3304      	adds	r3, #4
 800a308:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2200      	movs	r2, #0
 800a31a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2201      	movs	r2, #1
 800a320:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	f003 030f 	and.w	r3, r3, #15
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d102      	bne.n	800a33c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6818      	ldr	r0, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	461a      	mov	r2, r3
 800a348:	6979      	ldr	r1, [r7, #20]
 800a34a:	f003 fe9d 	bl	800e088 <USB_EPStartXfer>

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	f003 020f 	and.w	r2, r3, #15
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d901      	bls.n	800a376 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e050      	b.n	800a418 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	da0f      	bge.n	800a39e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	f003 020f 	and.w	r2, r3, #15
 800a384:	4613      	mov	r3, r2
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	3338      	adds	r3, #56	@ 0x38
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	4413      	add	r3, r2
 800a392:	3304      	adds	r3, #4
 800a394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	705a      	strb	r2, [r3, #1]
 800a39c:	e00d      	b.n	800a3ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	f003 030f 	and.w	r3, r3, #15
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d101      	bne.n	800a3da <HAL_PCD_EP_SetStall+0x82>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e01e      	b.n	800a418 <HAL_PCD_EP_SetStall+0xc0>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68f9      	ldr	r1, [r7, #12]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f004 fa2d 	bl	800e848 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a3ee:	78fb      	ldrb	r3, [r7, #3]
 800a3f0:	f003 030f 	and.w	r3, r3, #15
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	b2d9      	uxtb	r1, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a408:	461a      	mov	r2, r3
 800a40a:	f004 fc1f 	bl	800ec4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	f003 020f 	and.w	r2, r3, #15
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d901      	bls.n	800a43e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e042      	b.n	800a4c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a43e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a442:	2b00      	cmp	r3, #0
 800a444:	da0f      	bge.n	800a466 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a446:	78fb      	ldrb	r3, [r7, #3]
 800a448:	f003 020f 	and.w	r2, r3, #15
 800a44c:	4613      	mov	r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	4413      	add	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	3338      	adds	r3, #56	@ 0x38
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	4413      	add	r3, r2
 800a45a:	3304      	adds	r3, #4
 800a45c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	705a      	strb	r2, [r3, #1]
 800a464:	e00f      	b.n	800a486 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	f003 020f 	and.w	r2, r3, #15
 800a46c:	4613      	mov	r3, r2
 800a46e:	00db      	lsls	r3, r3, #3
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	4413      	add	r3, r2
 800a47c:	3304      	adds	r3, #4
 800a47e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	f003 030f 	and.w	r3, r3, #15
 800a492:	b2da      	uxtb	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d101      	bne.n	800a4a6 <HAL_PCD_EP_ClrStall+0x86>
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	e00e      	b.n	800a4c4 <HAL_PCD_EP_ClrStall+0xa4>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68f9      	ldr	r1, [r7, #12]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f004 fa35 	bl	800e924 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a4d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	da0c      	bge.n	800a4fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	f003 020f 	and.w	r2, r3, #15
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	3338      	adds	r3, #56	@ 0x38
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	e00c      	b.n	800a514 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	f003 020f 	and.w	r2, r3, #15
 800a500:	4613      	mov	r3, r2
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	4413      	add	r3, r2
 800a510:	3304      	adds	r3, #4
 800a512:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68f9      	ldr	r1, [r7, #12]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f004 f854 	bl	800e5c8 <USB_EPStopXfer>
 800a520:	4603      	mov	r3, r0
 800a522:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a524:	7afb      	ldrb	r3, [r7, #11]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b08a      	sub	sp, #40	@ 0x28
 800a532:	af02      	add	r7, sp, #8
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	4613      	mov	r3, r2
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	4413      	add	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	3338      	adds	r3, #56	@ 0x38
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	3304      	adds	r3, #4
 800a554:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	695a      	ldr	r2, [r3, #20]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d901      	bls.n	800a566 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e06c      	b.n	800a640 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	691a      	ldr	r2, [r3, #16]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	69fa      	ldr	r2, [r7, #28]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d902      	bls.n	800a582 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	3303      	adds	r3, #3
 800a586:	089b      	lsrs	r3, r3, #2
 800a588:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a58a:	e02b      	b.n	800a5e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	691a      	ldr	r2, [r3, #16]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	69fa      	ldr	r2, [r7, #28]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d902      	bls.n	800a5a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	3303      	adds	r3, #3
 800a5ac:	089b      	lsrs	r3, r3, #2
 800a5ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	68d9      	ldr	r1, [r3, #12]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	6978      	ldr	r0, [r7, #20]
 800a5c8:	f004 f8a8 	bl	800e71c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	441a      	add	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	695a      	ldr	r2, [r3, #20]
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	441a      	add	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d809      	bhi.n	800a60e <PCD_WriteEmptyTxFifo+0xe0>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	695a      	ldr	r2, [r3, #20]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a602:	429a      	cmp	r2, r3
 800a604:	d203      	bcs.n	800a60e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1be      	bne.n	800a58c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	429a      	cmp	r2, r3
 800a618:	d811      	bhi.n	800a63e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	f003 030f 	and.w	r3, r3, #15
 800a620:	2201      	movs	r2, #1
 800a622:	fa02 f303 	lsl.w	r3, r2, r3
 800a626:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	43db      	mvns	r3, r3
 800a634:	6939      	ldr	r1, [r7, #16]
 800a636:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a63a:	4013      	ands	r3, r2
 800a63c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	333c      	adds	r3, #60	@ 0x3c
 800a660:	3304      	adds	r3, #4
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d17b      	bne.n	800a776 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f003 0308 	and.w	r3, r3, #8
 800a684:	2b00      	cmp	r3, #0
 800a686:	d015      	beq.n	800a6b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	4a61      	ldr	r2, [pc, #388]	@ (800a810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	f240 80b9 	bls.w	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 80b3 	beq.w	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6b0:	6093      	str	r3, [r2, #8]
 800a6b2:	e0a7      	b.n	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	f003 0320 	and.w	r3, r3, #32
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	6093      	str	r3, [r2, #8]
 800a6d0:	e098      	b.n	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 8093 	bne.w	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	4a4b      	ldr	r2, [pc, #300]	@ (800a810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d90f      	bls.n	800a706 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00a      	beq.n	800a706 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a702:	6093      	str	r3, [r2, #8]
 800a704:	e07e      	b.n	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	4613      	mov	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	4413      	add	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	4413      	add	r3, r2
 800a718:	3304      	adds	r3, #4
 800a71a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1a      	ldr	r2, [r3, #32]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	0159      	lsls	r1, r3, #5
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	440b      	add	r3, r1
 800a728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a732:	1ad2      	subs	r2, r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d114      	bne.n	800a768 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d109      	bne.n	800a75a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a750:	461a      	mov	r2, r3
 800a752:	2101      	movs	r1, #1
 800a754:	f004 fa7a 	bl	800ec4c <USB_EP0_OutStart>
 800a758:	e006      	b.n	800a768 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	441a      	add	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f006 fd80 	bl	8011274 <HAL_PCD_DataOutStageCallback>
 800a774:	e046      	b.n	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	4a26      	ldr	r2, [pc, #152]	@ (800a814 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d124      	bne.n	800a7c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00a      	beq.n	800a79e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a794:	461a      	mov	r2, r3
 800a796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a79a:	6093      	str	r3, [r2, #8]
 800a79c:	e032      	b.n	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f003 0320 	and.w	r3, r3, #32
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f006 fd57 	bl	8011274 <HAL_PCD_DataOutStageCallback>
 800a7c6:	e01d      	b.n	800a804 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d114      	bne.n	800a7f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	440b      	add	r3, r1
 800a7dc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d108      	bne.n	800a7f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f004 fa2a 	bl	800ec4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f006 fd38 	bl	8011274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	4f54300a 	.word	0x4f54300a
 800a814:	4f54310a 	.word	0x4f54310a

0800a818 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	333c      	adds	r3, #60	@ 0x3c
 800a830:	3304      	adds	r3, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4a15      	ldr	r2, [pc, #84]	@ (800a8a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d90e      	bls.n	800a86c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a864:	461a      	mov	r2, r3
 800a866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a86a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f006 fcef 	bl	8011250 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4a0a      	ldr	r2, [pc, #40]	@ (800a8a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d90c      	bls.n	800a894 <PCD_EP_OutSetupPacket_int+0x7c>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d108      	bne.n	800a894 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a88c:	461a      	mov	r2, r3
 800a88e:	2101      	movs	r1, #1
 800a890:	f004 f9dc 	bl	800ec4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	4f54300a 	.word	0x4f54300a

0800a8a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d107      	bne.n	800a8d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a8c2:	883b      	ldrh	r3, [r7, #0]
 800a8c4:	0419      	lsls	r1, r3, #16
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	629a      	str	r2, [r3, #40]	@ 0x28
 800a8d0:	e028      	b.n	800a924 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d8:	0c1b      	lsrs	r3, r3, #16
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73fb      	strb	r3, [r7, #15]
 800a8e4:	e00d      	b.n	800a902 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	3340      	adds	r3, #64	@ 0x40
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	0c1b      	lsrs	r3, r3, #16
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	3301      	adds	r3, #1
 800a900:	73fb      	strb	r3, [r7, #15]
 800a902:	7bfa      	ldrb	r2, [r7, #15]
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	3b01      	subs	r3, #1
 800a908:	429a      	cmp	r2, r3
 800a90a:	d3ec      	bcc.n	800a8e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a90c:	883b      	ldrh	r3, [r7, #0]
 800a90e:	0418      	lsls	r0, r3, #16
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	3b01      	subs	r3, #1
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	4302      	orrs	r2, r0
 800a91c:	3340      	adds	r3, #64	@ 0x40
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	440b      	add	r3, r1
 800a922:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	887a      	ldrh	r2, [r7, #2]
 800a944:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a982:	4b05      	ldr	r3, [pc, #20]	@ (800a998 <HAL_PCDEx_ActivateLPM+0x44>)
 800a984:	4313      	orrs	r3, r2
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	10000003 	.word	0x10000003

0800a99c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a9bc:	4b19      	ldr	r3, [pc, #100]	@ (800aa24 <HAL_PWREx_ConfigSupply+0x70>)
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d00a      	beq.n	800a9de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a9c8:	4b16      	ldr	r3, [pc, #88]	@ (800aa24 <HAL_PWREx_ConfigSupply+0x70>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f003 0307 	and.w	r3, r3, #7
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d001      	beq.n	800a9da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e01f      	b.n	800aa1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e01d      	b.n	800aa1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a9de:	4b11      	ldr	r3, [pc, #68]	@ (800aa24 <HAL_PWREx_ConfigSupply+0x70>)
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f023 0207 	bic.w	r2, r3, #7
 800a9e6:	490f      	ldr	r1, [pc, #60]	@ (800aa24 <HAL_PWREx_ConfigSupply+0x70>)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a9ee:	f7fc ffa9 	bl	8007944 <HAL_GetTick>
 800a9f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a9f4:	e009      	b.n	800aa0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a9f6:	f7fc ffa5 	bl	8007944 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa04:	d901      	bls.n	800aa0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e007      	b.n	800aa1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa0a:	4b06      	ldr	r3, [pc, #24]	@ (800aa24 <HAL_PWREx_ConfigSupply+0x70>)
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa16:	d1ee      	bne.n	800a9f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	58024800 	.word	0x58024800

0800aa28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800aa2c:	4b05      	ldr	r3, [pc, #20]	@ (800aa44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	4a04      	ldr	r2, [pc, #16]	@ (800aa44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aa32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa36:	60d3      	str	r3, [r2, #12]
}
 800aa38:	bf00      	nop
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	58024800 	.word	0x58024800

0800aa48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08c      	sub	sp, #48	@ 0x30
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d102      	bne.n	800aa5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f000 bc48 	b.w	800b2ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8088 	beq.w	800ab7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa6a:	4b99      	ldr	r3, [pc, #612]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa74:	4b96      	ldr	r3, [pc, #600]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa78:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7c:	2b10      	cmp	r3, #16
 800aa7e:	d007      	beq.n	800aa90 <HAL_RCC_OscConfig+0x48>
 800aa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa82:	2b18      	cmp	r3, #24
 800aa84:	d111      	bne.n	800aaaa <HAL_RCC_OscConfig+0x62>
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	f003 0303 	and.w	r3, r3, #3
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d10c      	bne.n	800aaaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa90:	4b8f      	ldr	r3, [pc, #572]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d06d      	beq.n	800ab78 <HAL_RCC_OscConfig+0x130>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d169      	bne.n	800ab78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f000 bc21 	b.w	800b2ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab2:	d106      	bne.n	800aac2 <HAL_RCC_OscConfig+0x7a>
 800aab4:	4b86      	ldr	r3, [pc, #536]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a85      	ldr	r2, [pc, #532]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aaba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	e02e      	b.n	800ab20 <HAL_RCC_OscConfig+0xd8>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10c      	bne.n	800aae4 <HAL_RCC_OscConfig+0x9c>
 800aaca:	4b81      	ldr	r3, [pc, #516]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a80      	ldr	r2, [pc, #512]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	4b7e      	ldr	r3, [pc, #504]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a7d      	ldr	r2, [pc, #500]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aadc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	e01d      	b.n	800ab20 <HAL_RCC_OscConfig+0xd8>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aaec:	d10c      	bne.n	800ab08 <HAL_RCC_OscConfig+0xc0>
 800aaee:	4b78      	ldr	r3, [pc, #480]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a77      	ldr	r2, [pc, #476]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aaf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	4b75      	ldr	r3, [pc, #468]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a74      	ldr	r2, [pc, #464]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	e00b      	b.n	800ab20 <HAL_RCC_OscConfig+0xd8>
 800ab08:	4b71      	ldr	r3, [pc, #452]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a70      	ldr	r2, [pc, #448]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	4b6e      	ldr	r3, [pc, #440]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a6d      	ldr	r2, [pc, #436]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d013      	beq.n	800ab50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab28:	f7fc ff0c 	bl	8007944 <HAL_GetTick>
 800ab2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab2e:	e008      	b.n	800ab42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab30:	f7fc ff08 	bl	8007944 <HAL_GetTick>
 800ab34:	4602      	mov	r2, r0
 800ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	2b64      	cmp	r3, #100	@ 0x64
 800ab3c:	d901      	bls.n	800ab42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	e3d4      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab42:	4b63      	ldr	r3, [pc, #396]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d0f0      	beq.n	800ab30 <HAL_RCC_OscConfig+0xe8>
 800ab4e:	e014      	b.n	800ab7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab50:	f7fc fef8 	bl	8007944 <HAL_GetTick>
 800ab54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab56:	e008      	b.n	800ab6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab58:	f7fc fef4 	bl	8007944 <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	2b64      	cmp	r3, #100	@ 0x64
 800ab64:	d901      	bls.n	800ab6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e3c0      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab6a:	4b59      	ldr	r3, [pc, #356]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1f0      	bne.n	800ab58 <HAL_RCC_OscConfig+0x110>
 800ab76:	e000      	b.n	800ab7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 80ca 	beq.w	800ad1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab88:	4b51      	ldr	r3, [pc, #324]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab92:	4b4f      	ldr	r3, [pc, #316]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ab94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <HAL_RCC_OscConfig+0x166>
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	2b18      	cmp	r3, #24
 800aba2:	d156      	bne.n	800ac52 <HAL_RCC_OscConfig+0x20a>
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d151      	bne.n	800ac52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abae:	4b48      	ldr	r3, [pc, #288]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d005      	beq.n	800abc6 <HAL_RCC_OscConfig+0x17e>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e392      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abc6:	4b42      	ldr	r3, [pc, #264]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f023 0219 	bic.w	r2, r3, #25
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	493f      	ldr	r1, [pc, #252]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abd8:	f7fc feb4 	bl	8007944 <HAL_GetTick>
 800abdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abde:	e008      	b.n	800abf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abe0:	f7fc feb0 	bl	8007944 <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b02      	cmp	r3, #2
 800abec:	d901      	bls.n	800abf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e37c      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abf2:	4b37      	ldr	r3, [pc, #220]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0304 	and.w	r3, r3, #4
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0f0      	beq.n	800abe0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abfe:	f7fc fed1 	bl	80079a4 <HAL_GetREVID>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d817      	bhi.n	800ac3c <HAL_RCC_OscConfig+0x1f4>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	2b40      	cmp	r3, #64	@ 0x40
 800ac12:	d108      	bne.n	800ac26 <HAL_RCC_OscConfig+0x1de>
 800ac14:	4b2e      	ldr	r3, [pc, #184]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ac1c:	4a2c      	ldr	r2, [pc, #176]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac24:	e07a      	b.n	800ad1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac26:	4b2a      	ldr	r3, [pc, #168]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	031b      	lsls	r3, r3, #12
 800ac34:	4926      	ldr	r1, [pc, #152]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac3a:	e06f      	b.n	800ad1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac3c:	4b24      	ldr	r3, [pc, #144]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	061b      	lsls	r3, r3, #24
 800ac4a:	4921      	ldr	r1, [pc, #132]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac50:	e064      	b.n	800ad1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d047      	beq.n	800acea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac5a:	4b1d      	ldr	r3, [pc, #116]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f023 0219 	bic.w	r2, r3, #25
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	491a      	ldr	r1, [pc, #104]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac6c:	f7fc fe6a 	bl	8007944 <HAL_GetTick>
 800ac70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac72:	e008      	b.n	800ac86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac74:	f7fc fe66 	bl	8007944 <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d901      	bls.n	800ac86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ac82:	2303      	movs	r3, #3
 800ac84:	e332      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac86:	4b12      	ldr	r3, [pc, #72]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0f0      	beq.n	800ac74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac92:	f7fc fe87 	bl	80079a4 <HAL_GetREVID>
 800ac96:	4603      	mov	r3, r0
 800ac98:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d819      	bhi.n	800acd4 <HAL_RCC_OscConfig+0x28c>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b40      	cmp	r3, #64	@ 0x40
 800aca6:	d108      	bne.n	800acba <HAL_RCC_OscConfig+0x272>
 800aca8:	4b09      	ldr	r3, [pc, #36]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800acb0:	4a07      	ldr	r2, [pc, #28]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800acb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acb6:	6053      	str	r3, [r2, #4]
 800acb8:	e030      	b.n	800ad1c <HAL_RCC_OscConfig+0x2d4>
 800acba:	4b05      	ldr	r3, [pc, #20]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	031b      	lsls	r3, r3, #12
 800acc8:	4901      	ldr	r1, [pc, #4]	@ (800acd0 <HAL_RCC_OscConfig+0x288>)
 800acca:	4313      	orrs	r3, r2
 800accc:	604b      	str	r3, [r1, #4]
 800acce:	e025      	b.n	800ad1c <HAL_RCC_OscConfig+0x2d4>
 800acd0:	58024400 	.word	0x58024400
 800acd4:	4b9a      	ldr	r3, [pc, #616]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	061b      	lsls	r3, r3, #24
 800ace2:	4997      	ldr	r1, [pc, #604]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	604b      	str	r3, [r1, #4]
 800ace8:	e018      	b.n	800ad1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acea:	4b95      	ldr	r3, [pc, #596]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a94      	ldr	r2, [pc, #592]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800acf0:	f023 0301 	bic.w	r3, r3, #1
 800acf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf6:	f7fc fe25 	bl	8007944 <HAL_GetTick>
 800acfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800acfc:	e008      	b.n	800ad10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acfe:	f7fc fe21 	bl	8007944 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d901      	bls.n	800ad10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e2ed      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad10:	4b8b      	ldr	r3, [pc, #556]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1f0      	bne.n	800acfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0310 	and.w	r3, r3, #16
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 80a9 	beq.w	800ae7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad2a:	4b85      	ldr	r3, [pc, #532]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad34:	4b82      	ldr	r3, [pc, #520]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ad36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b08      	cmp	r3, #8
 800ad3e:	d007      	beq.n	800ad50 <HAL_RCC_OscConfig+0x308>
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	2b18      	cmp	r3, #24
 800ad44:	d13a      	bne.n	800adbc <HAL_RCC_OscConfig+0x374>
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d135      	bne.n	800adbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad50:	4b7b      	ldr	r3, [pc, #492]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d005      	beq.n	800ad68 <HAL_RCC_OscConfig+0x320>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	2b80      	cmp	r3, #128	@ 0x80
 800ad62:	d001      	beq.n	800ad68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e2c1      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad68:	f7fc fe1c 	bl	80079a4 <HAL_GetREVID>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d817      	bhi.n	800ada6 <HAL_RCC_OscConfig+0x35e>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	2b20      	cmp	r3, #32
 800ad7c:	d108      	bne.n	800ad90 <HAL_RCC_OscConfig+0x348>
 800ad7e:	4b70      	ldr	r3, [pc, #448]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ad86:	4a6e      	ldr	r2, [pc, #440]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ad88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad8e:	e075      	b.n	800ae7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad90:	4b6b      	ldr	r3, [pc, #428]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
 800ad9c:	069b      	lsls	r3, r3, #26
 800ad9e:	4968      	ldr	r1, [pc, #416]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ada4:	e06a      	b.n	800ae7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ada6:	4b66      	ldr	r3, [pc, #408]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	061b      	lsls	r3, r3, #24
 800adb4:	4962      	ldr	r1, [pc, #392]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800adb6:	4313      	orrs	r3, r2
 800adb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800adba:	e05f      	b.n	800ae7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	69db      	ldr	r3, [r3, #28]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d042      	beq.n	800ae4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800adc4:	4b5e      	ldr	r3, [pc, #376]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a5d      	ldr	r2, [pc, #372]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800adca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add0:	f7fc fdb8 	bl	8007944 <HAL_GetTick>
 800add4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800add6:	e008      	b.n	800adea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800add8:	f7fc fdb4 	bl	8007944 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d901      	bls.n	800adea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e280      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adea:	4b55      	ldr	r3, [pc, #340]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f0      	beq.n	800add8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adf6:	f7fc fdd5 	bl	80079a4 <HAL_GetREVID>
 800adfa:	4603      	mov	r3, r0
 800adfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d817      	bhi.n	800ae34 <HAL_RCC_OscConfig+0x3ec>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	2b20      	cmp	r3, #32
 800ae0a:	d108      	bne.n	800ae1e <HAL_RCC_OscConfig+0x3d6>
 800ae0c:	4b4c      	ldr	r3, [pc, #304]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ae14:	4a4a      	ldr	r2, [pc, #296]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae1a:	6053      	str	r3, [r2, #4]
 800ae1c:	e02e      	b.n	800ae7c <HAL_RCC_OscConfig+0x434>
 800ae1e:	4b48      	ldr	r3, [pc, #288]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	069b      	lsls	r3, r3, #26
 800ae2c:	4944      	ldr	r1, [pc, #272]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	604b      	str	r3, [r1, #4]
 800ae32:	e023      	b.n	800ae7c <HAL_RCC_OscConfig+0x434>
 800ae34:	4b42      	ldr	r3, [pc, #264]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	061b      	lsls	r3, r3, #24
 800ae42:	493f      	ldr	r1, [pc, #252]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	60cb      	str	r3, [r1, #12]
 800ae48:	e018      	b.n	800ae7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ae4a:	4b3d      	ldr	r3, [pc, #244]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a3c      	ldr	r2, [pc, #240]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae56:	f7fc fd75 	bl	8007944 <HAL_GetTick>
 800ae5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae5c:	e008      	b.n	800ae70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ae5e:	f7fc fd71 	bl	8007944 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d901      	bls.n	800ae70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e23d      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ae70:	4b33      	ldr	r3, [pc, #204]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1f0      	bne.n	800ae5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d036      	beq.n	800aef6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d019      	beq.n	800aec4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae90:	4b2b      	ldr	r3, [pc, #172]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae94:	4a2a      	ldr	r2, [pc, #168]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800ae96:	f043 0301 	orr.w	r3, r3, #1
 800ae9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae9c:	f7fc fd52 	bl	8007944 <HAL_GetTick>
 800aea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aea2:	e008      	b.n	800aeb6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aea4:	f7fc fd4e 	bl	8007944 <HAL_GetTick>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d901      	bls.n	800aeb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e21a      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aeb6:	4b22      	ldr	r3, [pc, #136]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800aeb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aeba:	f003 0302 	and.w	r3, r3, #2
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0f0      	beq.n	800aea4 <HAL_RCC_OscConfig+0x45c>
 800aec2:	e018      	b.n	800aef6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aec4:	4b1e      	ldr	r3, [pc, #120]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800aec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aec8:	4a1d      	ldr	r2, [pc, #116]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800aeca:	f023 0301 	bic.w	r3, r3, #1
 800aece:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aed0:	f7fc fd38 	bl	8007944 <HAL_GetTick>
 800aed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aed6:	e008      	b.n	800aeea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aed8:	f7fc fd34 	bl	8007944 <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d901      	bls.n	800aeea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e200      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aeea:	4b15      	ldr	r3, [pc, #84]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800aeec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aeee:	f003 0302 	and.w	r3, r3, #2
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1f0      	bne.n	800aed8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d039      	beq.n	800af76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d01c      	beq.n	800af44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af0a:	4b0d      	ldr	r3, [pc, #52]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a0c      	ldr	r2, [pc, #48]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800af10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800af14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af16:	f7fc fd15 	bl	8007944 <HAL_GetTick>
 800af1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af1c:	e008      	b.n	800af30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af1e:	f7fc fd11 	bl	8007944 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e1dd      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af30:	4b03      	ldr	r3, [pc, #12]	@ (800af40 <HAL_RCC_OscConfig+0x4f8>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0f0      	beq.n	800af1e <HAL_RCC_OscConfig+0x4d6>
 800af3c:	e01b      	b.n	800af76 <HAL_RCC_OscConfig+0x52e>
 800af3e:	bf00      	nop
 800af40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af44:	4b9b      	ldr	r3, [pc, #620]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a9a      	ldr	r2, [pc, #616]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800af4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af50:	f7fc fcf8 	bl	8007944 <HAL_GetTick>
 800af54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af56:	e008      	b.n	800af6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af58:	f7fc fcf4 	bl	8007944 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b02      	cmp	r3, #2
 800af64:	d901      	bls.n	800af6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e1c0      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af6a:	4b92      	ldr	r3, [pc, #584]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1f0      	bne.n	800af58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0304 	and.w	r3, r3, #4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 8081 	beq.w	800b086 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af84:	4b8c      	ldr	r3, [pc, #560]	@ (800b1b8 <HAL_RCC_OscConfig+0x770>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a8b      	ldr	r2, [pc, #556]	@ (800b1b8 <HAL_RCC_OscConfig+0x770>)
 800af8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af90:	f7fc fcd8 	bl	8007944 <HAL_GetTick>
 800af94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af96:	e008      	b.n	800afaa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af98:	f7fc fcd4 	bl	8007944 <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	2b64      	cmp	r3, #100	@ 0x64
 800afa4:	d901      	bls.n	800afaa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e1a0      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afaa:	4b83      	ldr	r3, [pc, #524]	@ (800b1b8 <HAL_RCC_OscConfig+0x770>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0f0      	beq.n	800af98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d106      	bne.n	800afcc <HAL_RCC_OscConfig+0x584>
 800afbe:	4b7d      	ldr	r3, [pc, #500]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800afc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afc2:	4a7c      	ldr	r2, [pc, #496]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800afc4:	f043 0301 	orr.w	r3, r3, #1
 800afc8:	6713      	str	r3, [r2, #112]	@ 0x70
 800afca:	e02d      	b.n	800b028 <HAL_RCC_OscConfig+0x5e0>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10c      	bne.n	800afee <HAL_RCC_OscConfig+0x5a6>
 800afd4:	4b77      	ldr	r3, [pc, #476]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800afd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd8:	4a76      	ldr	r2, [pc, #472]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800afda:	f023 0301 	bic.w	r3, r3, #1
 800afde:	6713      	str	r3, [r2, #112]	@ 0x70
 800afe0:	4b74      	ldr	r3, [pc, #464]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800afe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afe4:	4a73      	ldr	r2, [pc, #460]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800afe6:	f023 0304 	bic.w	r3, r3, #4
 800afea:	6713      	str	r3, [r2, #112]	@ 0x70
 800afec:	e01c      	b.n	800b028 <HAL_RCC_OscConfig+0x5e0>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	2b05      	cmp	r3, #5
 800aff4:	d10c      	bne.n	800b010 <HAL_RCC_OscConfig+0x5c8>
 800aff6:	4b6f      	ldr	r3, [pc, #444]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800aff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800affa:	4a6e      	ldr	r2, [pc, #440]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800affc:	f043 0304 	orr.w	r3, r3, #4
 800b000:	6713      	str	r3, [r2, #112]	@ 0x70
 800b002:	4b6c      	ldr	r3, [pc, #432]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b006:	4a6b      	ldr	r2, [pc, #428]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b008:	f043 0301 	orr.w	r3, r3, #1
 800b00c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b00e:	e00b      	b.n	800b028 <HAL_RCC_OscConfig+0x5e0>
 800b010:	4b68      	ldr	r3, [pc, #416]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b014:	4a67      	ldr	r2, [pc, #412]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b016:	f023 0301 	bic.w	r3, r3, #1
 800b01a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b01c:	4b65      	ldr	r3, [pc, #404]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b01e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b020:	4a64      	ldr	r2, [pc, #400]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b022:	f023 0304 	bic.w	r3, r3, #4
 800b026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d015      	beq.n	800b05c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b030:	f7fc fc88 	bl	8007944 <HAL_GetTick>
 800b034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b036:	e00a      	b.n	800b04e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b038:	f7fc fc84 	bl	8007944 <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b046:	4293      	cmp	r3, r2
 800b048:	d901      	bls.n	800b04e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e14e      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b04e:	4b59      	ldr	r3, [pc, #356]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b052:	f003 0302 	and.w	r3, r3, #2
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0ee      	beq.n	800b038 <HAL_RCC_OscConfig+0x5f0>
 800b05a:	e014      	b.n	800b086 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b05c:	f7fc fc72 	bl	8007944 <HAL_GetTick>
 800b060:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b062:	e00a      	b.n	800b07a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b064:	f7fc fc6e 	bl	8007944 <HAL_GetTick>
 800b068:	4602      	mov	r2, r0
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b072:	4293      	cmp	r3, r2
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e138      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b07a:	4b4e      	ldr	r3, [pc, #312]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b07c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1ee      	bne.n	800b064 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 812d 	beq.w	800b2ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b090:	4b48      	ldr	r3, [pc, #288]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b098:	2b18      	cmp	r3, #24
 800b09a:	f000 80bd 	beq.w	800b218 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	f040 809e 	bne.w	800b1e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0a8:	4b42      	ldr	r3, [pc, #264]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a41      	ldr	r2, [pc, #260]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b0ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b4:	f7fc fc46 	bl	8007944 <HAL_GetTick>
 800b0b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0ba:	e008      	b.n	800b0ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0bc:	f7fc fc42 	bl	8007944 <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d901      	bls.n	800b0ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e10e      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0ce:	4b39      	ldr	r3, [pc, #228]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1f0      	bne.n	800b0bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0da:	4b36      	ldr	r3, [pc, #216]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b0dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b0de:	4b37      	ldr	r3, [pc, #220]	@ (800b1bc <HAL_RCC_OscConfig+0x774>)
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b0ea:	0112      	lsls	r2, r2, #4
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	4931      	ldr	r1, [pc, #196]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b102:	3b01      	subs	r3, #1
 800b104:	025b      	lsls	r3, r3, #9
 800b106:	b29b      	uxth	r3, r3
 800b108:	431a      	orrs	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10e:	3b01      	subs	r3, #1
 800b110:	041b      	lsls	r3, r3, #16
 800b112:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b116:	431a      	orrs	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b11c:	3b01      	subs	r3, #1
 800b11e:	061b      	lsls	r3, r3, #24
 800b120:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b124:	4923      	ldr	r1, [pc, #140]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b126:	4313      	orrs	r3, r2
 800b128:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b12a:	4b22      	ldr	r3, [pc, #136]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12e:	4a21      	ldr	r2, [pc, #132]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b130:	f023 0301 	bic.w	r3, r3, #1
 800b134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b136:	4b1f      	ldr	r3, [pc, #124]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b13a:	4b21      	ldr	r3, [pc, #132]	@ (800b1c0 <HAL_RCC_OscConfig+0x778>)
 800b13c:	4013      	ands	r3, r2
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b142:	00d2      	lsls	r2, r2, #3
 800b144:	491b      	ldr	r1, [pc, #108]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b146:	4313      	orrs	r3, r2
 800b148:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b14a:	4b1a      	ldr	r3, [pc, #104]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14e:	f023 020c 	bic.w	r2, r3, #12
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b156:	4917      	ldr	r1, [pc, #92]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b15c:	4b15      	ldr	r3, [pc, #84]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b160:	f023 0202 	bic.w	r2, r3, #2
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b168:	4912      	ldr	r1, [pc, #72]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b16e:	4b11      	ldr	r3, [pc, #68]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b172:	4a10      	ldr	r2, [pc, #64]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b17a:	4b0e      	ldr	r3, [pc, #56]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17e:	4a0d      	ldr	r2, [pc, #52]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b186:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b18a:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b18c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b192:	4b08      	ldr	r3, [pc, #32]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b196:	4a07      	ldr	r2, [pc, #28]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b198:	f043 0301 	orr.w	r3, r3, #1
 800b19c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b19e:	4b05      	ldr	r3, [pc, #20]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a04      	ldr	r2, [pc, #16]	@ (800b1b4 <HAL_RCC_OscConfig+0x76c>)
 800b1a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b1a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1aa:	f7fc fbcb 	bl	8007944 <HAL_GetTick>
 800b1ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1b0:	e011      	b.n	800b1d6 <HAL_RCC_OscConfig+0x78e>
 800b1b2:	bf00      	nop
 800b1b4:	58024400 	.word	0x58024400
 800b1b8:	58024800 	.word	0x58024800
 800b1bc:	fffffc0c 	.word	0xfffffc0c
 800b1c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1c4:	f7fc fbbe 	bl	8007944 <HAL_GetTick>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d901      	bls.n	800b1d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b1d2:	2303      	movs	r3, #3
 800b1d4:	e08a      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1d6:	4b47      	ldr	r3, [pc, #284]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0f0      	beq.n	800b1c4 <HAL_RCC_OscConfig+0x77c>
 800b1e2:	e082      	b.n	800b2ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1e4:	4b43      	ldr	r3, [pc, #268]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a42      	ldr	r2, [pc, #264]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b1ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f0:	f7fc fba8 	bl	8007944 <HAL_GetTick>
 800b1f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b1f6:	e008      	b.n	800b20a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1f8:	f7fc fba4 	bl	8007944 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b02      	cmp	r3, #2
 800b204:	d901      	bls.n	800b20a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e070      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b20a:	4b3a      	ldr	r3, [pc, #232]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1f0      	bne.n	800b1f8 <HAL_RCC_OscConfig+0x7b0>
 800b216:	e068      	b.n	800b2ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b218:	4b36      	ldr	r3, [pc, #216]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b21e:	4b35      	ldr	r3, [pc, #212]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b222:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d031      	beq.n	800b290 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	f003 0203 	and.w	r2, r3, #3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b236:	429a      	cmp	r2, r3
 800b238:	d12a      	bne.n	800b290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	091b      	lsrs	r3, r3, #4
 800b23e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b246:	429a      	cmp	r2, r3
 800b248:	d122      	bne.n	800b290 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b254:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b256:	429a      	cmp	r2, r3
 800b258:	d11a      	bne.n	800b290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	0a5b      	lsrs	r3, r3, #9
 800b25e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b266:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b268:	429a      	cmp	r2, r3
 800b26a:	d111      	bne.n	800b290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	0c1b      	lsrs	r3, r3, #16
 800b270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b278:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d108      	bne.n	800b290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	0e1b      	lsrs	r3, r3, #24
 800b282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b28a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d001      	beq.n	800b294 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e02b      	b.n	800b2ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b294:	4b17      	ldr	r3, [pc, #92]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b29e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d01f      	beq.n	800b2ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b2aa:	4b12      	ldr	r3, [pc, #72]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ae:	4a11      	ldr	r2, [pc, #68]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b2b0:	f023 0301 	bic.w	r3, r3, #1
 800b2b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b2b6:	f7fc fb45 	bl	8007944 <HAL_GetTick>
 800b2ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b2bc:	bf00      	nop
 800b2be:	f7fc fb41 	bl	8007944 <HAL_GetTick>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d0f9      	beq.n	800b2be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b2ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b2cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f8 <HAL_RCC_OscConfig+0x8b0>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b2d6:	00d2      	lsls	r2, r2, #3
 800b2d8:	4906      	ldr	r1, [pc, #24]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b2de:	4b05      	ldr	r3, [pc, #20]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e2:	4a04      	ldr	r2, [pc, #16]	@ (800b2f4 <HAL_RCC_OscConfig+0x8ac>)
 800b2e4:	f043 0301 	orr.w	r3, r3, #1
 800b2e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3730      	adds	r7, #48	@ 0x30
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	58024400 	.word	0x58024400
 800b2f8:	ffff0007 	.word	0xffff0007

0800b2fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e19c      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b310:	4b8a      	ldr	r3, [pc, #552]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 030f 	and.w	r3, r3, #15
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d910      	bls.n	800b340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b31e:	4b87      	ldr	r3, [pc, #540]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f023 020f 	bic.w	r2, r3, #15
 800b326:	4985      	ldr	r1, [pc, #532]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b32e:	4b83      	ldr	r3, [pc, #524]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 030f 	and.w	r3, r3, #15
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d001      	beq.n	800b340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e184      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d010      	beq.n	800b36e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	691a      	ldr	r2, [r3, #16]
 800b350:	4b7b      	ldr	r3, [pc, #492]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b358:	429a      	cmp	r2, r3
 800b35a:	d908      	bls.n	800b36e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b35c:	4b78      	ldr	r3, [pc, #480]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	4975      	ldr	r1, [pc, #468]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0308 	and.w	r3, r3, #8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d010      	beq.n	800b39c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	695a      	ldr	r2, [r3, #20]
 800b37e:	4b70      	ldr	r3, [pc, #448]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b386:	429a      	cmp	r2, r3
 800b388:	d908      	bls.n	800b39c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b38a:	4b6d      	ldr	r3, [pc, #436]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	496a      	ldr	r1, [pc, #424]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b398:	4313      	orrs	r3, r2
 800b39a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0310 	and.w	r3, r3, #16
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d010      	beq.n	800b3ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699a      	ldr	r2, [r3, #24]
 800b3ac:	4b64      	ldr	r3, [pc, #400]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b3ae:	69db      	ldr	r3, [r3, #28]
 800b3b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d908      	bls.n	800b3ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3b8:	4b61      	ldr	r3, [pc, #388]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	495e      	ldr	r1, [pc, #376]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d010      	beq.n	800b3f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69da      	ldr	r2, [r3, #28]
 800b3da:	4b59      	ldr	r3, [pc, #356]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d908      	bls.n	800b3f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b3e6:	4b56      	ldr	r3, [pc, #344]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	69db      	ldr	r3, [r3, #28]
 800b3f2:	4953      	ldr	r1, [pc, #332]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 0302 	and.w	r3, r3, #2
 800b400:	2b00      	cmp	r3, #0
 800b402:	d010      	beq.n	800b426 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68da      	ldr	r2, [r3, #12]
 800b408:	4b4d      	ldr	r3, [pc, #308]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	f003 030f 	and.w	r3, r3, #15
 800b410:	429a      	cmp	r2, r3
 800b412:	d908      	bls.n	800b426 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b414:	4b4a      	ldr	r3, [pc, #296]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	f023 020f 	bic.w	r2, r3, #15
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	4947      	ldr	r1, [pc, #284]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b422:	4313      	orrs	r3, r2
 800b424:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d055      	beq.n	800b4de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b432:	4b43      	ldr	r3, [pc, #268]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	4940      	ldr	r1, [pc, #256]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b440:	4313      	orrs	r3, r2
 800b442:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d107      	bne.n	800b45c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b44c:	4b3c      	ldr	r3, [pc, #240]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d121      	bne.n	800b49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e0f6      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	2b03      	cmp	r3, #3
 800b462:	d107      	bne.n	800b474 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b464:	4b36      	ldr	r3, [pc, #216]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d115      	bne.n	800b49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e0ea      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d107      	bne.n	800b48c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b47c:	4b30      	ldr	r3, [pc, #192]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b484:	2b00      	cmp	r3, #0
 800b486:	d109      	bne.n	800b49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e0de      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b48c:	4b2c      	ldr	r3, [pc, #176]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e0d6      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b49c:	4b28      	ldr	r3, [pc, #160]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b49e:	691b      	ldr	r3, [r3, #16]
 800b4a0:	f023 0207 	bic.w	r2, r3, #7
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	4925      	ldr	r1, [pc, #148]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ae:	f7fc fa49 	bl	8007944 <HAL_GetTick>
 800b4b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4b4:	e00a      	b.n	800b4cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4b6:	f7fc fa45 	bl	8007944 <HAL_GetTick>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d901      	bls.n	800b4cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e0be      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d1eb      	bne.n	800b4b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 0302 	and.w	r3, r3, #2
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d010      	beq.n	800b50c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68da      	ldr	r2, [r3, #12]
 800b4ee:	4b14      	ldr	r3, [pc, #80]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	f003 030f 	and.w	r3, r3, #15
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d208      	bcs.n	800b50c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4fa:	4b11      	ldr	r3, [pc, #68]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	f023 020f 	bic.w	r2, r3, #15
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	490e      	ldr	r1, [pc, #56]	@ (800b540 <HAL_RCC_ClockConfig+0x244>)
 800b508:	4313      	orrs	r3, r2
 800b50a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b50c:	4b0b      	ldr	r3, [pc, #44]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 030f 	and.w	r3, r3, #15
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d214      	bcs.n	800b544 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b51a:	4b08      	ldr	r3, [pc, #32]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f023 020f 	bic.w	r2, r3, #15
 800b522:	4906      	ldr	r1, [pc, #24]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	4313      	orrs	r3, r2
 800b528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b52a:	4b04      	ldr	r3, [pc, #16]	@ (800b53c <HAL_RCC_ClockConfig+0x240>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 030f 	and.w	r3, r3, #15
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d005      	beq.n	800b544 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e086      	b.n	800b64a <HAL_RCC_ClockConfig+0x34e>
 800b53c:	52002000 	.word	0x52002000
 800b540:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d010      	beq.n	800b572 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	4b3f      	ldr	r3, [pc, #252]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d208      	bcs.n	800b572 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b560:	4b3c      	ldr	r3, [pc, #240]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	4939      	ldr	r1, [pc, #228]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b56e:	4313      	orrs	r3, r2
 800b570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 0308 	and.w	r3, r3, #8
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d010      	beq.n	800b5a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695a      	ldr	r2, [r3, #20]
 800b582:	4b34      	ldr	r3, [pc, #208]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d208      	bcs.n	800b5a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b58e:	4b31      	ldr	r3, [pc, #196]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	492e      	ldr	r1, [pc, #184]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0310 	and.w	r3, r3, #16
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d010      	beq.n	800b5ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	699a      	ldr	r2, [r3, #24]
 800b5b0:	4b28      	ldr	r3, [pc, #160]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b5b2:	69db      	ldr	r3, [r3, #28]
 800b5b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d208      	bcs.n	800b5ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5bc:	4b25      	ldr	r3, [pc, #148]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b5be:	69db      	ldr	r3, [r3, #28]
 800b5c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	4922      	ldr	r1, [pc, #136]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 0320 	and.w	r3, r3, #32
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d010      	beq.n	800b5fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	69da      	ldr	r2, [r3, #28]
 800b5de:	4b1d      	ldr	r3, [pc, #116]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d208      	bcs.n	800b5fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b5ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	4917      	ldr	r1, [pc, #92]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b5fc:	f000 f834 	bl	800b668 <HAL_RCC_GetSysClockFreq>
 800b600:	4602      	mov	r2, r0
 800b602:	4b14      	ldr	r3, [pc, #80]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	0a1b      	lsrs	r3, r3, #8
 800b608:	f003 030f 	and.w	r3, r3, #15
 800b60c:	4912      	ldr	r1, [pc, #72]	@ (800b658 <HAL_RCC_ClockConfig+0x35c>)
 800b60e:	5ccb      	ldrb	r3, [r1, r3]
 800b610:	f003 031f 	and.w	r3, r3, #31
 800b614:	fa22 f303 	lsr.w	r3, r2, r3
 800b618:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b61a:	4b0e      	ldr	r3, [pc, #56]	@ (800b654 <HAL_RCC_ClockConfig+0x358>)
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	f003 030f 	and.w	r3, r3, #15
 800b622:	4a0d      	ldr	r2, [pc, #52]	@ (800b658 <HAL_RCC_ClockConfig+0x35c>)
 800b624:	5cd3      	ldrb	r3, [r2, r3]
 800b626:	f003 031f 	and.w	r3, r3, #31
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	fa22 f303 	lsr.w	r3, r2, r3
 800b630:	4a0a      	ldr	r2, [pc, #40]	@ (800b65c <HAL_RCC_ClockConfig+0x360>)
 800b632:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b634:	4a0a      	ldr	r2, [pc, #40]	@ (800b660 <HAL_RCC_ClockConfig+0x364>)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b63a:	4b0a      	ldr	r3, [pc, #40]	@ (800b664 <HAL_RCC_ClockConfig+0x368>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fc f936 	bl	80078b0 <HAL_InitTick>
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	58024400 	.word	0x58024400
 800b658:	08013860 	.word	0x08013860
 800b65c:	240003d4 	.word	0x240003d4
 800b660:	240003d0 	.word	0x240003d0
 800b664:	240003d8 	.word	0x240003d8

0800b668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	b089      	sub	sp, #36	@ 0x24
 800b66c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b66e:	4bb3      	ldr	r3, [pc, #716]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b676:	2b18      	cmp	r3, #24
 800b678:	f200 8155 	bhi.w	800b926 <HAL_RCC_GetSysClockFreq+0x2be>
 800b67c:	a201      	add	r2, pc, #4	@ (adr r2, 800b684 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b682:	bf00      	nop
 800b684:	0800b6e9 	.word	0x0800b6e9
 800b688:	0800b927 	.word	0x0800b927
 800b68c:	0800b927 	.word	0x0800b927
 800b690:	0800b927 	.word	0x0800b927
 800b694:	0800b927 	.word	0x0800b927
 800b698:	0800b927 	.word	0x0800b927
 800b69c:	0800b927 	.word	0x0800b927
 800b6a0:	0800b927 	.word	0x0800b927
 800b6a4:	0800b70f 	.word	0x0800b70f
 800b6a8:	0800b927 	.word	0x0800b927
 800b6ac:	0800b927 	.word	0x0800b927
 800b6b0:	0800b927 	.word	0x0800b927
 800b6b4:	0800b927 	.word	0x0800b927
 800b6b8:	0800b927 	.word	0x0800b927
 800b6bc:	0800b927 	.word	0x0800b927
 800b6c0:	0800b927 	.word	0x0800b927
 800b6c4:	0800b715 	.word	0x0800b715
 800b6c8:	0800b927 	.word	0x0800b927
 800b6cc:	0800b927 	.word	0x0800b927
 800b6d0:	0800b927 	.word	0x0800b927
 800b6d4:	0800b927 	.word	0x0800b927
 800b6d8:	0800b927 	.word	0x0800b927
 800b6dc:	0800b927 	.word	0x0800b927
 800b6e0:	0800b927 	.word	0x0800b927
 800b6e4:	0800b71b 	.word	0x0800b71b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6e8:	4b94      	ldr	r3, [pc, #592]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0320 	and.w	r3, r3, #32
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d009      	beq.n	800b708 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6f4:	4b91      	ldr	r3, [pc, #580]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	08db      	lsrs	r3, r3, #3
 800b6fa:	f003 0303 	and.w	r3, r3, #3
 800b6fe:	4a90      	ldr	r2, [pc, #576]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b700:	fa22 f303 	lsr.w	r3, r2, r3
 800b704:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b706:	e111      	b.n	800b92c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b708:	4b8d      	ldr	r3, [pc, #564]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b70a:	61bb      	str	r3, [r7, #24]
      break;
 800b70c:	e10e      	b.n	800b92c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b70e:	4b8d      	ldr	r3, [pc, #564]	@ (800b944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b710:	61bb      	str	r3, [r7, #24]
      break;
 800b712:	e10b      	b.n	800b92c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b714:	4b8c      	ldr	r3, [pc, #560]	@ (800b948 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b716:	61bb      	str	r3, [r7, #24]
      break;
 800b718:	e108      	b.n	800b92c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b71a:	4b88      	ldr	r3, [pc, #544]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71e:	f003 0303 	and.w	r3, r3, #3
 800b722:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b724:	4b85      	ldr	r3, [pc, #532]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b728:	091b      	lsrs	r3, r3, #4
 800b72a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b72e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b730:	4b82      	ldr	r3, [pc, #520]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	f003 0301 	and.w	r3, r3, #1
 800b738:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b73a:	4b80      	ldr	r3, [pc, #512]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b73e:	08db      	lsrs	r3, r3, #3
 800b740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	fb02 f303 	mul.w	r3, r2, r3
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b752:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 80e1 	beq.w	800b920 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	2b02      	cmp	r3, #2
 800b762:	f000 8083 	beq.w	800b86c <HAL_RCC_GetSysClockFreq+0x204>
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	f200 80a1 	bhi.w	800b8b0 <HAL_RCC_GetSysClockFreq+0x248>
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <HAL_RCC_GetSysClockFreq+0x114>
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d056      	beq.n	800b828 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b77a:	e099      	b.n	800b8b0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b77c:	4b6f      	ldr	r3, [pc, #444]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d02d      	beq.n	800b7e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b788:	4b6c      	ldr	r3, [pc, #432]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	08db      	lsrs	r3, r3, #3
 800b78e:	f003 0303 	and.w	r3, r3, #3
 800b792:	4a6b      	ldr	r2, [pc, #428]	@ (800b940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b794:	fa22 f303 	lsr.w	r3, r2, r3
 800b798:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	ee07 3a90 	vmov	s15, r3
 800b7a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7b2:	4b62      	ldr	r3, [pc, #392]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b7e2:	e087      	b.n	800b8f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	ee07 3a90 	vmov	s15, r3
 800b7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b950 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f6:	4b51      	ldr	r3, [pc, #324]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fe:	ee07 3a90 	vmov	s15, r3
 800b802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b806:	ed97 6a02 	vldr	s12, [r7, #8]
 800b80a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b826:	e065      	b.n	800b8f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	ee07 3a90 	vmov	s15, r3
 800b82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b832:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b954 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b83a:	4b40      	ldr	r3, [pc, #256]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b84e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b85a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b86a:	e043      	b.n	800b8f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	ee07 3a90 	vmov	s15, r3
 800b872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b876:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b958 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87e:	4b2f      	ldr	r3, [pc, #188]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b892:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8ae:	e021      	b.n	800b8f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b954 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c2:	4b1e      	ldr	r3, [pc, #120]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b8f4:	4b11      	ldr	r3, [pc, #68]	@ (800b93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f8:	0a5b      	lsrs	r3, r3, #9
 800b8fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8fe:	3301      	adds	r3, #1
 800b900:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b918:	ee17 3a90 	vmov	r3, s15
 800b91c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b91e:	e005      	b.n	800b92c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	61bb      	str	r3, [r7, #24]
      break;
 800b924:	e002      	b.n	800b92c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b926:	4b07      	ldr	r3, [pc, #28]	@ (800b944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b928:	61bb      	str	r3, [r7, #24]
      break;
 800b92a:	bf00      	nop
  }

  return sysclockfreq;
 800b92c:	69bb      	ldr	r3, [r7, #24]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3724      	adds	r7, #36	@ 0x24
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	58024400 	.word	0x58024400
 800b940:	03d09000 	.word	0x03d09000
 800b944:	003d0900 	.word	0x003d0900
 800b948:	017d7840 	.word	0x017d7840
 800b94c:	46000000 	.word	0x46000000
 800b950:	4c742400 	.word	0x4c742400
 800b954:	4a742400 	.word	0x4a742400
 800b958:	4bbebc20 	.word	0x4bbebc20

0800b95c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b962:	f7ff fe81 	bl	800b668 <HAL_RCC_GetSysClockFreq>
 800b966:	4602      	mov	r2, r0
 800b968:	4b10      	ldr	r3, [pc, #64]	@ (800b9ac <HAL_RCC_GetHCLKFreq+0x50>)
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	0a1b      	lsrs	r3, r3, #8
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	490f      	ldr	r1, [pc, #60]	@ (800b9b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b974:	5ccb      	ldrb	r3, [r1, r3]
 800b976:	f003 031f 	and.w	r3, r3, #31
 800b97a:	fa22 f303 	lsr.w	r3, r2, r3
 800b97e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b980:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ac <HAL_RCC_GetHCLKFreq+0x50>)
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	f003 030f 	and.w	r3, r3, #15
 800b988:	4a09      	ldr	r2, [pc, #36]	@ (800b9b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b98a:	5cd3      	ldrb	r3, [r2, r3]
 800b98c:	f003 031f 	and.w	r3, r3, #31
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	fa22 f303 	lsr.w	r3, r2, r3
 800b996:	4a07      	ldr	r2, [pc, #28]	@ (800b9b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b998:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b99a:	4a07      	ldr	r2, [pc, #28]	@ (800b9b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b9a0:	4b04      	ldr	r3, [pc, #16]	@ (800b9b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	58024400 	.word	0x58024400
 800b9b0:	08013860 	.word	0x08013860
 800b9b4:	240003d4 	.word	0x240003d4
 800b9b8:	240003d0 	.word	0x240003d0

0800b9bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9c0:	b0c8      	sub	sp, #288	@ 0x120
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b9d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b9e0:	2500      	movs	r5, #0
 800b9e2:	ea54 0305 	orrs.w	r3, r4, r5
 800b9e6:	d049      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b9e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9f2:	d02f      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b9f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9f8:	d828      	bhi.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9fe:	d01a      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ba00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ba04:	d822      	bhi.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ba0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba0e:	d007      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ba10:	e01c      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba12:	4bb8      	ldr	r3, [pc, #736]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba16:	4ab7      	ldr	r2, [pc, #732]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba1e:	e01a      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba24:	3308      	adds	r3, #8
 800ba26:	2102      	movs	r1, #2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 f9b5 	bl	800cd98 <RCCEx_PLL2_Config>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba34:	e00f      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba3a:	3328      	adds	r3, #40	@ 0x28
 800ba3c:	2102      	movs	r1, #2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 fa5c 	bl	800cefc <RCCEx_PLL3_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba4a:	e004      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba52:	e000      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ba54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba5e:	4ba5      	ldr	r3, [pc, #660]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ba66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba6c:	4aa1      	ldr	r2, [pc, #644]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba72:	e003      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ba88:	f04f 0900 	mov.w	r9, #0
 800ba8c:	ea58 0309 	orrs.w	r3, r8, r9
 800ba90:	d047      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba98:	2b04      	cmp	r3, #4
 800ba9a:	d82a      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba9c:	a201      	add	r2, pc, #4	@ (adr r2, 800baa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa2:	bf00      	nop
 800baa4:	0800bab9 	.word	0x0800bab9
 800baa8:	0800bac7 	.word	0x0800bac7
 800baac:	0800badd 	.word	0x0800badd
 800bab0:	0800bafb 	.word	0x0800bafb
 800bab4:	0800bafb 	.word	0x0800bafb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab8:	4b8e      	ldr	r3, [pc, #568]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800baba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babc:	4a8d      	ldr	r2, [pc, #564]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800babe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bac4:	e01a      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baca:	3308      	adds	r3, #8
 800bacc:	2100      	movs	r1, #0
 800bace:	4618      	mov	r0, r3
 800bad0:	f001 f962 	bl	800cd98 <RCCEx_PLL2_Config>
 800bad4:	4603      	mov	r3, r0
 800bad6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bada:	e00f      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800badc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bae0:	3328      	adds	r3, #40	@ 0x28
 800bae2:	2100      	movs	r1, #0
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 fa09 	bl	800cefc <RCCEx_PLL3_Config>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800baf0:	e004      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800baf8:	e000      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bafa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bafc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb04:	4b7b      	ldr	r3, [pc, #492]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb08:	f023 0107 	bic.w	r1, r3, #7
 800bb0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb12:	4a78      	ldr	r2, [pc, #480]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb14:	430b      	orrs	r3, r1
 800bb16:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb18:	e003      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bb22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800bb2e:	f04f 0b00 	mov.w	fp, #0
 800bb32:	ea5a 030b 	orrs.w	r3, sl, fp
 800bb36:	d04c      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800bb38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb42:	d030      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800bb44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb48:	d829      	bhi.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb4a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb4c:	d02d      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bb4e:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb50:	d825      	bhi.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb52:	2b80      	cmp	r3, #128	@ 0x80
 800bb54:	d018      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800bb56:	2b80      	cmp	r3, #128	@ 0x80
 800bb58:	d821      	bhi.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800bb5e:	2b40      	cmp	r3, #64	@ 0x40
 800bb60:	d007      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800bb62:	e01c      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb64:	4b63      	ldr	r3, [pc, #396]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb68:	4a62      	ldr	r2, [pc, #392]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb70:	e01c      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb76:	3308      	adds	r3, #8
 800bb78:	2100      	movs	r1, #0
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 f90c 	bl	800cd98 <RCCEx_PLL2_Config>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb86:	e011      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb8c:	3328      	adds	r3, #40	@ 0x28
 800bb8e:	2100      	movs	r1, #0
 800bb90:	4618      	mov	r0, r3
 800bb92:	f001 f9b3 	bl	800cefc <RCCEx_PLL3_Config>
 800bb96:	4603      	mov	r3, r0
 800bb98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb9c:	e006      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bba4:	e002      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bba6:	bf00      	nop
 800bba8:	e000      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bbaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bbb4:	4b4f      	ldr	r3, [pc, #316]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbb8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800bbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbc2:	4a4c      	ldr	r2, [pc, #304]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbc8:	e003      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bbd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800bbde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bbe8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800bbec:	460b      	mov	r3, r1
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	d053      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bbf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bbfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbfe:	d035      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800bc00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc04:	d82e      	bhi.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bc06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc0a:	d031      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800bc0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc10:	d828      	bhi.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bc12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc16:	d01a      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800bc18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc1c:	d822      	bhi.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800bc22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc26:	d007      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800bc28:	e01c      	b.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc2a:	4b32      	ldr	r3, [pc, #200]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2e:	4a31      	ldr	r2, [pc, #196]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc36:	e01c      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc3c:	3308      	adds	r3, #8
 800bc3e:	2100      	movs	r1, #0
 800bc40:	4618      	mov	r0, r3
 800bc42:	f001 f8a9 	bl	800cd98 <RCCEx_PLL2_Config>
 800bc46:	4603      	mov	r3, r0
 800bc48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bc4c:	e011      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc52:	3328      	adds	r3, #40	@ 0x28
 800bc54:	2100      	movs	r1, #0
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 f950 	bl	800cefc <RCCEx_PLL3_Config>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc62:	e006      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc6a:	e002      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bc6c:	bf00      	nop
 800bc6e:	e000      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bc70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10b      	bne.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bc7a:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc7e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bc82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc8a:	4a1a      	ldr	r2, [pc, #104]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc8c:	430b      	orrs	r3, r1
 800bc8e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc90:	e003      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bca6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bcb0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	d056      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bcba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bcc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bcc6:	d038      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bcc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bccc:	d831      	bhi.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bcd2:	d034      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800bcd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bcd8:	d82b      	bhi.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcde:	d01d      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800bce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bce4:	d825      	bhi.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d006      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800bcea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bcee:	d00a      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bcf0:	e01f      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcf2:	bf00      	nop
 800bcf4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcf8:	4ba2      	ldr	r3, [pc, #648]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfc:	4aa1      	ldr	r2, [pc, #644]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd04:	e01c      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f001 f842 	bl	800cd98 <RCCEx_PLL2_Config>
 800bd14:	4603      	mov	r3, r0
 800bd16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bd1a:	e011      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd20:	3328      	adds	r3, #40	@ 0x28
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f001 f8e9 	bl	800cefc <RCCEx_PLL3_Config>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd30:	e006      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd38:	e002      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bd3a:	bf00      	nop
 800bd3c:	e000      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bd3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10b      	bne.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bd48:	4b8e      	ldr	r3, [pc, #568]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd4c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bd50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd58:	4a8a      	ldr	r2, [pc, #552]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd5a:	430b      	orrs	r3, r1
 800bd5c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd5e:	e003      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd70:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bd74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bd7e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bd82:	460b      	mov	r3, r1
 800bd84:	4313      	orrs	r3, r2
 800bd86:	d03a      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800bd88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd8e:	2b30      	cmp	r3, #48	@ 0x30
 800bd90:	d01f      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800bd92:	2b30      	cmp	r3, #48	@ 0x30
 800bd94:	d819      	bhi.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d00c      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d815      	bhi.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d019      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bda2:	2b10      	cmp	r3, #16
 800bda4:	d111      	bne.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bda6:	4b77      	ldr	r3, [pc, #476]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdaa:	4a76      	ldr	r2, [pc, #472]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bdac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bdb2:	e011      	b.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdb8:	3308      	adds	r3, #8
 800bdba:	2102      	movs	r1, #2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 ffeb 	bl	800cd98 <RCCEx_PLL2_Config>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bdc8:	e006      	b.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bdd0:	e002      	b.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bdd2:	bf00      	nop
 800bdd4:	e000      	b.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bdd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10a      	bne.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bde0:	4b68      	ldr	r3, [pc, #416]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bde2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bde4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bde8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdee:	4a65      	ldr	r2, [pc, #404]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bdf0:	430b      	orrs	r3, r1
 800bdf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bdf4:	e003      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bdfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800be0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800be0e:	2300      	movs	r3, #0
 800be10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800be18:	460b      	mov	r3, r1
 800be1a:	4313      	orrs	r3, r2
 800be1c:	d051      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800be1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be28:	d035      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800be2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be2e:	d82e      	bhi.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800be30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be34:	d031      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800be36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be3a:	d828      	bhi.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800be3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be40:	d01a      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800be42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be46:	d822      	bhi.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800be4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be50:	d007      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800be52:	e01c      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be54:	4b4b      	ldr	r3, [pc, #300]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be58:	4a4a      	ldr	r2, [pc, #296]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be60:	e01c      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be66:	3308      	adds	r3, #8
 800be68:	2100      	movs	r1, #0
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 ff94 	bl	800cd98 <RCCEx_PLL2_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be76:	e011      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be7c:	3328      	adds	r3, #40	@ 0x28
 800be7e:	2100      	movs	r1, #0
 800be80:	4618      	mov	r0, r3
 800be82:	f001 f83b 	bl	800cefc <RCCEx_PLL3_Config>
 800be86:	4603      	mov	r3, r0
 800be88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be8c:	e006      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be94:	e002      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be96:	bf00      	nop
 800be98:	e000      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10a      	bne.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bea4:	4b37      	ldr	r3, [pc, #220]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bea8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800beac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beb2:	4a34      	ldr	r2, [pc, #208]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800beb4:	430b      	orrs	r3, r1
 800beb6:	6513      	str	r3, [r2, #80]	@ 0x50
 800beb8:	e003      	b.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bebe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bece:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bed2:	2300      	movs	r3, #0
 800bed4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bed8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bedc:	460b      	mov	r3, r1
 800bede:	4313      	orrs	r3, r2
 800bee0:	d056      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800beec:	d033      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800beee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bef2:	d82c      	bhi.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bef4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bef8:	d02f      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800befa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800befe:	d826      	bhi.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bf00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf04:	d02b      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800bf06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf0a:	d820      	bhi.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bf0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf10:	d012      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800bf12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf16:	d81a      	bhi.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d022      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bf1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf20:	d115      	bne.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf26:	3308      	adds	r3, #8
 800bf28:	2101      	movs	r1, #1
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 ff34 	bl	800cd98 <RCCEx_PLL2_Config>
 800bf30:	4603      	mov	r3, r0
 800bf32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bf36:	e015      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf3c:	3328      	adds	r3, #40	@ 0x28
 800bf3e:	2101      	movs	r1, #1
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 ffdb 	bl	800cefc <RCCEx_PLL3_Config>
 800bf46:	4603      	mov	r3, r0
 800bf48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bf4c:	e00a      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bf54:	e006      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf56:	bf00      	nop
 800bf58:	e004      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf5a:	bf00      	nop
 800bf5c:	e002      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf5e:	bf00      	nop
 800bf60:	e000      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10d      	bne.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bf6c:	4b05      	ldr	r3, [pc, #20]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf70:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bf74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf7a:	4a02      	ldr	r2, [pc, #8]	@ (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf7c:	430b      	orrs	r3, r1
 800bf7e:	6513      	str	r3, [r2, #80]	@ 0x50
 800bf80:	e006      	b.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bf82:	bf00      	nop
 800bf84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bf9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bfa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4313      	orrs	r3, r2
 800bfae:	d055      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bfb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfbc:	d033      	beq.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800bfbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfc2:	d82c      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfc8:	d02f      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800bfca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfce:	d826      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bfd4:	d02b      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800bfd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bfda:	d820      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfe0:	d012      	beq.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800bfe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfe6:	d81a      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d022      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bfec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bff0:	d115      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bff6:	3308      	adds	r3, #8
 800bff8:	2101      	movs	r1, #1
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fecc 	bl	800cd98 <RCCEx_PLL2_Config>
 800c000:	4603      	mov	r3, r0
 800c002:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c006:	e015      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c00c:	3328      	adds	r3, #40	@ 0x28
 800c00e:	2101      	movs	r1, #1
 800c010:	4618      	mov	r0, r3
 800c012:	f000 ff73 	bl	800cefc <RCCEx_PLL3_Config>
 800c016:	4603      	mov	r3, r0
 800c018:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c01c:	e00a      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c024:	e006      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c026:	bf00      	nop
 800c028:	e004      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c02a:	bf00      	nop
 800c02c:	e002      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c02e:	bf00      	nop
 800c030:	e000      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c032:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c034:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10b      	bne.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c03c:	4ba3      	ldr	r3, [pc, #652]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c03e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c040:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c04c:	4a9f      	ldr	r2, [pc, #636]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c04e:	430b      	orrs	r3, r1
 800c050:	6593      	str	r3, [r2, #88]	@ 0x58
 800c052:	e003      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c058:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c05c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c06c:	2300      	movs	r3, #0
 800c06e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c072:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c076:	460b      	mov	r3, r1
 800c078:	4313      	orrs	r3, r2
 800c07a:	d037      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c07c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c086:	d00e      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c08c:	d816      	bhi.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d018      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c096:	d111      	bne.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c098:	4b8c      	ldr	r3, [pc, #560]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09c:	4a8b      	ldr	r2, [pc, #556]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c09e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c0a4:	e00f      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	2101      	movs	r1, #1
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 fe72 	bl	800cd98 <RCCEx_PLL2_Config>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c0ba:	e004      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c0c2:	e000      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c0ce:	4b7f      	ldr	r3, [pc, #508]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0dc:	4a7b      	ldr	r2, [pc, #492]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0de:	430b      	orrs	r3, r1
 800c0e0:	6513      	str	r3, [r2, #80]	@ 0x50
 800c0e2:	e003      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c0ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c0f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c102:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c106:	460b      	mov	r3, r1
 800c108:	4313      	orrs	r3, r2
 800c10a:	d039      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c10c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c112:	2b03      	cmp	r3, #3
 800c114:	d81c      	bhi.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c116:	a201      	add	r2, pc, #4	@ (adr r2, 800c11c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800c118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11c:	0800c159 	.word	0x0800c159
 800c120:	0800c12d 	.word	0x0800c12d
 800c124:	0800c13b 	.word	0x0800c13b
 800c128:	0800c159 	.word	0x0800c159
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c12c:	4b67      	ldr	r3, [pc, #412]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c130:	4a66      	ldr	r2, [pc, #408]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c138:	e00f      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c13a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c13e:	3308      	adds	r3, #8
 800c140:	2102      	movs	r1, #2
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fe28 	bl	800cd98 <RCCEx_PLL2_Config>
 800c148:	4603      	mov	r3, r0
 800c14a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c14e:	e004      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c156:	e000      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800c158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c15a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10a      	bne.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c162:	4b5a      	ldr	r3, [pc, #360]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c166:	f023 0103 	bic.w	r1, r3, #3
 800c16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c16e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c170:	4a56      	ldr	r2, [pc, #344]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c172:	430b      	orrs	r3, r1
 800c174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c176:	e003      	b.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c178:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c17c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c18c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c190:	2300      	movs	r3, #0
 800c192:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c196:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c19a:	460b      	mov	r3, r1
 800c19c:	4313      	orrs	r3, r2
 800c19e:	f000 809f 	beq.w	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1a2:	4b4b      	ldr	r3, [pc, #300]	@ (800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a4a      	ldr	r2, [pc, #296]	@ (800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c1a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c1ae:	f7fb fbc9 	bl	8007944 <HAL_GetTick>
 800c1b2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1b6:	e00b      	b.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1b8:	f7fb fbc4 	bl	8007944 <HAL_GetTick>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	2b64      	cmp	r3, #100	@ 0x64
 800c1c6:	d903      	bls.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c1ce:	e005      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1d0:	4b3f      	ldr	r3, [pc, #252]	@ (800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0ed      	beq.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800c1dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d179      	bne.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c1e4:	4b39      	ldr	r3, [pc, #228]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c1f0:	4053      	eors	r3, r2
 800c1f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d015      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c1fa:	4b34      	ldr	r3, [pc, #208]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c202:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c206:	4b31      	ldr	r3, [pc, #196]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c20a:	4a30      	ldr	r2, [pc, #192]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c20c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c210:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c212:	4b2e      	ldr	r3, [pc, #184]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c216:	4a2d      	ldr	r2, [pc, #180]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c21c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c21e:	4a2b      	ldr	r2, [pc, #172]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c224:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c22a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c232:	d118      	bne.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c234:	f7fb fb86 	bl	8007944 <HAL_GetTick>
 800c238:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c23c:	e00d      	b.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c23e:	f7fb fb81 	bl	8007944 <HAL_GetTick>
 800c242:	4602      	mov	r2, r0
 800c244:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c248:	1ad2      	subs	r2, r2, r3
 800c24a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c24e:	429a      	cmp	r2, r3
 800c250:	d903      	bls.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800c252:	2303      	movs	r3, #3
 800c254:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800c258:	e005      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c25a:	4b1c      	ldr	r3, [pc, #112]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c25c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0eb      	beq.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800c266:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d129      	bne.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c27a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c27e:	d10e      	bne.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800c280:	4b12      	ldr	r3, [pc, #72]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c28c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c290:	091a      	lsrs	r2, r3, #4
 800c292:	4b10      	ldr	r3, [pc, #64]	@ (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800c294:	4013      	ands	r3, r2
 800c296:	4a0d      	ldr	r2, [pc, #52]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c298:	430b      	orrs	r3, r1
 800c29a:	6113      	str	r3, [r2, #16]
 800c29c:	e005      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c29e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	4a0a      	ldr	r2, [pc, #40]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c2a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c2a8:	6113      	str	r3, [r2, #16]
 800c2aa:	4b08      	ldr	r3, [pc, #32]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c2ac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c2ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c2b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2ba:	4a04      	ldr	r2, [pc, #16]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	6713      	str	r3, [r2, #112]	@ 0x70
 800c2c0:	e00e      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c2c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800c2ca:	e009      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800c2cc:	58024400 	.word	0x58024400
 800c2d0:	58024800 	.word	0x58024800
 800c2d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e8:	f002 0301 	and.w	r3, r2, #1
 800c2ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c2f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	f000 8089 	beq.w	800c414 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c308:	2b28      	cmp	r3, #40	@ 0x28
 800c30a:	d86b      	bhi.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c30c:	a201      	add	r2, pc, #4	@ (adr r2, 800c314 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c312:	bf00      	nop
 800c314:	0800c3ed 	.word	0x0800c3ed
 800c318:	0800c3e5 	.word	0x0800c3e5
 800c31c:	0800c3e5 	.word	0x0800c3e5
 800c320:	0800c3e5 	.word	0x0800c3e5
 800c324:	0800c3e5 	.word	0x0800c3e5
 800c328:	0800c3e5 	.word	0x0800c3e5
 800c32c:	0800c3e5 	.word	0x0800c3e5
 800c330:	0800c3e5 	.word	0x0800c3e5
 800c334:	0800c3b9 	.word	0x0800c3b9
 800c338:	0800c3e5 	.word	0x0800c3e5
 800c33c:	0800c3e5 	.word	0x0800c3e5
 800c340:	0800c3e5 	.word	0x0800c3e5
 800c344:	0800c3e5 	.word	0x0800c3e5
 800c348:	0800c3e5 	.word	0x0800c3e5
 800c34c:	0800c3e5 	.word	0x0800c3e5
 800c350:	0800c3e5 	.word	0x0800c3e5
 800c354:	0800c3cf 	.word	0x0800c3cf
 800c358:	0800c3e5 	.word	0x0800c3e5
 800c35c:	0800c3e5 	.word	0x0800c3e5
 800c360:	0800c3e5 	.word	0x0800c3e5
 800c364:	0800c3e5 	.word	0x0800c3e5
 800c368:	0800c3e5 	.word	0x0800c3e5
 800c36c:	0800c3e5 	.word	0x0800c3e5
 800c370:	0800c3e5 	.word	0x0800c3e5
 800c374:	0800c3ed 	.word	0x0800c3ed
 800c378:	0800c3e5 	.word	0x0800c3e5
 800c37c:	0800c3e5 	.word	0x0800c3e5
 800c380:	0800c3e5 	.word	0x0800c3e5
 800c384:	0800c3e5 	.word	0x0800c3e5
 800c388:	0800c3e5 	.word	0x0800c3e5
 800c38c:	0800c3e5 	.word	0x0800c3e5
 800c390:	0800c3e5 	.word	0x0800c3e5
 800c394:	0800c3ed 	.word	0x0800c3ed
 800c398:	0800c3e5 	.word	0x0800c3e5
 800c39c:	0800c3e5 	.word	0x0800c3e5
 800c3a0:	0800c3e5 	.word	0x0800c3e5
 800c3a4:	0800c3e5 	.word	0x0800c3e5
 800c3a8:	0800c3e5 	.word	0x0800c3e5
 800c3ac:	0800c3e5 	.word	0x0800c3e5
 800c3b0:	0800c3e5 	.word	0x0800c3e5
 800c3b4:	0800c3ed 	.word	0x0800c3ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3bc:	3308      	adds	r3, #8
 800c3be:	2101      	movs	r1, #1
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 fce9 	bl	800cd98 <RCCEx_PLL2_Config>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c3cc:	e00f      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3d2:	3328      	adds	r3, #40	@ 0x28
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fd90 	bl	800cefc <RCCEx_PLL3_Config>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c3e2:	e004      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c3ea:	e000      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10a      	bne.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c3f6:	4bbf      	ldr	r3, [pc, #764]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c404:	4abb      	ldr	r2, [pc, #748]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c406:	430b      	orrs	r3, r1
 800c408:	6553      	str	r3, [r2, #84]	@ 0x54
 800c40a:	e003      	b.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c40c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c410:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f002 0302 	and.w	r3, r2, #2
 800c420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c424:	2300      	movs	r3, #0
 800c426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c42a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c42e:	460b      	mov	r3, r1
 800c430:	4313      	orrs	r3, r2
 800c432:	d041      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c43a:	2b05      	cmp	r3, #5
 800c43c:	d824      	bhi.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c43e:	a201      	add	r2, pc, #4	@ (adr r2, 800c444 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c444:	0800c491 	.word	0x0800c491
 800c448:	0800c45d 	.word	0x0800c45d
 800c44c:	0800c473 	.word	0x0800c473
 800c450:	0800c491 	.word	0x0800c491
 800c454:	0800c491 	.word	0x0800c491
 800c458:	0800c491 	.word	0x0800c491
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c460:	3308      	adds	r3, #8
 800c462:	2101      	movs	r1, #1
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fc97 	bl	800cd98 <RCCEx_PLL2_Config>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c470:	e00f      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c476:	3328      	adds	r3, #40	@ 0x28
 800c478:	2101      	movs	r1, #1
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 fd3e 	bl	800cefc <RCCEx_PLL3_Config>
 800c480:	4603      	mov	r3, r0
 800c482:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c486:	e004      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c48e:	e000      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c490:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c492:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10a      	bne.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c49a:	4b96      	ldr	r3, [pc, #600]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c49e:	f023 0107 	bic.w	r1, r3, #7
 800c4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4a8:	4a92      	ldr	r2, [pc, #584]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c4aa:	430b      	orrs	r3, r1
 800c4ac:	6553      	str	r3, [r2, #84]	@ 0x54
 800c4ae:	e003      	b.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c4b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	f002 0304 	and.w	r3, r2, #4
 800c4c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c4ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	d044      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4e0:	2b05      	cmp	r3, #5
 800c4e2:	d825      	bhi.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c4e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ea:	bf00      	nop
 800c4ec:	0800c539 	.word	0x0800c539
 800c4f0:	0800c505 	.word	0x0800c505
 800c4f4:	0800c51b 	.word	0x0800c51b
 800c4f8:	0800c539 	.word	0x0800c539
 800c4fc:	0800c539 	.word	0x0800c539
 800c500:	0800c539 	.word	0x0800c539
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c508:	3308      	adds	r3, #8
 800c50a:	2101      	movs	r1, #1
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fc43 	bl	800cd98 <RCCEx_PLL2_Config>
 800c512:	4603      	mov	r3, r0
 800c514:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c518:	e00f      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c51e:	3328      	adds	r3, #40	@ 0x28
 800c520:	2101      	movs	r1, #1
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fcea 	bl	800cefc <RCCEx_PLL3_Config>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c52e:	e004      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c536:	e000      	b.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c53a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10b      	bne.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c542:	4b6c      	ldr	r3, [pc, #432]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c546:	f023 0107 	bic.w	r1, r3, #7
 800c54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c552:	4a68      	ldr	r2, [pc, #416]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c554:	430b      	orrs	r3, r1
 800c556:	6593      	str	r3, [r2, #88]	@ 0x58
 800c558:	e003      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c55a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c55e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	f002 0320 	and.w	r3, r2, #32
 800c56e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c572:	2300      	movs	r3, #0
 800c574:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c578:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4313      	orrs	r3, r2
 800c580:	d055      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c58a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c58e:	d033      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c594:	d82c      	bhi.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c59a:	d02f      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c59c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5a0:	d826      	bhi.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c5a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c5a6:	d02b      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c5a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c5ac:	d820      	bhi.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c5ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5b2:	d012      	beq.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c5b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5b8:	d81a      	bhi.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d022      	beq.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c5be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5c2:	d115      	bne.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fbe3 	bl	800cd98 <RCCEx_PLL2_Config>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c5d8:	e015      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5de:	3328      	adds	r3, #40	@ 0x28
 800c5e0:	2102      	movs	r1, #2
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 fc8a 	bl	800cefc <RCCEx_PLL3_Config>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c5ee:	e00a      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c5f6:	e006      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5f8:	bf00      	nop
 800c5fa:	e004      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5fc:	bf00      	nop
 800c5fe:	e002      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c600:	bf00      	nop
 800c602:	e000      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c604:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c606:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10b      	bne.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c60e:	4b39      	ldr	r3, [pc, #228]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c612:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c61e:	4a35      	ldr	r2, [pc, #212]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c620:	430b      	orrs	r3, r1
 800c622:	6553      	str	r3, [r2, #84]	@ 0x54
 800c624:	e003      	b.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c626:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c62a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c62e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c63a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c63e:	2300      	movs	r3, #0
 800c640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c644:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c648:	460b      	mov	r3, r1
 800c64a:	4313      	orrs	r3, r2
 800c64c:	d058      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c64e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c656:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c65a:	d033      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c65c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c660:	d82c      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c666:	d02f      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c66c:	d826      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c66e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c672:	d02b      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c674:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c678:	d820      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c67a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c67e:	d012      	beq.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c684:	d81a      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c686:	2b00      	cmp	r3, #0
 800c688:	d022      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c68a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c68e:	d115      	bne.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c694:	3308      	adds	r3, #8
 800c696:	2100      	movs	r1, #0
 800c698:	4618      	mov	r0, r3
 800c69a:	f000 fb7d 	bl	800cd98 <RCCEx_PLL2_Config>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c6a4:	e015      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6aa:	3328      	adds	r3, #40	@ 0x28
 800c6ac:	2102      	movs	r1, #2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fc24 	bl	800cefc <RCCEx_PLL3_Config>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c6ba:	e00a      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c6c2:	e006      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6c4:	bf00      	nop
 800c6c6:	e004      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6c8:	bf00      	nop
 800c6ca:	e002      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6cc:	bf00      	nop
 800c6ce:	e000      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d10e      	bne.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c6da:	4b06      	ldr	r3, [pc, #24]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c6dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6ea:	4a02      	ldr	r2, [pc, #8]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c6ec:	430b      	orrs	r3, r1
 800c6ee:	6593      	str	r3, [r2, #88]	@ 0x58
 800c6f0:	e006      	b.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c6f2:	bf00      	nop
 800c6f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c70c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c710:	2300      	movs	r3, #0
 800c712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c716:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c71a:	460b      	mov	r3, r1
 800c71c:	4313      	orrs	r3, r2
 800c71e:	d055      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c728:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c72c:	d033      	beq.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c72e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c732:	d82c      	bhi.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c738:	d02f      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c73a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c73e:	d826      	bhi.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c740:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c744:	d02b      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c746:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c74a:	d820      	bhi.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c74c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c750:	d012      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c756:	d81a      	bhi.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d022      	beq.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c75c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c760:	d115      	bne.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c766:	3308      	adds	r3, #8
 800c768:	2100      	movs	r1, #0
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 fb14 	bl	800cd98 <RCCEx_PLL2_Config>
 800c770:	4603      	mov	r3, r0
 800c772:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c776:	e015      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c77c:	3328      	adds	r3, #40	@ 0x28
 800c77e:	2102      	movs	r1, #2
 800c780:	4618      	mov	r0, r3
 800c782:	f000 fbbb 	bl	800cefc <RCCEx_PLL3_Config>
 800c786:	4603      	mov	r3, r0
 800c788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c78c:	e00a      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c794:	e006      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c796:	bf00      	nop
 800c798:	e004      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c79a:	bf00      	nop
 800c79c:	e002      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c79e:	bf00      	nop
 800c7a0:	e000      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c7a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10b      	bne.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c7ac:	4bbb      	ldr	r3, [pc, #748]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7b0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7bc:	4ab7      	ldr	r2, [pc, #732]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c7be:	430b      	orrs	r3, r1
 800c7c0:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7c2:	e003      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	f002 0308 	and.w	r3, r2, #8
 800c7d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c7e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	d01e      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7f8:	d10c      	bne.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7fe:	3328      	adds	r3, #40	@ 0x28
 800c800:	2102      	movs	r1, #2
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fb7a 	bl	800cefc <RCCEx_PLL3_Config>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c814:	4ba1      	ldr	r3, [pc, #644]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c818:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c824:	4a9d      	ldr	r2, [pc, #628]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c826:	430b      	orrs	r3, r1
 800c828:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	f002 0310 	and.w	r3, r2, #16
 800c836:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c83a:	2300      	movs	r3, #0
 800c83c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c840:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c844:	460b      	mov	r3, r1
 800c846:	4313      	orrs	r3, r2
 800c848:	d01e      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c84e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c856:	d10c      	bne.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c85c:	3328      	adds	r3, #40	@ 0x28
 800c85e:	2102      	movs	r1, #2
 800c860:	4618      	mov	r0, r3
 800c862:	f000 fb4b 	bl	800cefc <RCCEx_PLL3_Config>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c872:	4b8a      	ldr	r3, [pc, #552]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c876:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c87e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c882:	4a86      	ldr	r2, [pc, #536]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c884:	430b      	orrs	r3, r1
 800c886:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c894:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c896:	2300      	movs	r3, #0
 800c898:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c89a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	d03e      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8b0:	d022      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c8b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8b6:	d81b      	bhi.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8c0:	d00b      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c8c2:	e015      	b.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fa63 	bl	800cd98 <RCCEx_PLL2_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c8d8:	e00f      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8de:	3328      	adds	r3, #40	@ 0x28
 800c8e0:	2102      	movs	r1, #2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fb0a 	bl	800cefc <RCCEx_PLL3_Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c8ee:	e004      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c8f6:	e000      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10b      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c902:	4b66      	ldr	r3, [pc, #408]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c906:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c90a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c90e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c912:	4a62      	ldr	r2, [pc, #392]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c914:	430b      	orrs	r3, r1
 800c916:	6593      	str	r3, [r2, #88]	@ 0x58
 800c918:	e003      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c91a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c91e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c92e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c930:	2300      	movs	r3, #0
 800c932:	677b      	str	r3, [r7, #116]	@ 0x74
 800c934:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c938:	460b      	mov	r3, r1
 800c93a:	4313      	orrs	r3, r2
 800c93c:	d03b      	beq.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c93e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c946:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c94a:	d01f      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 800c94c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c950:	d818      	bhi.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 800c952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c956:	d003      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800c958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c95c:	d007      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 800c95e:	e011      	b.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c960:	4b4e      	ldr	r3, [pc, #312]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c964:	4a4d      	ldr	r2, [pc, #308]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c96a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c96c:	e00f      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c96e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c972:	3328      	adds	r3, #40	@ 0x28
 800c974:	2101      	movs	r1, #1
 800c976:	4618      	mov	r0, r3
 800c978:	f000 fac0 	bl	800cefc <RCCEx_PLL3_Config>
 800c97c:	4603      	mov	r3, r0
 800c97e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c982:	e004      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c98a:	e000      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 800c98c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c98e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10b      	bne.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c996:	4b41      	ldr	r3, [pc, #260]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c99a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9a6:	4a3d      	ldr	r2, [pc, #244]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	6553      	str	r3, [r2, #84]	@ 0x54
 800c9ac:	e003      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c9c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c9c8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	d031      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c9d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 800c9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9e0:	d007      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800c9e2:	e011      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9e4:	4b2d      	ldr	r3, [pc, #180]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e8:	4a2c      	ldr	r2, [pc, #176]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800c9ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c9f0:	e00e      	b.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	2102      	movs	r1, #2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 f9cc 	bl	800cd98 <RCCEx_PLL2_Config>
 800ca00:	4603      	mov	r3, r0
 800ca02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ca06:	e003      	b.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ca0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10a      	bne.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ca18:	4b20      	ldr	r3, [pc, #128]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800ca1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca1c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca26:	4a1d      	ldr	r2, [pc, #116]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800ca28:	430b      	orrs	r3, r1
 800ca2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ca2c:	e003      	b.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ca36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ca42:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca44:	2300      	movs	r3, #0
 800ca46:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	d03b      	beq.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ca52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca5e:	d018      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 800ca60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca64:	d811      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800ca66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca6a:	d014      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 800ca6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca70:	d80b      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d014      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 800ca76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca7a:	d106      	bne.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca7c:	4b07      	ldr	r3, [pc, #28]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800ca7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca80:	4a06      	ldr	r2, [pc, #24]	@ (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800ca82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ca88:	e00b      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ca90:	e007      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800ca92:	bf00      	nop
 800ca94:	e005      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800ca96:	bf00      	nop
 800ca98:	e003      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 800ca9a:	bf00      	nop
 800ca9c:	58024400 	.word	0x58024400
        break;
 800caa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800caa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10b      	bne.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800caaa:	4bba      	ldr	r3, [pc, #744]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800caac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caba:	4ab6      	ldr	r2, [pc, #728]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cabc:	430b      	orrs	r3, r1
 800cabe:	6553      	str	r3, [r2, #84]	@ 0x54
 800cac0:	e003      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cac2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cac6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800caca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cad8:	2300      	movs	r3, #0
 800cada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cadc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cae0:	460b      	mov	r3, r1
 800cae2:	4313      	orrs	r3, r2
 800cae4:	d009      	beq.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cae6:	4bab      	ldr	r3, [pc, #684]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caea:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800caee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800caf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caf4:	4aa7      	ldr	r2, [pc, #668]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800caf6:	430b      	orrs	r3, r1
 800caf8:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cafa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800cb06:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb08:	2300      	movs	r3, #0
 800cb0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb0c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800cb10:	460b      	mov	r3, r1
 800cb12:	4313      	orrs	r3, r2
 800cb14:	d00a      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cb16:	4b9f      	ldr	r3, [pc, #636]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800cb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cb26:	4a9b      	ldr	r2, [pc, #620]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb28:	430b      	orrs	r3, r1
 800cb2a:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cb2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cb38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cb42:	460b      	mov	r3, r1
 800cb44:	4313      	orrs	r3, r2
 800cb46:	d009      	beq.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb48:	4b92      	ldr	r3, [pc, #584]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb4c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cb50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb56:	4a8f      	ldr	r2, [pc, #572]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb58:	430b      	orrs	r3, r1
 800cb5a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cb68:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cb72:	460b      	mov	r3, r1
 800cb74:	4313      	orrs	r3, r2
 800cb76:	d00e      	beq.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb78:	4b86      	ldr	r3, [pc, #536]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	4a85      	ldr	r2, [pc, #532]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cb82:	6113      	str	r3, [r2, #16]
 800cb84:	4b83      	ldr	r3, [pc, #524]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb86:	6919      	ldr	r1, [r3, #16]
 800cb88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cb90:	4a80      	ldr	r2, [pc, #512]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cb92:	430b      	orrs	r3, r1
 800cb94:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cba4:	2300      	movs	r3, #0
 800cba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cba8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cbac:	460b      	mov	r3, r1
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	d009      	beq.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cbb2:	4b78      	ldr	r3, [pc, #480]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cbb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cbba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cbbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbc0:	4a74      	ldr	r2, [pc, #464]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cbc2:	430b      	orrs	r3, r1
 800cbc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cbc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cbd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbd8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	d00a      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cbe2:	4b6c      	ldr	r3, [pc, #432]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cbe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbe6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cbea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cbee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbf2:	4a68      	ldr	r2, [pc, #416]	@ (800cd94 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800cbf4:	430b      	orrs	r3, r1
 800cbf6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cbf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	2100      	movs	r1, #0
 800cc02:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4313      	orrs	r3, r2
 800cc12:	d011      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cc18:	3308      	adds	r3, #8
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 f8bb 	bl	800cd98 <RCCEx_PLL2_Config>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cc28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d003      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	2100      	movs	r1, #0
 800cc42:	6239      	str	r1, [r7, #32]
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4313      	orrs	r3, r2
 800cc52:	d011      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cc58:	3308      	adds	r3, #8
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 f89b 	bl	800cd98 <RCCEx_PLL2_Config>
 800cc62:	4603      	mov	r3, r0
 800cc64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cc68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d003      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	2100      	movs	r1, #0
 800cc82:	61b9      	str	r1, [r7, #24]
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	61fb      	str	r3, [r7, #28]
 800cc8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4313      	orrs	r3, r2
 800cc92:	d011      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cc98:	3308      	adds	r3, #8
 800cc9a:	2102      	movs	r1, #2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 f87b 	bl	800cd98 <RCCEx_PLL2_Config>
 800cca2:	4603      	mov	r3, r0
 800cca4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d003      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ccb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ccb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	6139      	str	r1, [r7, #16]
 800ccc4:	f003 0308 	and.w	r3, r3, #8
 800ccc8:	617b      	str	r3, [r7, #20]
 800ccca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	d011      	beq.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ccd8:	3328      	adds	r3, #40	@ 0x28
 800ccda:	2100      	movs	r1, #0
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 f90d 	bl	800cefc <RCCEx_PLL3_Config>
 800cce2:	4603      	mov	r3, r0
 800cce4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800cce8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ccf4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ccf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	2100      	movs	r1, #0
 800cd02:	60b9      	str	r1, [r7, #8]
 800cd04:	f003 0310 	and.w	r3, r3, #16
 800cd08:	60fb      	str	r3, [r7, #12]
 800cd0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4313      	orrs	r3, r2
 800cd12:	d011      	beq.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd18:	3328      	adds	r3, #40	@ 0x28
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 f8ed 	bl	800cefc <RCCEx_PLL3_Config>
 800cd22:	4603      	mov	r3, r0
 800cd24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cd28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d003      	beq.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd40:	2100      	movs	r1, #0
 800cd42:	6039      	str	r1, [r7, #0]
 800cd44:	f003 0320 	and.w	r3, r3, #32
 800cd48:	607b      	str	r3, [r7, #4]
 800cd4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4313      	orrs	r3, r2
 800cd52:	d011      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd58:	3328      	adds	r3, #40	@ 0x28
 800cd5a:	2102      	movs	r1, #2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 f8cd 	bl	800cefc <RCCEx_PLL3_Config>
 800cd62:	4603      	mov	r3, r0
 800cd64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cd68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800cd78:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	e000      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd92:	bf00      	nop
 800cd94:	58024400 	.word	0x58024400

0800cd98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cda6:	4b53      	ldr	r3, [pc, #332]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cda8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdaa:	f003 0303 	and.w	r3, r3, #3
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d101      	bne.n	800cdb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e099      	b.n	800ceea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cdb6:	4b4f      	ldr	r3, [pc, #316]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a4e      	ldr	r2, [pc, #312]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cdbc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cdc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdc2:	f7fa fdbf 	bl	8007944 <HAL_GetTick>
 800cdc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cdc8:	e008      	b.n	800cddc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cdca:	f7fa fdbb 	bl	8007944 <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d901      	bls.n	800cddc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	e086      	b.n	800ceea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cddc:	4b45      	ldr	r3, [pc, #276]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1f0      	bne.n	800cdca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cde8:	4b42      	ldr	r3, [pc, #264]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cdea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	031b      	lsls	r3, r3, #12
 800cdf6:	493f      	ldr	r1, [pc, #252]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	628b      	str	r3, [r1, #40]	@ 0x28
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	025b      	lsls	r3, r3, #9
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	431a      	orrs	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	3b01      	subs	r3, #1
 800ce18:	041b      	lsls	r3, r3, #16
 800ce1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	691b      	ldr	r3, [r3, #16]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	061b      	lsls	r3, r3, #24
 800ce28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ce2c:	4931      	ldr	r1, [pc, #196]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce32:	4b30      	ldr	r3, [pc, #192]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	492d      	ldr	r1, [pc, #180]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce40:	4313      	orrs	r3, r2
 800ce42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce44:	4b2b      	ldr	r3, [pc, #172]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce48:	f023 0220 	bic.w	r2, r3, #32
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	4928      	ldr	r1, [pc, #160]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce52:	4313      	orrs	r3, r2
 800ce54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce56:	4b27      	ldr	r3, [pc, #156]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5a:	4a26      	ldr	r2, [pc, #152]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce5c:	f023 0310 	bic.w	r3, r3, #16
 800ce60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce62:	4b24      	ldr	r3, [pc, #144]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce66:	4b24      	ldr	r3, [pc, #144]	@ (800cef8 <RCCEx_PLL2_Config+0x160>)
 800ce68:	4013      	ands	r3, r2
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	69d2      	ldr	r2, [r2, #28]
 800ce6e:	00d2      	lsls	r2, r2, #3
 800ce70:	4920      	ldr	r1, [pc, #128]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce76:	4b1f      	ldr	r3, [pc, #124]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce7a:	4a1e      	ldr	r2, [pc, #120]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce7c:	f043 0310 	orr.w	r3, r3, #16
 800ce80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce88:	4b1a      	ldr	r3, [pc, #104]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce8c:	4a19      	ldr	r2, [pc, #100]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ce92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ce94:	e00f      	b.n	800ceb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d106      	bne.n	800ceaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce9c:	4b15      	ldr	r3, [pc, #84]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ce9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea0:	4a14      	ldr	r2, [pc, #80]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cea8:	e005      	b.n	800ceb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ceaa:	4b12      	ldr	r3, [pc, #72]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ceac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceae:	4a11      	ldr	r2, [pc, #68]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ceb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ceb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a0e      	ldr	r2, [pc, #56]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cebc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cec2:	f7fa fd3f 	bl	8007944 <HAL_GetTick>
 800cec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cec8:	e008      	b.n	800cedc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ceca:	f7fa fd3b 	bl	8007944 <HAL_GetTick>
 800cece:	4602      	mov	r2, r0
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d901      	bls.n	800cedc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e006      	b.n	800ceea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cedc:	4b05      	ldr	r3, [pc, #20]	@ (800cef4 <RCCEx_PLL2_Config+0x15c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d0f0      	beq.n	800ceca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	58024400 	.word	0x58024400
 800cef8:	ffff0007 	.word	0xffff0007

0800cefc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf0a:	4b53      	ldr	r3, [pc, #332]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf0e:	f003 0303 	and.w	r3, r3, #3
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d101      	bne.n	800cf1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e099      	b.n	800d04e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cf1a:	4b4f      	ldr	r3, [pc, #316]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a4e      	ldr	r2, [pc, #312]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf26:	f7fa fd0d 	bl	8007944 <HAL_GetTick>
 800cf2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf2c:	e008      	b.n	800cf40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf2e:	f7fa fd09 	bl	8007944 <HAL_GetTick>
 800cf32:	4602      	mov	r2, r0
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d901      	bls.n	800cf40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf3c:	2303      	movs	r3, #3
 800cf3e:	e086      	b.n	800d04e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf40:	4b45      	ldr	r3, [pc, #276]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f0      	bne.n	800cf2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf4c:	4b42      	ldr	r3, [pc, #264]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf50:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	051b      	lsls	r3, r3, #20
 800cf5a:	493f      	ldr	r1, [pc, #252]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	628b      	str	r3, [r1, #40]	@ 0x28
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	025b      	lsls	r3, r3, #9
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	431a      	orrs	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	041b      	lsls	r3, r3, #16
 800cf7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cf82:	431a      	orrs	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	061b      	lsls	r3, r3, #24
 800cf8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cf90:	4931      	ldr	r1, [pc, #196]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf96:	4b30      	ldr	r3, [pc, #192]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cf98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	492d      	ldr	r1, [pc, #180]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cfa8:	4b2b      	ldr	r3, [pc, #172]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	4928      	ldr	r1, [pc, #160]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cfba:	4b27      	ldr	r3, [pc, #156]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfbe:	4a26      	ldr	r2, [pc, #152]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cfc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cfc6:	4b24      	ldr	r3, [pc, #144]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cfca:	4b24      	ldr	r3, [pc, #144]	@ (800d05c <RCCEx_PLL3_Config+0x160>)
 800cfcc:	4013      	ands	r3, r2
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	69d2      	ldr	r2, [r2, #28]
 800cfd2:	00d2      	lsls	r2, r2, #3
 800cfd4:	4920      	ldr	r1, [pc, #128]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cfda:	4b1f      	ldr	r3, [pc, #124]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfde:	4a1e      	ldr	r2, [pc, #120]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d106      	bne.n	800cffa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cfec:	4b1a      	ldr	r3, [pc, #104]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cff0:	4a19      	ldr	r2, [pc, #100]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800cff2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cff8:	e00f      	b.n	800d01a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d106      	bne.n	800d00e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d000:	4b15      	ldr	r3, [pc, #84]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800d002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d004:	4a14      	ldr	r2, [pc, #80]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800d006:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d00a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d00c:	e005      	b.n	800d01a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d00e:	4b12      	ldr	r3, [pc, #72]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800d010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d012:	4a11      	ldr	r2, [pc, #68]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800d014:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d018:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d01a:	4b0f      	ldr	r3, [pc, #60]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a0e      	ldr	r2, [pc, #56]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800d020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d026:	f7fa fc8d 	bl	8007944 <HAL_GetTick>
 800d02a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d02c:	e008      	b.n	800d040 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d02e:	f7fa fc89 	bl	8007944 <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d901      	bls.n	800d040 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e006      	b.n	800d04e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d040:	4b05      	ldr	r3, [pc, #20]	@ (800d058 <RCCEx_PLL3_Config+0x15c>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d0f0      	beq.n	800d02e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	58024400 	.word	0x58024400
 800d05c:	ffff0007 	.word	0xffff0007

0800d060 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d101      	bne.n	800d072 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e054      	b.n	800d11c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7a5b      	ldrb	r3, [r3, #9]
 800d076:	b2db      	uxtb	r3, r3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d105      	bne.n	800d088 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7fa f9a6 	bl	80073d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2202      	movs	r2, #2
 800d08c:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f023 0120 	bic.w	r1, r3, #32
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	430a      	orrs	r2, r1
 800d0a2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f042 0204 	orr.w	r2, r2, #4
 800d0b2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0be:	2b40      	cmp	r3, #64	@ 0x40
 800d0c0:	d104      	bne.n	800d0cc <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2204      	movs	r2, #4
 800d0c6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e027      	b.n	800d11c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d0cc:	f7fa fc3a 	bl	8007944 <HAL_GetTick>
 800d0d0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d0d2:	e015      	b.n	800d100 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d0d4:	f7fa fc36 	bl	8007944 <HAL_GetTick>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d90e      	bls.n	800d100 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	f003 0304 	and.w	r3, r3, #4
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d107      	bne.n	800d100 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2204      	movs	r2, #4
 800d0f4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e00d      	b.n	800d11c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	f003 0304 	and.w	r3, r3, #4
 800d10a:	2b04      	cmp	r3, #4
 800d10c:	d0e2      	beq.n	800d0d4 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e049      	b.n	800d1ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7fa f97c 	bl	8007448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2202      	movs	r2, #2
 800d154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3304      	adds	r3, #4
 800d160:	4619      	mov	r1, r3
 800d162:	4610      	mov	r0, r2
 800d164:	f000 f9f6 	bl	800d554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d001      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e054      	b.n	800d296 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2202      	movs	r2, #2
 800d1f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68da      	ldr	r2, [r3, #12]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f042 0201 	orr.w	r2, r2, #1
 800d202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a26      	ldr	r2, [pc, #152]	@ (800d2a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d022      	beq.n	800d254 <HAL_TIM_Base_Start_IT+0x80>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d216:	d01d      	beq.n	800d254 <HAL_TIM_Base_Start_IT+0x80>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a22      	ldr	r2, [pc, #136]	@ (800d2a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d018      	beq.n	800d254 <HAL_TIM_Base_Start_IT+0x80>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a21      	ldr	r2, [pc, #132]	@ (800d2ac <HAL_TIM_Base_Start_IT+0xd8>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d013      	beq.n	800d254 <HAL_TIM_Base_Start_IT+0x80>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a1f      	ldr	r2, [pc, #124]	@ (800d2b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d00e      	beq.n	800d254 <HAL_TIM_Base_Start_IT+0x80>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a1e      	ldr	r2, [pc, #120]	@ (800d2b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d009      	beq.n	800d254 <HAL_TIM_Base_Start_IT+0x80>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a1c      	ldr	r2, [pc, #112]	@ (800d2b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d004      	beq.n	800d254 <HAL_TIM_Base_Start_IT+0x80>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2bc <HAL_TIM_Base_Start_IT+0xe8>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d115      	bne.n	800d280 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	689a      	ldr	r2, [r3, #8]
 800d25a:	4b19      	ldr	r3, [pc, #100]	@ (800d2c0 <HAL_TIM_Base_Start_IT+0xec>)
 800d25c:	4013      	ands	r3, r2
 800d25e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2b06      	cmp	r3, #6
 800d264:	d015      	beq.n	800d292 <HAL_TIM_Base_Start_IT+0xbe>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d26c:	d011      	beq.n	800d292 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f042 0201 	orr.w	r2, r2, #1
 800d27c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d27e:	e008      	b.n	800d292 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f042 0201 	orr.w	r2, r2, #1
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	e000      	b.n	800d294 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	40010000 	.word	0x40010000
 800d2a8:	40000400 	.word	0x40000400
 800d2ac:	40000800 	.word	0x40000800
 800d2b0:	40000c00 	.word	0x40000c00
 800d2b4:	40010400 	.word	0x40010400
 800d2b8:	40001800 	.word	0x40001800
 800d2bc:	40014000 	.word	0x40014000
 800d2c0:	00010007 	.word	0x00010007

0800d2c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d122      	bne.n	800d320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f003 0302 	and.w	r3, r3, #2
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d11b      	bne.n	800d320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f06f 0202 	mvn.w	r2, #2
 800d2f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	f003 0303 	and.w	r3, r3, #3
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f905 	bl	800d516 <HAL_TIM_IC_CaptureCallback>
 800d30c:	e005      	b.n	800d31a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f8f7 	bl	800d502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f908 	bl	800d52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	f003 0304 	and.w	r3, r3, #4
 800d32a:	2b04      	cmp	r3, #4
 800d32c:	d122      	bne.n	800d374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	f003 0304 	and.w	r3, r3, #4
 800d338:	2b04      	cmp	r3, #4
 800d33a:	d11b      	bne.n	800d374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f06f 0204 	mvn.w	r2, #4
 800d344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2202      	movs	r2, #2
 800d34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f8db 	bl	800d516 <HAL_TIM_IC_CaptureCallback>
 800d360:	e005      	b.n	800d36e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f8cd 	bl	800d502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 f8de 	bl	800d52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	f003 0308 	and.w	r3, r3, #8
 800d37e:	2b08      	cmp	r3, #8
 800d380:	d122      	bne.n	800d3c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	f003 0308 	and.w	r3, r3, #8
 800d38c:	2b08      	cmp	r3, #8
 800d38e:	d11b      	bne.n	800d3c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f06f 0208 	mvn.w	r2, #8
 800d398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2204      	movs	r2, #4
 800d39e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	f003 0303 	and.w	r3, r3, #3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f8b1 	bl	800d516 <HAL_TIM_IC_CaptureCallback>
 800d3b4:	e005      	b.n	800d3c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f8a3 	bl	800d502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f8b4 	bl	800d52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	f003 0310 	and.w	r3, r3, #16
 800d3d2:	2b10      	cmp	r3, #16
 800d3d4:	d122      	bne.n	800d41c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	f003 0310 	and.w	r3, r3, #16
 800d3e0:	2b10      	cmp	r3, #16
 800d3e2:	d11b      	bne.n	800d41c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f06f 0210 	mvn.w	r2, #16
 800d3ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2208      	movs	r2, #8
 800d3f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 f887 	bl	800d516 <HAL_TIM_IC_CaptureCallback>
 800d408:	e005      	b.n	800d416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 f879 	bl	800d502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 f88a 	bl	800d52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	2b01      	cmp	r3, #1
 800d428:	d10e      	bne.n	800d448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	2b01      	cmp	r3, #1
 800d436:	d107      	bne.n	800d448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f06f 0201 	mvn.w	r2, #1
 800d440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7f9 fcea 	bl	8006e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d452:	2b80      	cmp	r3, #128	@ 0x80
 800d454:	d10e      	bne.n	800d474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d460:	2b80      	cmp	r3, #128	@ 0x80
 800d462:	d107      	bne.n	800d474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f914 	bl	800d69c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d47e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d482:	d10e      	bne.n	800d4a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d48e:	2b80      	cmp	r3, #128	@ 0x80
 800d490:	d107      	bne.n	800d4a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 f907 	bl	800d6b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	691b      	ldr	r3, [r3, #16]
 800d4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ac:	2b40      	cmp	r3, #64	@ 0x40
 800d4ae:	d10e      	bne.n	800d4ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ba:	2b40      	cmp	r3, #64	@ 0x40
 800d4bc:	d107      	bne.n	800d4ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f838 	bl	800d53e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	f003 0320 	and.w	r3, r3, #32
 800d4d8:	2b20      	cmp	r3, #32
 800d4da:	d10e      	bne.n	800d4fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	f003 0320 	and.w	r3, r3, #32
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	d107      	bne.n	800d4fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f06f 0220 	mvn.w	r2, #32
 800d4f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f8c7 	bl	800d688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4fa:	bf00      	nop
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d502:	b480      	push	{r7}
 800d504:	b083      	sub	sp, #12
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d50a:	bf00      	nop
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d516:	b480      	push	{r7}
 800d518:	b083      	sub	sp, #12
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d52a:	b480      	push	{r7}
 800d52c:	b083      	sub	sp, #12
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d532:	bf00      	nop
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d53e:	b480      	push	{r7}
 800d540:	b083      	sub	sp, #12
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d546:	bf00      	nop
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
	...

0800d554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a40      	ldr	r2, [pc, #256]	@ (800d668 <TIM_Base_SetConfig+0x114>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d013      	beq.n	800d594 <TIM_Base_SetConfig+0x40>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d572:	d00f      	beq.n	800d594 <TIM_Base_SetConfig+0x40>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a3d      	ldr	r2, [pc, #244]	@ (800d66c <TIM_Base_SetConfig+0x118>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d00b      	beq.n	800d594 <TIM_Base_SetConfig+0x40>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a3c      	ldr	r2, [pc, #240]	@ (800d670 <TIM_Base_SetConfig+0x11c>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d007      	beq.n	800d594 <TIM_Base_SetConfig+0x40>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a3b      	ldr	r2, [pc, #236]	@ (800d674 <TIM_Base_SetConfig+0x120>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d003      	beq.n	800d594 <TIM_Base_SetConfig+0x40>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4a3a      	ldr	r2, [pc, #232]	@ (800d678 <TIM_Base_SetConfig+0x124>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d108      	bne.n	800d5a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d59a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a2f      	ldr	r2, [pc, #188]	@ (800d668 <TIM_Base_SetConfig+0x114>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d01f      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5b4:	d01b      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a2c      	ldr	r2, [pc, #176]	@ (800d66c <TIM_Base_SetConfig+0x118>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d017      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a2b      	ldr	r2, [pc, #172]	@ (800d670 <TIM_Base_SetConfig+0x11c>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d013      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a2a      	ldr	r2, [pc, #168]	@ (800d674 <TIM_Base_SetConfig+0x120>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d00f      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a29      	ldr	r2, [pc, #164]	@ (800d678 <TIM_Base_SetConfig+0x124>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d00b      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a28      	ldr	r2, [pc, #160]	@ (800d67c <TIM_Base_SetConfig+0x128>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d007      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a27      	ldr	r2, [pc, #156]	@ (800d680 <TIM_Base_SetConfig+0x12c>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d003      	beq.n	800d5ee <TIM_Base_SetConfig+0x9a>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a26      	ldr	r2, [pc, #152]	@ (800d684 <TIM_Base_SetConfig+0x130>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d108      	bne.n	800d600 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	695b      	ldr	r3, [r3, #20]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	689a      	ldr	r2, [r3, #8]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a10      	ldr	r2, [pc, #64]	@ (800d668 <TIM_Base_SetConfig+0x114>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d00f      	beq.n	800d64c <TIM_Base_SetConfig+0xf8>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a12      	ldr	r2, [pc, #72]	@ (800d678 <TIM_Base_SetConfig+0x124>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d00b      	beq.n	800d64c <TIM_Base_SetConfig+0xf8>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a11      	ldr	r2, [pc, #68]	@ (800d67c <TIM_Base_SetConfig+0x128>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d007      	beq.n	800d64c <TIM_Base_SetConfig+0xf8>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4a10      	ldr	r2, [pc, #64]	@ (800d680 <TIM_Base_SetConfig+0x12c>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d003      	beq.n	800d64c <TIM_Base_SetConfig+0xf8>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a0f      	ldr	r2, [pc, #60]	@ (800d684 <TIM_Base_SetConfig+0x130>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d103      	bne.n	800d654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	691a      	ldr	r2, [r3, #16]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2201      	movs	r2, #1
 800d658:	615a      	str	r2, [r3, #20]
}
 800d65a:	bf00      	nop
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	40010000 	.word	0x40010000
 800d66c:	40000400 	.word	0x40000400
 800d670:	40000800 	.word	0x40000800
 800d674:	40000c00 	.word	0x40000c00
 800d678:	40010400 	.word	0x40010400
 800d67c:	40014000 	.word	0x40014000
 800d680:	40014400 	.word	0x40014400
 800d684:	40014800 	.word	0x40014800

0800d688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d690:	bf00      	nop
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d6c4:	b084      	sub	sp, #16
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b084      	sub	sp, #16
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	f107 001c 	add.w	r0, r7, #28
 800d6d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d120      	bne.n	800d71e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800d798 <USB_CoreInit+0xd4>)
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d702:	2b01      	cmp	r3, #1
 800d704:	d105      	bne.n	800d712 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f001 faf8 	bl	800ed08 <USB_CoreReset>
 800d718:	4603      	mov	r3, r0
 800d71a:	73fb      	strb	r3, [r7, #15]
 800d71c:	e01a      	b.n	800d754 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f001 faec 	bl	800ed08 <USB_CoreReset>
 800d730:	4603      	mov	r3, r0
 800d732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d736:	2b00      	cmp	r3, #0
 800d738:	d106      	bne.n	800d748 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d73e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	639a      	str	r2, [r3, #56]	@ 0x38
 800d746:	e005      	b.n	800d754 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d74c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d756:	2b01      	cmp	r3, #1
 800d758:	d116      	bne.n	800d788 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d75e:	b29a      	uxth	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d768:	4b0c      	ldr	r3, [pc, #48]	@ (800d79c <USB_CoreInit+0xd8>)
 800d76a:	4313      	orrs	r3, r2
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	f043 0206 	orr.w	r2, r3, #6
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	f043 0220 	orr.w	r2, r3, #32
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d788:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d794:	b004      	add	sp, #16
 800d796:	4770      	bx	lr
 800d798:	ffbdffbf 	.word	0xffbdffbf
 800d79c:	03ee0000 	.word	0x03ee0000

0800d7a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b087      	sub	sp, #28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d7ae:	79fb      	ldrb	r3, [r7, #7]
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d165      	bne.n	800d880 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	4a41      	ldr	r2, [pc, #260]	@ (800d8bc <USB_SetTurnaroundTime+0x11c>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d906      	bls.n	800d7ca <USB_SetTurnaroundTime+0x2a>
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	4a40      	ldr	r2, [pc, #256]	@ (800d8c0 <USB_SetTurnaroundTime+0x120>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d202      	bcs.n	800d7ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d7c4:	230f      	movs	r3, #15
 800d7c6:	617b      	str	r3, [r7, #20]
 800d7c8:	e062      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	4a3c      	ldr	r2, [pc, #240]	@ (800d8c0 <USB_SetTurnaroundTime+0x120>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d306      	bcc.n	800d7e0 <USB_SetTurnaroundTime+0x40>
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	4a3b      	ldr	r2, [pc, #236]	@ (800d8c4 <USB_SetTurnaroundTime+0x124>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d202      	bcs.n	800d7e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d7da:	230e      	movs	r3, #14
 800d7dc:	617b      	str	r3, [r7, #20]
 800d7de:	e057      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	4a38      	ldr	r2, [pc, #224]	@ (800d8c4 <USB_SetTurnaroundTime+0x124>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d306      	bcc.n	800d7f6 <USB_SetTurnaroundTime+0x56>
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	4a37      	ldr	r2, [pc, #220]	@ (800d8c8 <USB_SetTurnaroundTime+0x128>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d202      	bcs.n	800d7f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d7f0:	230d      	movs	r3, #13
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	e04c      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	4a33      	ldr	r2, [pc, #204]	@ (800d8c8 <USB_SetTurnaroundTime+0x128>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d306      	bcc.n	800d80c <USB_SetTurnaroundTime+0x6c>
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	4a32      	ldr	r2, [pc, #200]	@ (800d8cc <USB_SetTurnaroundTime+0x12c>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d802      	bhi.n	800d80c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d806:	230c      	movs	r3, #12
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	e041      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	4a2f      	ldr	r2, [pc, #188]	@ (800d8cc <USB_SetTurnaroundTime+0x12c>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d906      	bls.n	800d822 <USB_SetTurnaroundTime+0x82>
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	4a2e      	ldr	r2, [pc, #184]	@ (800d8d0 <USB_SetTurnaroundTime+0x130>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d802      	bhi.n	800d822 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d81c:	230b      	movs	r3, #11
 800d81e:	617b      	str	r3, [r7, #20]
 800d820:	e036      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	4a2a      	ldr	r2, [pc, #168]	@ (800d8d0 <USB_SetTurnaroundTime+0x130>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d906      	bls.n	800d838 <USB_SetTurnaroundTime+0x98>
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	4a29      	ldr	r2, [pc, #164]	@ (800d8d4 <USB_SetTurnaroundTime+0x134>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d802      	bhi.n	800d838 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d832:	230a      	movs	r3, #10
 800d834:	617b      	str	r3, [r7, #20]
 800d836:	e02b      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	4a26      	ldr	r2, [pc, #152]	@ (800d8d4 <USB_SetTurnaroundTime+0x134>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d906      	bls.n	800d84e <USB_SetTurnaroundTime+0xae>
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	4a25      	ldr	r2, [pc, #148]	@ (800d8d8 <USB_SetTurnaroundTime+0x138>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d202      	bcs.n	800d84e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d848:	2309      	movs	r3, #9
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e020      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	4a21      	ldr	r2, [pc, #132]	@ (800d8d8 <USB_SetTurnaroundTime+0x138>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d306      	bcc.n	800d864 <USB_SetTurnaroundTime+0xc4>
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	4a20      	ldr	r2, [pc, #128]	@ (800d8dc <USB_SetTurnaroundTime+0x13c>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d802      	bhi.n	800d864 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d85e:	2308      	movs	r3, #8
 800d860:	617b      	str	r3, [r7, #20]
 800d862:	e015      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4a1d      	ldr	r2, [pc, #116]	@ (800d8dc <USB_SetTurnaroundTime+0x13c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d906      	bls.n	800d87a <USB_SetTurnaroundTime+0xda>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	4a1c      	ldr	r2, [pc, #112]	@ (800d8e0 <USB_SetTurnaroundTime+0x140>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d202      	bcs.n	800d87a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d874:	2307      	movs	r3, #7
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e00a      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d87a:	2306      	movs	r3, #6
 800d87c:	617b      	str	r3, [r7, #20]
 800d87e:	e007      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d880:	79fb      	ldrb	r3, [r7, #7]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d102      	bne.n	800d88c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d886:	2309      	movs	r3, #9
 800d888:	617b      	str	r3, [r7, #20]
 800d88a:	e001      	b.n	800d890 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d88c:	2309      	movs	r3, #9
 800d88e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	68da      	ldr	r2, [r3, #12]
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	029b      	lsls	r3, r3, #10
 800d8a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d8a8:	431a      	orrs	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d8ae:	2300      	movs	r3, #0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	371c      	adds	r7, #28
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	00d8acbf 	.word	0x00d8acbf
 800d8c0:	00e4e1c0 	.word	0x00e4e1c0
 800d8c4:	00f42400 	.word	0x00f42400
 800d8c8:	01067380 	.word	0x01067380
 800d8cc:	011a499f 	.word	0x011a499f
 800d8d0:	01312cff 	.word	0x01312cff
 800d8d4:	014ca43f 	.word	0x014ca43f
 800d8d8:	016e3600 	.word	0x016e3600
 800d8dc:	01a6ab1f 	.word	0x01a6ab1f
 800d8e0:	01e84800 	.word	0x01e84800

0800d8e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	f043 0201 	orr.w	r2, r3, #1
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	f023 0201 	bic.w	r2, r3, #1
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d934:	2300      	movs	r3, #0
 800d936:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d944:	78fb      	ldrb	r3, [r7, #3]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d115      	bne.n	800d976 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d956:	2001      	movs	r0, #1
 800d958:	f7fa f800 	bl	800795c <HAL_Delay>
      ms++;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3301      	adds	r3, #1
 800d960:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f001 f93f 	bl	800ebe6 <USB_GetMode>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d01e      	beq.n	800d9ac <USB_SetCurrentMode+0x84>
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2b31      	cmp	r3, #49	@ 0x31
 800d972:	d9f0      	bls.n	800d956 <USB_SetCurrentMode+0x2e>
 800d974:	e01a      	b.n	800d9ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d976:	78fb      	ldrb	r3, [r7, #3]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d115      	bne.n	800d9a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d988:	2001      	movs	r0, #1
 800d98a:	f7f9 ffe7 	bl	800795c <HAL_Delay>
      ms++;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3301      	adds	r3, #1
 800d992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f001 f926 	bl	800ebe6 <USB_GetMode>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <USB_SetCurrentMode+0x84>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b31      	cmp	r3, #49	@ 0x31
 800d9a4:	d9f0      	bls.n	800d988 <USB_SetCurrentMode+0x60>
 800d9a6:	e001      	b.n	800d9ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e005      	b.n	800d9b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2b32      	cmp	r3, #50	@ 0x32
 800d9b0:	d101      	bne.n	800d9b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e000      	b.n	800d9b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b086      	sub	sp, #24
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d9ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d9da:	2300      	movs	r3, #0
 800d9dc:	613b      	str	r3, [r7, #16]
 800d9de:	e009      	b.n	800d9f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	3340      	adds	r3, #64	@ 0x40
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	613b      	str	r3, [r7, #16]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	2b0e      	cmp	r3, #14
 800d9f8:	d9f2      	bls.n	800d9e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d9fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d11c      	bne.n	800da3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da0e:	f043 0302 	orr.w	r3, r3, #2
 800da12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da18:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	e005      	b.n	800da46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da4c:	461a      	mov	r2, r3
 800da4e:	2300      	movs	r3, #0
 800da50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da58:	4619      	mov	r1, r3
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da60:	461a      	mov	r2, r3
 800da62:	680b      	ldr	r3, [r1, #0]
 800da64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d10c      	bne.n	800da86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800da6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d104      	bne.n	800da7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800da72:	2100      	movs	r1, #0
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 f965 	bl	800dd44 <USB_SetDevSpeed>
 800da7a:	e008      	b.n	800da8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800da7c:	2101      	movs	r1, #1
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f960 	bl	800dd44 <USB_SetDevSpeed>
 800da84:	e003      	b.n	800da8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800da86:	2103      	movs	r1, #3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f95b 	bl	800dd44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800da8e:	2110      	movs	r1, #16
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f8f3 	bl	800dc7c <USB_FlushTxFifo>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f91f 	bl	800dce4 <USB_FlushRxFifo>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d001      	beq.n	800dab0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dab6:	461a      	mov	r2, r3
 800dab8:	2300      	movs	r3, #0
 800daba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dac2:	461a      	mov	r2, r3
 800dac4:	2300      	movs	r3, #0
 800dac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dace:	461a      	mov	r2, r3
 800dad0:	2300      	movs	r3, #0
 800dad2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dad4:	2300      	movs	r3, #0
 800dad6:	613b      	str	r3, [r7, #16]
 800dad8:	e043      	b.n	800db62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	015a      	lsls	r2, r3, #5
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	4413      	add	r3, r2
 800dae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800daec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800daf0:	d118      	bne.n	800db24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10a      	bne.n	800db0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	015a      	lsls	r2, r3, #5
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	4413      	add	r3, r2
 800db00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db04:	461a      	mov	r2, r3
 800db06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	e013      	b.n	800db36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	015a      	lsls	r2, r3, #5
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	4413      	add	r3, r2
 800db16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db1a:	461a      	mov	r2, r3
 800db1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db20:	6013      	str	r3, [r2, #0]
 800db22:	e008      	b.n	800db36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	015a      	lsls	r2, r3, #5
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	4413      	add	r3, r2
 800db2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db30:	461a      	mov	r2, r3
 800db32:	2300      	movs	r3, #0
 800db34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	015a      	lsls	r2, r3, #5
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	4413      	add	r3, r2
 800db3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db42:	461a      	mov	r2, r3
 800db44:	2300      	movs	r3, #0
 800db46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	015a      	lsls	r2, r3, #5
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	4413      	add	r3, r2
 800db50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db54:	461a      	mov	r2, r3
 800db56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800db5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	3301      	adds	r3, #1
 800db60:	613b      	str	r3, [r7, #16]
 800db62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	429a      	cmp	r2, r3
 800db68:	d3b7      	bcc.n	800dada <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db6a:	2300      	movs	r3, #0
 800db6c:	613b      	str	r3, [r7, #16]
 800db6e:	e043      	b.n	800dbf8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	015a      	lsls	r2, r3, #5
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	4413      	add	r3, r2
 800db78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db86:	d118      	bne.n	800dbba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10a      	bne.n	800dba4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	015a      	lsls	r2, r3, #5
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	4413      	add	r3, r2
 800db96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db9a:	461a      	mov	r2, r3
 800db9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dba0:	6013      	str	r3, [r2, #0]
 800dba2:	e013      	b.n	800dbcc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	015a      	lsls	r2, r3, #5
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	4413      	add	r3, r2
 800dbac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	e008      	b.n	800dbcc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	015a      	lsls	r2, r3, #5
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	2300      	movs	r3, #0
 800dbca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	015a      	lsls	r2, r3, #5
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbd8:	461a      	mov	r2, r3
 800dbda:	2300      	movs	r3, #0
 800dbdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	015a      	lsls	r2, r3, #5
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbea:	461a      	mov	r2, r3
 800dbec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dbf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	613b      	str	r3, [r7, #16]
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d3b7      	bcc.n	800db70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc06:	691b      	ldr	r3, [r3, #16]
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dc20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d105      	bne.n	800dc34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	699b      	ldr	r3, [r3, #24]
 800dc2c:	f043 0210 	orr.w	r2, r3, #16
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	699a      	ldr	r2, [r3, #24]
 800dc38:	4b0e      	ldr	r3, [pc, #56]	@ (800dc74 <USB_DevInit+0x2b4>)
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dc40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d005      	beq.n	800dc52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	f043 0208 	orr.w	r2, r3, #8
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dc52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d105      	bne.n	800dc64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	699a      	ldr	r2, [r3, #24]
 800dc5c:	4b06      	ldr	r3, [pc, #24]	@ (800dc78 <USB_DevInit+0x2b8>)
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc70:	b004      	add	sp, #16
 800dc72:	4770      	bx	lr
 800dc74:	803c3800 	.word	0x803c3800
 800dc78:	40000004 	.word	0x40000004

0800dc7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dc86:	2300      	movs	r3, #0
 800dc88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	4a13      	ldr	r2, [pc, #76]	@ (800dce0 <USB_FlushTxFifo+0x64>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d901      	bls.n	800dc9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dc98:	2303      	movs	r3, #3
 800dc9a:	e01b      	b.n	800dcd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	daf2      	bge.n	800dc8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dca4:	2300      	movs	r3, #0
 800dca6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	019b      	lsls	r3, r3, #6
 800dcac:	f043 0220 	orr.w	r2, r3, #32
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4a08      	ldr	r2, [pc, #32]	@ (800dce0 <USB_FlushTxFifo+0x64>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d901      	bls.n	800dcc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dcc2:	2303      	movs	r3, #3
 800dcc4:	e006      	b.n	800dcd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	f003 0320 	and.w	r3, r3, #32
 800dcce:	2b20      	cmp	r3, #32
 800dcd0:	d0f0      	beq.n	800dcb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	00030d40 	.word	0x00030d40

0800dce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	4a11      	ldr	r2, [pc, #68]	@ (800dd40 <USB_FlushRxFifo+0x5c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d901      	bls.n	800dd02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e018      	b.n	800dd34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	daf2      	bge.n	800dcf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2210      	movs	r2, #16
 800dd12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3301      	adds	r3, #1
 800dd18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	4a08      	ldr	r2, [pc, #32]	@ (800dd40 <USB_FlushRxFifo+0x5c>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d901      	bls.n	800dd26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dd22:	2303      	movs	r3, #3
 800dd24:	e006      	b.n	800dd34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	f003 0310 	and.w	r3, r3, #16
 800dd2e:	2b10      	cmp	r3, #16
 800dd30:	d0f0      	beq.n	800dd14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	00030d40 	.word	0x00030d40

0800dd44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	68f9      	ldr	r1, [r7, #12]
 800dd60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd64:	4313      	orrs	r3, r2
 800dd66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3714      	adds	r7, #20
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b087      	sub	sp, #28
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	f003 0306 	and.w	r3, r3, #6
 800dd8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d102      	bne.n	800dd9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dd96:	2300      	movs	r3, #0
 800dd98:	75fb      	strb	r3, [r7, #23]
 800dd9a:	e00a      	b.n	800ddb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d002      	beq.n	800dda8 <USB_GetDevSpeed+0x32>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b06      	cmp	r3, #6
 800dda6:	d102      	bne.n	800ddae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dda8:	2302      	movs	r3, #2
 800ddaa:	75fb      	strb	r3, [r7, #23]
 800ddac:	e001      	b.n	800ddb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ddae:	230f      	movs	r3, #15
 800ddb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ddb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	371c      	adds	r7, #28
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	785b      	ldrb	r3, [r3, #1]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d139      	bne.n	800de50 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dde2:	69da      	ldr	r2, [r3, #28]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	f003 030f 	and.w	r3, r3, #15
 800ddec:	2101      	movs	r1, #1
 800ddee:	fa01 f303 	lsl.w	r3, r1, r3
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	68f9      	ldr	r1, [r7, #12]
 800ddf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	015a      	lsls	r2, r3, #5
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4413      	add	r3, r2
 800de06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de10:	2b00      	cmp	r3, #0
 800de12:	d153      	bne.n	800debc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	791b      	ldrb	r3, [r3, #4]
 800de2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	059b      	lsls	r3, r3, #22
 800de36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de38:	431a      	orrs	r2, r3
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	0159      	lsls	r1, r3, #5
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	440b      	add	r3, r1
 800de42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de46:	4619      	mov	r1, r3
 800de48:	4b20      	ldr	r3, [pc, #128]	@ (800decc <USB_ActivateEndpoint+0x10c>)
 800de4a:	4313      	orrs	r3, r2
 800de4c:	600b      	str	r3, [r1, #0]
 800de4e:	e035      	b.n	800debc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de56:	69da      	ldr	r2, [r3, #28]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	f003 030f 	and.w	r3, r3, #15
 800de60:	2101      	movs	r1, #1
 800de62:	fa01 f303 	lsl.w	r3, r1, r3
 800de66:	041b      	lsls	r3, r3, #16
 800de68:	68f9      	ldr	r1, [r7, #12]
 800de6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de6e:	4313      	orrs	r3, r2
 800de70:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	015a      	lsls	r2, r3, #5
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	4413      	add	r3, r2
 800de7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de84:	2b00      	cmp	r3, #0
 800de86:	d119      	bne.n	800debc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	791b      	ldrb	r3, [r3, #4]
 800dea2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dea4:	430b      	orrs	r3, r1
 800dea6:	431a      	orrs	r2, r3
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	0159      	lsls	r1, r3, #5
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	440b      	add	r3, r1
 800deb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb4:	4619      	mov	r1, r3
 800deb6:	4b05      	ldr	r3, [pc, #20]	@ (800decc <USB_ActivateEndpoint+0x10c>)
 800deb8:	4313      	orrs	r3, r2
 800deba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3714      	adds	r7, #20
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	10008000 	.word	0x10008000

0800ded0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	785b      	ldrb	r3, [r3, #1]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d161      	bne.n	800dfb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	4413      	add	r3, r2
 800def4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800defe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df02:	d11f      	bne.n	800df44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	015a      	lsls	r2, r3, #5
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	0151      	lsls	r1, r2, #5
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	440a      	add	r2, r1
 800df1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800df22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	015a      	lsls	r2, r3, #5
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	4413      	add	r3, r2
 800df2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	0151      	lsls	r1, r2, #5
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	440a      	add	r2, r1
 800df3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800df42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	f003 030f 	and.w	r3, r3, #15
 800df54:	2101      	movs	r1, #1
 800df56:	fa01 f303 	lsl.w	r3, r1, r3
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	43db      	mvns	r3, r3
 800df5e:	68f9      	ldr	r1, [r7, #12]
 800df60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df64:	4013      	ands	r3, r2
 800df66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df6e:	69da      	ldr	r2, [r3, #28]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	f003 030f 	and.w	r3, r3, #15
 800df78:	2101      	movs	r1, #1
 800df7a:	fa01 f303 	lsl.w	r3, r1, r3
 800df7e:	b29b      	uxth	r3, r3
 800df80:	43db      	mvns	r3, r3
 800df82:	68f9      	ldr	r1, [r7, #12]
 800df84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df88:	4013      	ands	r3, r2
 800df8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	015a      	lsls	r2, r3, #5
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	4413      	add	r3, r2
 800df94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	0159      	lsls	r1, r3, #5
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	440b      	add	r3, r1
 800dfa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4b35      	ldr	r3, [pc, #212]	@ (800e080 <USB_DeactivateEndpoint+0x1b0>)
 800dfaa:	4013      	ands	r3, r2
 800dfac:	600b      	str	r3, [r1, #0]
 800dfae:	e060      	b.n	800e072 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	015a      	lsls	r2, r3, #5
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dfc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dfc6:	d11f      	bne.n	800e008 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	015a      	lsls	r2, r3, #5
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	4413      	add	r3, r2
 800dfd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	0151      	lsls	r1, r2, #5
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	440a      	add	r2, r1
 800dfde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dfe2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dfe6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	015a      	lsls	r2, r3, #5
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4413      	add	r3, r2
 800dff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	0151      	lsls	r1, r2, #5
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	440a      	add	r2, r1
 800dffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e002:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e00e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f003 030f 	and.w	r3, r3, #15
 800e018:	2101      	movs	r1, #1
 800e01a:	fa01 f303 	lsl.w	r3, r1, r3
 800e01e:	041b      	lsls	r3, r3, #16
 800e020:	43db      	mvns	r3, r3
 800e022:	68f9      	ldr	r1, [r7, #12]
 800e024:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e028:	4013      	ands	r3, r2
 800e02a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e032:	69da      	ldr	r2, [r3, #28]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	f003 030f 	and.w	r3, r3, #15
 800e03c:	2101      	movs	r1, #1
 800e03e:	fa01 f303 	lsl.w	r3, r1, r3
 800e042:	041b      	lsls	r3, r3, #16
 800e044:	43db      	mvns	r3, r3
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e04c:	4013      	ands	r3, r2
 800e04e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	015a      	lsls	r2, r3, #5
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	4413      	add	r3, r2
 800e058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	0159      	lsls	r1, r3, #5
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	440b      	add	r3, r1
 800e066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e06a:	4619      	mov	r1, r3
 800e06c:	4b05      	ldr	r3, [pc, #20]	@ (800e084 <USB_DeactivateEndpoint+0x1b4>)
 800e06e:	4013      	ands	r3, r2
 800e070:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	ec337800 	.word	0xec337800
 800e084:	eff37800 	.word	0xeff37800

0800e088 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08a      	sub	sp, #40	@ 0x28
 800e08c:	af02      	add	r7, sp, #8
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4613      	mov	r3, r2
 800e094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	785b      	ldrb	r3, [r3, #1]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	f040 8181 	bne.w	800e3ac <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d132      	bne.n	800e118 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0be:	691a      	ldr	r2, [r3, #16]
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	0159      	lsls	r1, r3, #5
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	440b      	add	r3, r1
 800e0c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4ba5      	ldr	r3, [pc, #660]	@ (800e364 <USB_EPStartXfer+0x2dc>)
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0e0:	691b      	ldr	r3, [r3, #16]
 800e0e2:	69ba      	ldr	r2, [r7, #24]
 800e0e4:	0151      	lsls	r1, r2, #5
 800e0e6:	69fa      	ldr	r2, [r7, #28]
 800e0e8:	440a      	add	r2, r1
 800e0ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e0f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e100:	691a      	ldr	r2, [r3, #16]
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	0159      	lsls	r1, r3, #5
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	440b      	add	r3, r1
 800e10a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e10e:	4619      	mov	r1, r3
 800e110:	4b95      	ldr	r3, [pc, #596]	@ (800e368 <USB_EPStartXfer+0x2e0>)
 800e112:	4013      	ands	r3, r2
 800e114:	610b      	str	r3, [r1, #16]
 800e116:	e092      	b.n	800e23e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	015a      	lsls	r2, r3, #5
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	4413      	add	r3, r2
 800e120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e124:	691a      	ldr	r2, [r3, #16]
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	0159      	lsls	r1, r3, #5
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	440b      	add	r3, r1
 800e12e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e132:	4619      	mov	r1, r3
 800e134:	4b8c      	ldr	r3, [pc, #560]	@ (800e368 <USB_EPStartXfer+0x2e0>)
 800e136:	4013      	ands	r3, r2
 800e138:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	015a      	lsls	r2, r3, #5
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	4413      	add	r3, r2
 800e142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e146:	691a      	ldr	r2, [r3, #16]
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	0159      	lsls	r1, r3, #5
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	440b      	add	r3, r1
 800e150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e154:	4619      	mov	r1, r3
 800e156:	4b83      	ldr	r3, [pc, #524]	@ (800e364 <USB_EPStartXfer+0x2dc>)
 800e158:	4013      	ands	r3, r2
 800e15a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d11a      	bne.n	800e198 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	691a      	ldr	r2, [r3, #16]
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d903      	bls.n	800e176 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	689a      	ldr	r2, [r3, #8]
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	4413      	add	r3, r2
 800e17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	69ba      	ldr	r2, [r7, #24]
 800e186:	0151      	lsls	r1, r2, #5
 800e188:	69fa      	ldr	r2, [r7, #28]
 800e18a:	440a      	add	r2, r1
 800e18c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e194:	6113      	str	r3, [r2, #16]
 800e196:	e01b      	b.n	800e1d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	015a      	lsls	r2, r3, #5
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	6919      	ldr	r1, [r3, #16]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	440b      	add	r3, r1
 800e1b0:	1e59      	subs	r1, r3, #1
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800e1ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e1bc:	4b6b      	ldr	r3, [pc, #428]	@ (800e36c <USB_EPStartXfer+0x2e4>)
 800e1be:	400b      	ands	r3, r1
 800e1c0:	69b9      	ldr	r1, [r7, #24]
 800e1c2:	0148      	lsls	r0, r1, #5
 800e1c4:	69f9      	ldr	r1, [r7, #28]
 800e1c6:	4401      	add	r1, r0
 800e1c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	015a      	lsls	r2, r3, #5
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1dc:	691a      	ldr	r2, [r3, #16]
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	691b      	ldr	r3, [r3, #16]
 800e1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1e6:	69b9      	ldr	r1, [r7, #24]
 800e1e8:	0148      	lsls	r0, r1, #5
 800e1ea:	69f9      	ldr	r1, [r7, #28]
 800e1ec:	4401      	add	r1, r0
 800e1ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	791b      	ldrb	r3, [r3, #4]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d11f      	bne.n	800e23e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	015a      	lsls	r2, r3, #5
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	4413      	add	r3, r2
 800e206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e20a:	691b      	ldr	r3, [r3, #16]
 800e20c:	69ba      	ldr	r2, [r7, #24]
 800e20e:	0151      	lsls	r1, r2, #5
 800e210:	69fa      	ldr	r2, [r7, #28]
 800e212:	440a      	add	r2, r1
 800e214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e218:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e21c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	015a      	lsls	r2, r3, #5
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	4413      	add	r3, r2
 800e226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	0151      	lsls	r1, r2, #5
 800e230:	69fa      	ldr	r2, [r7, #28]
 800e232:	440a      	add	r2, r1
 800e234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e238:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e23c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d14b      	bne.n	800e2dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	69db      	ldr	r3, [r3, #28]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d009      	beq.n	800e260 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	4413      	add	r3, r2
 800e254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e258:	461a      	mov	r2, r3
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	791b      	ldrb	r3, [r3, #4]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d128      	bne.n	800e2ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e274:	2b00      	cmp	r3, #0
 800e276:	d110      	bne.n	800e29a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	015a      	lsls	r2, r3, #5
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	4413      	add	r3, r2
 800e280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	69ba      	ldr	r2, [r7, #24]
 800e288:	0151      	lsls	r1, r2, #5
 800e28a:	69fa      	ldr	r2, [r7, #28]
 800e28c:	440a      	add	r2, r1
 800e28e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e292:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e296:	6013      	str	r3, [r2, #0]
 800e298:	e00f      	b.n	800e2ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	015a      	lsls	r2, r3, #5
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	69ba      	ldr	r2, [r7, #24]
 800e2aa:	0151      	lsls	r1, r2, #5
 800e2ac:	69fa      	ldr	r2, [r7, #28]
 800e2ae:	440a      	add	r2, r1
 800e2b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e2b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	69ba      	ldr	r2, [r7, #24]
 800e2ca:	0151      	lsls	r1, r2, #5
 800e2cc:	69fa      	ldr	r2, [r7, #28]
 800e2ce:	440a      	add	r2, r1
 800e2d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e2d8:	6013      	str	r3, [r2, #0]
 800e2da:	e16a      	b.n	800e5b2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	015a      	lsls	r2, r3, #5
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	69ba      	ldr	r2, [r7, #24]
 800e2ec:	0151      	lsls	r1, r2, #5
 800e2ee:	69fa      	ldr	r2, [r7, #28]
 800e2f0:	440a      	add	r2, r1
 800e2f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e2fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	791b      	ldrb	r3, [r3, #4]
 800e300:	2b01      	cmp	r3, #1
 800e302:	d015      	beq.n	800e330 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 8152 	beq.w	800e5b2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	f003 030f 	and.w	r3, r3, #15
 800e31e:	2101      	movs	r1, #1
 800e320:	fa01 f303 	lsl.w	r3, r1, r3
 800e324:	69f9      	ldr	r1, [r7, #28]
 800e326:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e32a:	4313      	orrs	r3, r2
 800e32c:	634b      	str	r3, [r1, #52]	@ 0x34
 800e32e:	e140      	b.n	800e5b2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d117      	bne.n	800e370 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	015a      	lsls	r2, r3, #5
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	4413      	add	r3, r2
 800e348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	0151      	lsls	r1, r2, #5
 800e352:	69fa      	ldr	r2, [r7, #28]
 800e354:	440a      	add	r2, r1
 800e356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e35a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e35e:	6013      	str	r3, [r2, #0]
 800e360:	e016      	b.n	800e390 <USB_EPStartXfer+0x308>
 800e362:	bf00      	nop
 800e364:	e007ffff 	.word	0xe007ffff
 800e368:	fff80000 	.word	0xfff80000
 800e36c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	015a      	lsls	r2, r3, #5
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	4413      	add	r3, r2
 800e378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	69ba      	ldr	r2, [r7, #24]
 800e380:	0151      	lsls	r1, r2, #5
 800e382:	69fa      	ldr	r2, [r7, #28]
 800e384:	440a      	add	r2, r1
 800e386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e38a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e38e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	68d9      	ldr	r1, [r3, #12]
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	781a      	ldrb	r2, [r3, #0]
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	b298      	uxth	r0, r3
 800e39e:	79fb      	ldrb	r3, [r7, #7]
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 f9b9 	bl	800e71c <USB_WritePacket>
 800e3aa:	e102      	b.n	800e5b2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3b8:	691a      	ldr	r2, [r3, #16]
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	0159      	lsls	r1, r3, #5
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	440b      	add	r3, r1
 800e3c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	4b7c      	ldr	r3, [pc, #496]	@ (800e5bc <USB_EPStartXfer+0x534>)
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	015a      	lsls	r2, r3, #5
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3da:	691a      	ldr	r2, [r3, #16]
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	0159      	lsls	r1, r3, #5
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	440b      	add	r3, r1
 800e3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4b75      	ldr	r3, [pc, #468]	@ (800e5c0 <USB_EPStartXfer+0x538>)
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d12f      	bne.n	800e456 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	689a      	ldr	r2, [r3, #8]
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	689a      	ldr	r2, [r3, #8]
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e41a:	691a      	ldr	r2, [r3, #16]
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	6a1b      	ldr	r3, [r3, #32]
 800e420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e424:	69b9      	ldr	r1, [r7, #24]
 800e426:	0148      	lsls	r0, r1, #5
 800e428:	69f9      	ldr	r1, [r7, #28]
 800e42a:	4401      	add	r1, r0
 800e42c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e430:	4313      	orrs	r3, r2
 800e432:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e440:	691b      	ldr	r3, [r3, #16]
 800e442:	69ba      	ldr	r2, [r7, #24]
 800e444:	0151      	lsls	r1, r2, #5
 800e446:	69fa      	ldr	r2, [r7, #28]
 800e448:	440a      	add	r2, r1
 800e44a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e44e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e452:	6113      	str	r3, [r2, #16]
 800e454:	e05f      	b.n	800e516 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d123      	bne.n	800e4a6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	015a      	lsls	r2, r3, #5
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	4413      	add	r3, r2
 800e466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e46a:	691a      	ldr	r2, [r3, #16]
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e474:	69b9      	ldr	r1, [r7, #24]
 800e476:	0148      	lsls	r0, r1, #5
 800e478:	69f9      	ldr	r1, [r7, #28]
 800e47a:	4401      	add	r1, r0
 800e47c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e480:	4313      	orrs	r3, r2
 800e482:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	0151      	lsls	r1, r2, #5
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	440a      	add	r2, r1
 800e49a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e49e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e4a2:	6113      	str	r3, [r2, #16]
 800e4a4:	e037      	b.n	800e516 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	691a      	ldr	r2, [r3, #16]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	1e5a      	subs	r2, r3, #1
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ba:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	8afa      	ldrh	r2, [r7, #22]
 800e4c2:	fb03 f202 	mul.w	r2, r3, r2
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	015a      	lsls	r2, r3, #5
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4d6:	691a      	ldr	r2, [r3, #16]
 800e4d8:	8afb      	ldrh	r3, [r7, #22]
 800e4da:	04d9      	lsls	r1, r3, #19
 800e4dc:	4b39      	ldr	r3, [pc, #228]	@ (800e5c4 <USB_EPStartXfer+0x53c>)
 800e4de:	400b      	ands	r3, r1
 800e4e0:	69b9      	ldr	r1, [r7, #24]
 800e4e2:	0148      	lsls	r0, r1, #5
 800e4e4:	69f9      	ldr	r1, [r7, #28]
 800e4e6:	4401      	add	r1, r0
 800e4e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	015a      	lsls	r2, r3, #5
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4fc:	691a      	ldr	r2, [r3, #16]
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e506:	69b9      	ldr	r1, [r7, #24]
 800e508:	0148      	lsls	r0, r1, #5
 800e50a:	69f9      	ldr	r1, [r7, #28]
 800e50c:	4401      	add	r1, r0
 800e50e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e512:	4313      	orrs	r3, r2
 800e514:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d10d      	bne.n	800e538 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d009      	beq.n	800e538 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	68d9      	ldr	r1, [r3, #12]
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	015a      	lsls	r2, r3, #5
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	4413      	add	r3, r2
 800e530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e534:	460a      	mov	r2, r1
 800e536:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	791b      	ldrb	r3, [r3, #4]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d128      	bne.n	800e592 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e546:	689b      	ldr	r3, [r3, #8]
 800e548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d110      	bne.n	800e572 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	4413      	add	r3, r2
 800e558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	69ba      	ldr	r2, [r7, #24]
 800e560:	0151      	lsls	r1, r2, #5
 800e562:	69fa      	ldr	r2, [r7, #28]
 800e564:	440a      	add	r2, r1
 800e566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e56a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e56e:	6013      	str	r3, [r2, #0]
 800e570:	e00f      	b.n	800e592 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	015a      	lsls	r2, r3, #5
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	4413      	add	r3, r2
 800e57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	69ba      	ldr	r2, [r7, #24]
 800e582:	0151      	lsls	r1, r2, #5
 800e584:	69fa      	ldr	r2, [r7, #28]
 800e586:	440a      	add	r2, r1
 800e588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e58c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e590:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	015a      	lsls	r2, r3, #5
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	4413      	add	r3, r2
 800e59a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	69ba      	ldr	r2, [r7, #24]
 800e5a2:	0151      	lsls	r1, r2, #5
 800e5a4:	69fa      	ldr	r2, [r7, #28]
 800e5a6:	440a      	add	r2, r1
 800e5a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e5b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3720      	adds	r7, #32
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	fff80000 	.word	0xfff80000
 800e5c0:	e007ffff 	.word	0xe007ffff
 800e5c4:	1ff80000 	.word	0x1ff80000

0800e5c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b087      	sub	sp, #28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	785b      	ldrb	r3, [r3, #1]
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d14a      	bne.n	800e67c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	015a      	lsls	r2, r3, #5
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5fe:	f040 8086 	bne.w	800e70e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	015a      	lsls	r2, r3, #5
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	4413      	add	r3, r2
 800e60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	7812      	ldrb	r2, [r2, #0]
 800e616:	0151      	lsls	r1, r2, #5
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	440a      	add	r2, r1
 800e61c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e620:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e624:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	683a      	ldr	r2, [r7, #0]
 800e638:	7812      	ldrb	r2, [r2, #0]
 800e63a:	0151      	lsls	r1, r2, #5
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	440a      	add	r2, r1
 800e640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e644:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e648:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	3301      	adds	r3, #1
 800e64e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e656:	4293      	cmp	r3, r2
 800e658:	d902      	bls.n	800e660 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e65a:	2301      	movs	r3, #1
 800e65c:	75fb      	strb	r3, [r7, #23]
          break;
 800e65e:	e056      	b.n	800e70e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	015a      	lsls	r2, r3, #5
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	4413      	add	r3, r2
 800e66a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e678:	d0e7      	beq.n	800e64a <USB_EPStopXfer+0x82>
 800e67a:	e048      	b.n	800e70e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	015a      	lsls	r2, r3, #5
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	4413      	add	r3, r2
 800e686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e694:	d13b      	bne.n	800e70e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	015a      	lsls	r2, r3, #5
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	4413      	add	r3, r2
 800e6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	7812      	ldrb	r2, [r2, #0]
 800e6aa:	0151      	lsls	r1, r2, #5
 800e6ac:	693a      	ldr	r2, [r7, #16]
 800e6ae:	440a      	add	r2, r1
 800e6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e6b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	015a      	lsls	r2, r3, #5
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	4413      	add	r3, r2
 800e6c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	7812      	ldrb	r2, [r2, #0]
 800e6ce:	0151      	lsls	r1, r2, #5
 800e6d0:	693a      	ldr	r2, [r7, #16]
 800e6d2:	440a      	add	r2, r1
 800e6d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d902      	bls.n	800e6f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	75fb      	strb	r3, [r7, #23]
          break;
 800e6f2:	e00c      	b.n	800e70e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	015a      	lsls	r2, r3, #5
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e70c:	d0e7      	beq.n	800e6de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e710:	4618      	mov	r0, r3
 800e712:	371c      	adds	r7, #28
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b089      	sub	sp, #36	@ 0x24
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	4611      	mov	r1, r2
 800e728:	461a      	mov	r2, r3
 800e72a:	460b      	mov	r3, r1
 800e72c:	71fb      	strb	r3, [r7, #7]
 800e72e:	4613      	mov	r3, r2
 800e730:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e73a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d123      	bne.n	800e78a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e742:	88bb      	ldrh	r3, [r7, #4]
 800e744:	3303      	adds	r3, #3
 800e746:	089b      	lsrs	r3, r3, #2
 800e748:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e74a:	2300      	movs	r3, #0
 800e74c:	61bb      	str	r3, [r7, #24]
 800e74e:	e018      	b.n	800e782 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	031a      	lsls	r2, r3, #12
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	4413      	add	r3, r2
 800e758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e75c:	461a      	mov	r2, r3
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	3301      	adds	r3, #1
 800e768:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	3301      	adds	r3, #1
 800e76e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	3301      	adds	r3, #1
 800e774:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	3301      	adds	r3, #1
 800e77a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	3301      	adds	r3, #1
 800e780:	61bb      	str	r3, [r7, #24]
 800e782:	69ba      	ldr	r2, [r7, #24]
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	429a      	cmp	r2, r3
 800e788:	d3e2      	bcc.n	800e750 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3724      	adds	r7, #36	@ 0x24
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e798:	b480      	push	{r7}
 800e79a:	b08b      	sub	sp, #44	@ 0x2c
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e7ae:	88fb      	ldrh	r3, [r7, #6]
 800e7b0:	089b      	lsrs	r3, r3, #2
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e7b6:	88fb      	ldrh	r3, [r7, #6]
 800e7b8:	f003 0303 	and.w	r3, r3, #3
 800e7bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e7be:	2300      	movs	r3, #0
 800e7c0:	623b      	str	r3, [r7, #32]
 800e7c2:	e014      	b.n	800e7ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d8:	3301      	adds	r3, #1
 800e7da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7de:	3301      	adds	r3, #1
 800e7e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	623b      	str	r3, [r7, #32]
 800e7ee:	6a3a      	ldr	r2, [r7, #32]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d3e6      	bcc.n	800e7c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e7f6:	8bfb      	ldrh	r3, [r7, #30]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d01e      	beq.n	800e83a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e806:	461a      	mov	r2, r3
 800e808:	f107 0310 	add.w	r3, r7, #16
 800e80c:	6812      	ldr	r2, [r2, #0]
 800e80e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e810:	693a      	ldr	r2, [r7, #16]
 800e812:	6a3b      	ldr	r3, [r7, #32]
 800e814:	b2db      	uxtb	r3, r3
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	fa22 f303 	lsr.w	r3, r2, r3
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e820:	701a      	strb	r2, [r3, #0]
      i++;
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	3301      	adds	r3, #1
 800e826:	623b      	str	r3, [r7, #32]
      pDest++;
 800e828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e82a:	3301      	adds	r3, #1
 800e82c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e82e:	8bfb      	ldrh	r3, [r7, #30]
 800e830:	3b01      	subs	r3, #1
 800e832:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e834:	8bfb      	ldrh	r3, [r7, #30]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1ea      	bne.n	800e810 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	372c      	adds	r7, #44	@ 0x2c
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	785b      	ldrb	r3, [r3, #1]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d12c      	bne.n	800e8be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	015a      	lsls	r2, r3, #5
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	db12      	blt.n	800e89c <USB_EPSetStall+0x54>
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00f      	beq.n	800e89c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	015a      	lsls	r2, r3, #5
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	4413      	add	r3, r2
 800e884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	0151      	lsls	r1, r2, #5
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	440a      	add	r2, r1
 800e892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e896:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e89a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	015a      	lsls	r2, r3, #5
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	0151      	lsls	r1, r2, #5
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	440a      	add	r2, r1
 800e8b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e8ba:	6013      	str	r3, [r2, #0]
 800e8bc:	e02b      	b.n	800e916 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	015a      	lsls	r2, r3, #5
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	db12      	blt.n	800e8f6 <USB_EPSetStall+0xae>
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00f      	beq.n	800e8f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	015a      	lsls	r2, r3, #5
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	4413      	add	r3, r2
 800e8de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	0151      	lsls	r1, r2, #5
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	440a      	add	r2, r1
 800e8ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e8f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	015a      	lsls	r2, r3, #5
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	0151      	lsls	r1, r2, #5
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	440a      	add	r2, r1
 800e90c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e914:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3714      	adds	r7, #20
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e924:	b480      	push	{r7}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	785b      	ldrb	r3, [r3, #1]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d128      	bne.n	800e992 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	4413      	add	r3, r2
 800e948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	0151      	lsls	r1, r2, #5
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	440a      	add	r2, r1
 800e956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e95a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e95e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	791b      	ldrb	r3, [r3, #4]
 800e964:	2b03      	cmp	r3, #3
 800e966:	d003      	beq.n	800e970 <USB_EPClearStall+0x4c>
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	791b      	ldrb	r3, [r3, #4]
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d138      	bne.n	800e9e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	015a      	lsls	r2, r3, #5
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	4413      	add	r3, r2
 800e978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	0151      	lsls	r1, r2, #5
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	440a      	add	r2, r1
 800e986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e98a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e98e:	6013      	str	r3, [r2, #0]
 800e990:	e027      	b.n	800e9e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	015a      	lsls	r2, r3, #5
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	0151      	lsls	r1, r2, #5
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	440a      	add	r2, r1
 800e9a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e9b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	791b      	ldrb	r3, [r3, #4]
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d003      	beq.n	800e9c2 <USB_EPClearStall+0x9e>
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	791b      	ldrb	r3, [r3, #4]
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d10f      	bne.n	800e9e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	015a      	lsls	r2, r3, #5
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	0151      	lsls	r1, r2, #5
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	440a      	add	r2, r1
 800e9d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e9e2:	2300      	movs	r3, #0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3714      	adds	r7, #20
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr

0800e9f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b085      	sub	sp, #20
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ea0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ea12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	78fb      	ldrb	r3, [r7, #3]
 800ea1e:	011b      	lsls	r3, r3, #4
 800ea20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ea24:	68f9      	ldr	r1, [r7, #12]
 800ea26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3714      	adds	r7, #20
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ea56:	f023 0303 	bic.w	r3, r3, #3
 800ea5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ea6a:	f023 0302 	bic.w	r3, r3, #2
 800ea6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr

0800ea7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea7e:	b480      	push	{r7}
 800ea80:	b085      	sub	sp, #20
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ea98:	f023 0303 	bic.w	r3, r3, #3
 800ea9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eaac:	f043 0302 	orr.w	r3, r3, #2
 800eab0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3714      	adds	r7, #20
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	699b      	ldr	r3, [r3, #24]
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	4013      	ands	r3, r2
 800ead6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ead8:	68fb      	ldr	r3, [r7, #12]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eae6:	b480      	push	{r7}
 800eae8:	b085      	sub	sp, #20
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb02:	69db      	ldr	r3, [r3, #28]
 800eb04:	68ba      	ldr	r2, [r7, #8]
 800eb06:	4013      	ands	r3, r2
 800eb08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	0c1b      	lsrs	r3, r3, #16
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3714      	adds	r7, #20
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb1a:	b480      	push	{r7}
 800eb1c:	b085      	sub	sp, #20
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb36:	69db      	ldr	r3, [r3, #28]
 800eb38:	68ba      	ldr	r2, [r7, #8]
 800eb3a:	4013      	ands	r3, r2
 800eb3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	b29b      	uxth	r3, r3
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3714      	adds	r7, #20
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr

0800eb4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb4e:	b480      	push	{r7}
 800eb50:	b085      	sub	sp, #20
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	460b      	mov	r3, r1
 800eb58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	015a      	lsls	r2, r3, #5
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	4413      	add	r3, r2
 800eb66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	4013      	ands	r3, r2
 800eb7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb7c:	68bb      	ldr	r3, [r7, #8]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3714      	adds	r7, #20
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	b087      	sub	sp, #28
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	460b      	mov	r3, r1
 800eb94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eba0:	691b      	ldr	r3, [r3, #16]
 800eba2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ebae:	78fb      	ldrb	r3, [r7, #3]
 800ebb0:	f003 030f 	and.w	r3, r3, #15
 800ebb4:	68fa      	ldr	r2, [r7, #12]
 800ebb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebba:	01db      	lsls	r3, r3, #7
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ebc4:	78fb      	ldrb	r3, [r7, #3]
 800ebc6:	015a      	lsls	r2, r3, #5
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	4413      	add	r3, r2
 800ebcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4013      	ands	r3, r2
 800ebd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ebd8:	68bb      	ldr	r3, [r7, #8]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	371c      	adds	r7, #28
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	b083      	sub	sp, #12
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	f003 0301 	and.w	r3, r3, #1
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	370c      	adds	r7, #12
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr
	...

0800ec04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b085      	sub	sp, #20
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4b09      	ldr	r3, [pc, #36]	@ (800ec48 <USB_ActivateSetup+0x44>)
 800ec22:	4013      	ands	r3, r2
 800ec24:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	fffff800 	.word	0xfffff800

0800ec4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	460b      	mov	r3, r1
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	333c      	adds	r3, #60	@ 0x3c
 800ec62:	3304      	adds	r3, #4
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	4a26      	ldr	r2, [pc, #152]	@ (800ed04 <USB_EP0_OutStart+0xb8>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d90a      	bls.n	800ec86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec80:	d101      	bne.n	800ec86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	e037      	b.n	800ecf6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	2300      	movs	r3, #0
 800ec90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec98:	691b      	ldr	r3, [r3, #16]
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eca0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecb4:	f043 0318 	orr.w	r3, r3, #24
 800ecb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	697a      	ldr	r2, [r7, #20]
 800ecc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecc8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800eccc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ecce:	7afb      	ldrb	r3, [r7, #11]
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d10f      	bne.n	800ecf4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecda:	461a      	mov	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ecf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	371c      	adds	r7, #28
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	4f54300a 	.word	0x4f54300a

0800ed08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed10:	2300      	movs	r3, #0
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	3301      	adds	r3, #1
 800ed18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	4a13      	ldr	r2, [pc, #76]	@ (800ed6c <USB_CoreReset+0x64>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d901      	bls.n	800ed26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ed22:	2303      	movs	r3, #3
 800ed24:	e01b      	b.n	800ed5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	daf2      	bge.n	800ed14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	f043 0201 	orr.w	r2, r3, #1
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	3301      	adds	r3, #1
 800ed42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	4a09      	ldr	r2, [pc, #36]	@ (800ed6c <USB_CoreReset+0x64>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d901      	bls.n	800ed50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ed4c:	2303      	movs	r3, #3
 800ed4e:	e006      	b.n	800ed5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	691b      	ldr	r3, [r3, #16]
 800ed54:	f003 0301 	and.w	r3, r3, #1
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d0f0      	beq.n	800ed3e <USB_CoreReset+0x36>

  return HAL_OK;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3714      	adds	r7, #20
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	00030d40 	.word	0x00030d40

0800ed70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ed7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ed80:	f002 fce6 	bl	8011750 <USBD_static_malloc>
 800ed84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d109      	bne.n	800eda0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	32b0      	adds	r2, #176	@ 0xb0
 800ed96:	2100      	movs	r1, #0
 800ed98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	e0d4      	b.n	800ef4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800eda0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800eda4:	2100      	movs	r1, #0
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f003 f97c 	bl	80120a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	32b0      	adds	r2, #176	@ 0xb0
 800edb6:	68f9      	ldr	r1, [r7, #12]
 800edb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	32b0      	adds	r2, #176	@ 0xb0
 800edc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	7c1b      	ldrb	r3, [r3, #16]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d138      	bne.n	800ee4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800edd8:	4b5e      	ldr	r3, [pc, #376]	@ (800ef54 <USBD_CDC_Init+0x1e4>)
 800edda:	7819      	ldrb	r1, [r3, #0]
 800eddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ede0:	2202      	movs	r2, #2
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f002 fb91 	bl	801150a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ede8:	4b5a      	ldr	r3, [pc, #360]	@ (800ef54 <USBD_CDC_Init+0x1e4>)
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	f003 020f 	and.w	r2, r3, #15
 800edf0:	6879      	ldr	r1, [r7, #4]
 800edf2:	4613      	mov	r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4413      	add	r3, r2
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	440b      	add	r3, r1
 800edfc:	3324      	adds	r3, #36	@ 0x24
 800edfe:	2201      	movs	r2, #1
 800ee00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ee02:	4b55      	ldr	r3, [pc, #340]	@ (800ef58 <USBD_CDC_Init+0x1e8>)
 800ee04:	7819      	ldrb	r1, [r3, #0]
 800ee06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee0a:	2202      	movs	r2, #2
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f002 fb7c 	bl	801150a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ee12:	4b51      	ldr	r3, [pc, #324]	@ (800ef58 <USBD_CDC_Init+0x1e8>)
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f003 020f 	and.w	r2, r3, #15
 800ee1a:	6879      	ldr	r1, [r7, #4]
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	440b      	add	r3, r1
 800ee26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ee2e:	4b4b      	ldr	r3, [pc, #300]	@ (800ef5c <USBD_CDC_Init+0x1ec>)
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	f003 020f 	and.w	r2, r3, #15
 800ee36:	6879      	ldr	r1, [r7, #4]
 800ee38:	4613      	mov	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4413      	add	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	440b      	add	r3, r1
 800ee42:	3326      	adds	r3, #38	@ 0x26
 800ee44:	2210      	movs	r2, #16
 800ee46:	801a      	strh	r2, [r3, #0]
 800ee48:	e035      	b.n	800eeb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ee4a:	4b42      	ldr	r3, [pc, #264]	@ (800ef54 <USBD_CDC_Init+0x1e4>)
 800ee4c:	7819      	ldrb	r1, [r3, #0]
 800ee4e:	2340      	movs	r3, #64	@ 0x40
 800ee50:	2202      	movs	r2, #2
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f002 fb59 	bl	801150a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ee58:	4b3e      	ldr	r3, [pc, #248]	@ (800ef54 <USBD_CDC_Init+0x1e4>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	f003 020f 	and.w	r2, r3, #15
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	4613      	mov	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	4413      	add	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	440b      	add	r3, r1
 800ee6c:	3324      	adds	r3, #36	@ 0x24
 800ee6e:	2201      	movs	r2, #1
 800ee70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ee72:	4b39      	ldr	r3, [pc, #228]	@ (800ef58 <USBD_CDC_Init+0x1e8>)
 800ee74:	7819      	ldrb	r1, [r3, #0]
 800ee76:	2340      	movs	r3, #64	@ 0x40
 800ee78:	2202      	movs	r2, #2
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f002 fb45 	bl	801150a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ee80:	4b35      	ldr	r3, [pc, #212]	@ (800ef58 <USBD_CDC_Init+0x1e8>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f003 020f 	and.w	r2, r3, #15
 800ee88:	6879      	ldr	r1, [r7, #4]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	4413      	add	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	440b      	add	r3, r1
 800ee94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ee98:	2201      	movs	r2, #1
 800ee9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ee9c:	4b2f      	ldr	r3, [pc, #188]	@ (800ef5c <USBD_CDC_Init+0x1ec>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 020f 	and.w	r2, r3, #15
 800eea4:	6879      	ldr	r1, [r7, #4]
 800eea6:	4613      	mov	r3, r2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	4413      	add	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	440b      	add	r3, r1
 800eeb0:	3326      	adds	r3, #38	@ 0x26
 800eeb2:	2210      	movs	r2, #16
 800eeb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eeb6:	4b29      	ldr	r3, [pc, #164]	@ (800ef5c <USBD_CDC_Init+0x1ec>)
 800eeb8:	7819      	ldrb	r1, [r3, #0]
 800eeba:	2308      	movs	r3, #8
 800eebc:	2203      	movs	r2, #3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f002 fb23 	bl	801150a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800eec4:	4b25      	ldr	r3, [pc, #148]	@ (800ef5c <USBD_CDC_Init+0x1ec>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	f003 020f 	and.w	r2, r3, #15
 800eecc:	6879      	ldr	r1, [r7, #4]
 800eece:	4613      	mov	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4413      	add	r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	440b      	add	r3, r1
 800eed8:	3324      	adds	r3, #36	@ 0x24
 800eeda:	2201      	movs	r2, #1
 800eedc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	33b0      	adds	r3, #176	@ 0xb0
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	4413      	add	r3, r2
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d101      	bne.n	800ef18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ef14:	2302      	movs	r3, #2
 800ef16:	e018      	b.n	800ef4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	7c1b      	ldrb	r3, [r3, #16]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10a      	bne.n	800ef36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef20:	4b0d      	ldr	r3, [pc, #52]	@ (800ef58 <USBD_CDC_Init+0x1e8>)
 800ef22:	7819      	ldrb	r1, [r3, #0]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ef2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f002 fbda 	bl	80116e8 <USBD_LL_PrepareReceive>
 800ef34:	e008      	b.n	800ef48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef36:	4b08      	ldr	r3, [pc, #32]	@ (800ef58 <USBD_CDC_Init+0x1e8>)
 800ef38:	7819      	ldrb	r1, [r3, #0]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ef40:	2340      	movs	r3, #64	@ 0x40
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f002 fbd0 	bl	80116e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	24000467 	.word	0x24000467
 800ef58:	24000468 	.word	0x24000468
 800ef5c:	24000469 	.word	0x24000469

0800ef60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ef6c:	4b3a      	ldr	r3, [pc, #232]	@ (800f058 <USBD_CDC_DeInit+0xf8>)
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f002 faef 	bl	8011556 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ef78:	4b37      	ldr	r3, [pc, #220]	@ (800f058 <USBD_CDC_DeInit+0xf8>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	f003 020f 	and.w	r2, r3, #15
 800ef80:	6879      	ldr	r1, [r7, #4]
 800ef82:	4613      	mov	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	440b      	add	r3, r1
 800ef8c:	3324      	adds	r3, #36	@ 0x24
 800ef8e:	2200      	movs	r2, #0
 800ef90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ef92:	4b32      	ldr	r3, [pc, #200]	@ (800f05c <USBD_CDC_DeInit+0xfc>)
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f002 fadc 	bl	8011556 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ef9e:	4b2f      	ldr	r3, [pc, #188]	@ (800f05c <USBD_CDC_DeInit+0xfc>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	f003 020f 	and.w	r2, r3, #15
 800efa6:	6879      	ldr	r1, [r7, #4]
 800efa8:	4613      	mov	r3, r2
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	440b      	add	r3, r1
 800efb2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800efb6:	2200      	movs	r2, #0
 800efb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800efba:	4b29      	ldr	r3, [pc, #164]	@ (800f060 <USBD_CDC_DeInit+0x100>)
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	4619      	mov	r1, r3
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f002 fac8 	bl	8011556 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800efc6:	4b26      	ldr	r3, [pc, #152]	@ (800f060 <USBD_CDC_DeInit+0x100>)
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	f003 020f 	and.w	r2, r3, #15
 800efce:	6879      	ldr	r1, [r7, #4]
 800efd0:	4613      	mov	r3, r2
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	4413      	add	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	440b      	add	r3, r1
 800efda:	3324      	adds	r3, #36	@ 0x24
 800efdc:	2200      	movs	r2, #0
 800efde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800efe0:	4b1f      	ldr	r3, [pc, #124]	@ (800f060 <USBD_CDC_DeInit+0x100>)
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	f003 020f 	and.w	r2, r3, #15
 800efe8:	6879      	ldr	r1, [r7, #4]
 800efea:	4613      	mov	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4413      	add	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	440b      	add	r3, r1
 800eff4:	3326      	adds	r3, #38	@ 0x26
 800eff6:	2200      	movs	r2, #0
 800eff8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	32b0      	adds	r2, #176	@ 0xb0
 800f004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d01f      	beq.n	800f04c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	33b0      	adds	r3, #176	@ 0xb0
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	4413      	add	r3, r2
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	32b0      	adds	r2, #176	@ 0xb0
 800f02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f02e:	4618      	mov	r0, r3
 800f030:	f002 fb9c 	bl	801176c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	32b0      	adds	r2, #176	@ 0xb0
 800f03e:	2100      	movs	r1, #0
 800f040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	24000467 	.word	0x24000467
 800f05c:	24000468 	.word	0x24000468
 800f060:	24000469 	.word	0x24000469

0800f064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	32b0      	adds	r2, #176	@ 0xb0
 800f078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f07c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f07e:	2300      	movs	r3, #0
 800f080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f082:	2300      	movs	r3, #0
 800f084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f086:	2300      	movs	r3, #0
 800f088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f090:	2303      	movs	r3, #3
 800f092:	e0bf      	b.n	800f214 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d050      	beq.n	800f142 <USBD_CDC_Setup+0xde>
 800f0a0:	2b20      	cmp	r3, #32
 800f0a2:	f040 80af 	bne.w	800f204 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	88db      	ldrh	r3, [r3, #6]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d03a      	beq.n	800f124 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	b25b      	sxtb	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	da1b      	bge.n	800f0f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	33b0      	adds	r3, #176	@ 0xb0
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	689b      	ldr	r3, [r3, #8]
 800f0ca:	683a      	ldr	r2, [r7, #0]
 800f0cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f0ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	88d2      	ldrh	r2, [r2, #6]
 800f0d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	88db      	ldrh	r3, [r3, #6]
 800f0da:	2b07      	cmp	r3, #7
 800f0dc:	bf28      	it	cs
 800f0de:	2307      	movcs	r3, #7
 800f0e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	89fa      	ldrh	r2, [r7, #14]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f001 fd87 	bl	8010bfc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f0ee:	e090      	b.n	800f212 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	785a      	ldrb	r2, [r3, #1]
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	88db      	ldrh	r3, [r3, #6]
 800f0fe:	2b3f      	cmp	r3, #63	@ 0x3f
 800f100:	d803      	bhi.n	800f10a <USBD_CDC_Setup+0xa6>
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	88db      	ldrh	r3, [r3, #6]
 800f106:	b2da      	uxtb	r2, r3
 800f108:	e000      	b.n	800f10c <USBD_CDC_Setup+0xa8>
 800f10a:	2240      	movs	r2, #64	@ 0x40
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f112:	6939      	ldr	r1, [r7, #16]
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f11a:	461a      	mov	r2, r3
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f001 fd99 	bl	8010c54 <USBD_CtlPrepareRx>
      break;
 800f122:	e076      	b.n	800f212 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	33b0      	adds	r3, #176	@ 0xb0
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4413      	add	r3, r2
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	7850      	ldrb	r0, [r2, #1]
 800f13a:	2200      	movs	r2, #0
 800f13c:	6839      	ldr	r1, [r7, #0]
 800f13e:	4798      	blx	r3
      break;
 800f140:	e067      	b.n	800f212 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	785b      	ldrb	r3, [r3, #1]
 800f146:	2b0b      	cmp	r3, #11
 800f148:	d851      	bhi.n	800f1ee <USBD_CDC_Setup+0x18a>
 800f14a:	a201      	add	r2, pc, #4	@ (adr r2, 800f150 <USBD_CDC_Setup+0xec>)
 800f14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f150:	0800f181 	.word	0x0800f181
 800f154:	0800f1fd 	.word	0x0800f1fd
 800f158:	0800f1ef 	.word	0x0800f1ef
 800f15c:	0800f1ef 	.word	0x0800f1ef
 800f160:	0800f1ef 	.word	0x0800f1ef
 800f164:	0800f1ef 	.word	0x0800f1ef
 800f168:	0800f1ef 	.word	0x0800f1ef
 800f16c:	0800f1ef 	.word	0x0800f1ef
 800f170:	0800f1ef 	.word	0x0800f1ef
 800f174:	0800f1ef 	.word	0x0800f1ef
 800f178:	0800f1ab 	.word	0x0800f1ab
 800f17c:	0800f1d5 	.word	0x0800f1d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b03      	cmp	r3, #3
 800f18a:	d107      	bne.n	800f19c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f18c:	f107 030a 	add.w	r3, r7, #10
 800f190:	2202      	movs	r2, #2
 800f192:	4619      	mov	r1, r3
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f001 fd31 	bl	8010bfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f19a:	e032      	b.n	800f202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f19c:	6839      	ldr	r1, [r7, #0]
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f001 fcbb 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800f1a4:	2303      	movs	r3, #3
 800f1a6:	75fb      	strb	r3, [r7, #23]
          break;
 800f1a8:	e02b      	b.n	800f202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d107      	bne.n	800f1c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f1b6:	f107 030d 	add.w	r3, r7, #13
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	4619      	mov	r1, r3
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f001 fd1c 	bl	8010bfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f1c4:	e01d      	b.n	800f202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f001 fca6 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800f1ce:	2303      	movs	r3, #3
 800f1d0:	75fb      	strb	r3, [r7, #23]
          break;
 800f1d2:	e016      	b.n	800f202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	2b03      	cmp	r3, #3
 800f1de:	d00f      	beq.n	800f200 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f001 fc99 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f1ec:	e008      	b.n	800f200 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f001 fc92 	bl	8010b1a <USBD_CtlError>
          ret = USBD_FAIL;
 800f1f6:	2303      	movs	r3, #3
 800f1f8:	75fb      	strb	r3, [r7, #23]
          break;
 800f1fa:	e002      	b.n	800f202 <USBD_CDC_Setup+0x19e>
          break;
 800f1fc:	bf00      	nop
 800f1fe:	e008      	b.n	800f212 <USBD_CDC_Setup+0x1ae>
          break;
 800f200:	bf00      	nop
      }
      break;
 800f202:	e006      	b.n	800f212 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f001 fc87 	bl	8010b1a <USBD_CtlError>
      ret = USBD_FAIL;
 800f20c:	2303      	movs	r3, #3
 800f20e:	75fb      	strb	r3, [r7, #23]
      break;
 800f210:	bf00      	nop
  }

  return (uint8_t)ret;
 800f212:	7dfb      	ldrb	r3, [r7, #23]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3718      	adds	r7, #24
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	460b      	mov	r3, r1
 800f226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f22e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	32b0      	adds	r2, #176	@ 0xb0
 800f23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f242:	2303      	movs	r3, #3
 800f244:	e065      	b.n	800f312 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	32b0      	adds	r2, #176	@ 0xb0
 800f250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f256:	78fb      	ldrb	r3, [r7, #3]
 800f258:	f003 020f 	and.w	r2, r3, #15
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	4613      	mov	r3, r2
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	4413      	add	r3, r2
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	440b      	add	r3, r1
 800f268:	3318      	adds	r3, #24
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d02f      	beq.n	800f2d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f270:	78fb      	ldrb	r3, [r7, #3]
 800f272:	f003 020f 	and.w	r2, r3, #15
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	4613      	mov	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	4413      	add	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	440b      	add	r3, r1
 800f282:	3318      	adds	r3, #24
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	78fb      	ldrb	r3, [r7, #3]
 800f288:	f003 010f 	and.w	r1, r3, #15
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	460b      	mov	r3, r1
 800f290:	00db      	lsls	r3, r3, #3
 800f292:	440b      	add	r3, r1
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	4403      	add	r3, r0
 800f298:	3344      	adds	r3, #68	@ 0x44
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f2a0:	fb01 f303 	mul.w	r3, r1, r3
 800f2a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d112      	bne.n	800f2d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f2aa:	78fb      	ldrb	r3, [r7, #3]
 800f2ac:	f003 020f 	and.w	r2, r3, #15
 800f2b0:	6879      	ldr	r1, [r7, #4]
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	4413      	add	r3, r2
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	440b      	add	r3, r1
 800f2bc:	3318      	adds	r3, #24
 800f2be:	2200      	movs	r2, #0
 800f2c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f2c2:	78f9      	ldrb	r1, [r7, #3]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f002 f9ec 	bl	80116a6 <USBD_LL_Transmit>
 800f2ce:	e01f      	b.n	800f310 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	33b0      	adds	r3, #176	@ 0xb0
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	4413      	add	r3, r2
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d010      	beq.n	800f310 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	33b0      	adds	r3, #176	@ 0xb0
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4413      	add	r3, r2
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f306:	68ba      	ldr	r2, [r7, #8]
 800f308:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f30c:	78fa      	ldrb	r2, [r7, #3]
 800f30e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f310:	2300      	movs	r3, #0
}
 800f312:	4618      	mov	r0, r3
 800f314:	3710      	adds	r7, #16
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b084      	sub	sp, #16
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
 800f322:	460b      	mov	r3, r1
 800f324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	32b0      	adds	r2, #176	@ 0xb0
 800f330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f334:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	32b0      	adds	r2, #176	@ 0xb0
 800f340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f348:	2303      	movs	r3, #3
 800f34a:	e01a      	b.n	800f382 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f34c:	78fb      	ldrb	r3, [r7, #3]
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f002 f9ea 	bl	801172a <USBD_LL_GetRxDataSize>
 800f356:	4602      	mov	r2, r0
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	33b0      	adds	r3, #176	@ 0xb0
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f37c:	4611      	mov	r1, r2
 800f37e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b084      	sub	sp, #16
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	32b0      	adds	r2, #176	@ 0xb0
 800f39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d101      	bne.n	800f3ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f3a8:	2303      	movs	r3, #3
 800f3aa:	e024      	b.n	800f3f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	33b0      	adds	r3, #176	@ 0xb0
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	4413      	add	r3, r2
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d019      	beq.n	800f3f4 <USBD_CDC_EP0_RxReady+0x6a>
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f3c6:	2bff      	cmp	r3, #255	@ 0xff
 800f3c8:	d014      	beq.n	800f3f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	33b0      	adds	r3, #176	@ 0xb0
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	4413      	add	r3, r2
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	68fa      	ldr	r2, [r7, #12]
 800f3de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f3e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f3ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	22ff      	movs	r2, #255	@ 0xff
 800f3f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
	...

0800f400 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f408:	2182      	movs	r1, #130	@ 0x82
 800f40a:	4818      	ldr	r0, [pc, #96]	@ (800f46c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f40c:	f000 fd4f 	bl	800feae <USBD_GetEpDesc>
 800f410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f412:	2101      	movs	r1, #1
 800f414:	4815      	ldr	r0, [pc, #84]	@ (800f46c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f416:	f000 fd4a 	bl	800feae <USBD_GetEpDesc>
 800f41a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f41c:	2181      	movs	r1, #129	@ 0x81
 800f41e:	4813      	ldr	r0, [pc, #76]	@ (800f46c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f420:	f000 fd45 	bl	800feae <USBD_GetEpDesc>
 800f424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2210      	movs	r2, #16
 800f430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d006      	beq.n	800f446 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f440:	711a      	strb	r2, [r3, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d006      	beq.n	800f45a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2200      	movs	r2, #0
 800f450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f454:	711a      	strb	r2, [r3, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2243      	movs	r2, #67	@ 0x43
 800f45e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f460:	4b02      	ldr	r3, [pc, #8]	@ (800f46c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f462:	4618      	mov	r0, r3
 800f464:	3718      	adds	r7, #24
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	24000424 	.word	0x24000424

0800f470 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f478:	2182      	movs	r1, #130	@ 0x82
 800f47a:	4818      	ldr	r0, [pc, #96]	@ (800f4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f47c:	f000 fd17 	bl	800feae <USBD_GetEpDesc>
 800f480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f482:	2101      	movs	r1, #1
 800f484:	4815      	ldr	r0, [pc, #84]	@ (800f4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f486:	f000 fd12 	bl	800feae <USBD_GetEpDesc>
 800f48a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f48c:	2181      	movs	r1, #129	@ 0x81
 800f48e:	4813      	ldr	r0, [pc, #76]	@ (800f4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f490:	f000 fd0d 	bl	800feae <USBD_GetEpDesc>
 800f494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d002      	beq.n	800f4a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2210      	movs	r2, #16
 800f4a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d006      	beq.n	800f4b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	711a      	strb	r2, [r3, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f042 0202 	orr.w	r2, r2, #2
 800f4b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d006      	beq.n	800f4ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	711a      	strb	r2, [r3, #4]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f042 0202 	orr.w	r2, r2, #2
 800f4c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2243      	movs	r2, #67	@ 0x43
 800f4ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f4d0:	4b02      	ldr	r3, [pc, #8]	@ (800f4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3718      	adds	r7, #24
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	24000424 	.word	0x24000424

0800f4e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b086      	sub	sp, #24
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f4e8:	2182      	movs	r1, #130	@ 0x82
 800f4ea:	4818      	ldr	r0, [pc, #96]	@ (800f54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f4ec:	f000 fcdf 	bl	800feae <USBD_GetEpDesc>
 800f4f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f4f2:	2101      	movs	r1, #1
 800f4f4:	4815      	ldr	r0, [pc, #84]	@ (800f54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f4f6:	f000 fcda 	bl	800feae <USBD_GetEpDesc>
 800f4fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f4fc:	2181      	movs	r1, #129	@ 0x81
 800f4fe:	4813      	ldr	r0, [pc, #76]	@ (800f54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f500:	f000 fcd5 	bl	800feae <USBD_GetEpDesc>
 800f504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	2210      	movs	r2, #16
 800f510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d006      	beq.n	800f526 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	2200      	movs	r2, #0
 800f51c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f520:	711a      	strb	r2, [r3, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d006      	beq.n	800f53a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2200      	movs	r2, #0
 800f530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f534:	711a      	strb	r2, [r3, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2243      	movs	r2, #67	@ 0x43
 800f53e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f540:	4b02      	ldr	r3, [pc, #8]	@ (800f54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f542:	4618      	mov	r0, r3
 800f544:	3718      	adds	r7, #24
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	24000424 	.word	0x24000424

0800f550 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	220a      	movs	r2, #10
 800f55c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f55e:	4b03      	ldr	r3, [pc, #12]	@ (800f56c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f560:	4618      	mov	r0, r3
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	240003e0 	.word	0x240003e0

0800f570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d101      	bne.n	800f584 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f580:	2303      	movs	r3, #3
 800f582:	e009      	b.n	800f598 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	33b0      	adds	r3, #176	@ 0xb0
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f596:	2300      	movs	r3, #0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b087      	sub	sp, #28
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	32b0      	adds	r2, #176	@ 0xb0
 800f5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d101      	bne.n	800f5ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f5c6:	2303      	movs	r3, #3
 800f5c8:	e008      	b.n	800f5dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	371c      	adds	r7, #28
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	32b0      	adds	r2, #176	@ 0xb0
 800f5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f608:	2303      	movs	r3, #3
 800f60a:	e004      	b.n	800f616 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	3714      	adds	r7, #20
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
	...

0800f624 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	32b0      	adds	r2, #176	@ 0xb0
 800f636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f63a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f63c:	2301      	movs	r3, #1
 800f63e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d101      	bne.n	800f64a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f646:	2303      	movs	r3, #3
 800f648:	e025      	b.n	800f696 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f650:	2b00      	cmp	r3, #0
 800f652:	d11f      	bne.n	800f694 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	2201      	movs	r2, #1
 800f658:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f65c:	4b10      	ldr	r3, [pc, #64]	@ (800f6a0 <USBD_CDC_TransmitPacket+0x7c>)
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	f003 020f 	and.w	r2, r3, #15
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	4613      	mov	r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	4413      	add	r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4403      	add	r3, r0
 800f676:	3318      	adds	r3, #24
 800f678:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f67a:	4b09      	ldr	r3, [pc, #36]	@ (800f6a0 <USBD_CDC_TransmitPacket+0x7c>)
 800f67c:	7819      	ldrb	r1, [r3, #0]
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f002 f80b 	bl	80116a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f690:	2300      	movs	r3, #0
 800f692:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f694:	7bfb      	ldrb	r3, [r7, #15]
}
 800f696:	4618      	mov	r0, r3
 800f698:	3710      	adds	r7, #16
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	24000467 	.word	0x24000467

0800f6a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	32b0      	adds	r2, #176	@ 0xb0
 800f6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	32b0      	adds	r2, #176	@ 0xb0
 800f6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d101      	bne.n	800f6d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f6ce:	2303      	movs	r3, #3
 800f6d0:	e018      	b.n	800f704 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	7c1b      	ldrb	r3, [r3, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d10a      	bne.n	800f6f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f6da:	4b0c      	ldr	r3, [pc, #48]	@ (800f70c <USBD_CDC_ReceivePacket+0x68>)
 800f6dc:	7819      	ldrb	r1, [r3, #0]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f6e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f001 fffd 	bl	80116e8 <USBD_LL_PrepareReceive>
 800f6ee:	e008      	b.n	800f702 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f6f0:	4b06      	ldr	r3, [pc, #24]	@ (800f70c <USBD_CDC_ReceivePacket+0x68>)
 800f6f2:	7819      	ldrb	r1, [r3, #0]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f6fa:	2340      	movs	r3, #64	@ 0x40
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f001 fff3 	bl	80116e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	24000468 	.word	0x24000468

0800f710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	4613      	mov	r3, r2
 800f71c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d101      	bne.n	800f728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f724:	2303      	movs	r3, #3
 800f726:	e01f      	b.n	800f768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2200      	movs	r2, #0
 800f734:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d003      	beq.n	800f74e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	68ba      	ldr	r2, [r7, #8]
 800f74a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2201      	movs	r2, #1
 800f752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	79fa      	ldrb	r2, [r7, #7]
 800f75a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f001 fe69 	bl	8011434 <USBD_LL_Init>
 800f762:	4603      	mov	r3, r0
 800f764:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f766:	7dfb      	ldrb	r3, [r7, #23]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3718      	adds	r7, #24
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f77a:	2300      	movs	r3, #0
 800f77c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d101      	bne.n	800f788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f784:	2303      	movs	r3, #3
 800f786:	e025      	b.n	800f7d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	683a      	ldr	r2, [r7, #0]
 800f78c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	32ae      	adds	r2, #174	@ 0xae
 800f79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00f      	beq.n	800f7c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	32ae      	adds	r2, #174	@ 0xae
 800f7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b4:	f107 020e 	add.w	r2, r7, #14
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	4798      	blx	r3
 800f7bc:	4602      	mov	r2, r0
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f001 fe75 	bl	80114d4 <USBD_LL_Start>
 800f7ea:	4603      	mov	r3, r0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	370c      	adds	r7, #12
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr

0800f80a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b084      	sub	sp, #16
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	460b      	mov	r3, r1
 800f814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f816:	2300      	movs	r3, #0
 800f818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f820:	2b00      	cmp	r3, #0
 800f822:	d009      	beq.n	800f838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	78fa      	ldrb	r2, [r7, #3]
 800f82e:	4611      	mov	r1, r2
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	4798      	blx	r3
 800f834:	4603      	mov	r3, r0
 800f836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f838:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b084      	sub	sp, #16
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	460b      	mov	r3, r1
 800f84c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f84e:	2300      	movs	r3, #0
 800f850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	78fa      	ldrb	r2, [r7, #3]
 800f85c:	4611      	mov	r1, r2
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	4798      	blx	r3
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d001      	beq.n	800f86c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f868:	2303      	movs	r3, #3
 800f86a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b084      	sub	sp, #16
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	4618      	mov	r0, r3
 800f88a:	f001 f90c 	bl	8010aa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2201      	movs	r2, #1
 800f892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f89c:	461a      	mov	r2, r3
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f8aa:	f003 031f 	and.w	r3, r3, #31
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d01a      	beq.n	800f8e8 <USBD_LL_SetupStage+0x72>
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d822      	bhi.n	800f8fc <USBD_LL_SetupStage+0x86>
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <USBD_LL_SetupStage+0x4a>
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d00a      	beq.n	800f8d4 <USBD_LL_SetupStage+0x5e>
 800f8be:	e01d      	b.n	800f8fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fb63 	bl	800ff94 <USBD_StdDevReq>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800f8d2:	e020      	b.n	800f916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f8da:	4619      	mov	r1, r3
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 fbcb 	bl	8010078 <USBD_StdItfReq>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800f8e6:	e016      	b.n	800f916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f000 fc2d 	bl	8010150 <USBD_StdEPReq>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800f8fa:	e00c      	b.n	800f916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f902:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f906:	b2db      	uxtb	r3, r3
 800f908:	4619      	mov	r1, r3
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f001 fe42 	bl	8011594 <USBD_LL_StallEP>
 800f910:	4603      	mov	r3, r0
 800f912:	73fb      	strb	r3, [r7, #15]
      break;
 800f914:	bf00      	nop
  }

  return ret;
 800f916:	7bfb      	ldrb	r3, [r7, #15]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3710      	adds	r7, #16
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	460b      	mov	r3, r1
 800f92a:	607a      	str	r2, [r7, #4]
 800f92c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f92e:	2300      	movs	r3, #0
 800f930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f932:	7afb      	ldrb	r3, [r7, #11]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d16e      	bne.n	800fa16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f93e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f946:	2b03      	cmp	r3, #3
 800f948:	f040 8098 	bne.w	800fa7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	689a      	ldr	r2, [r3, #8]
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	429a      	cmp	r2, r3
 800f956:	d913      	bls.n	800f980 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	689a      	ldr	r2, [r3, #8]
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	1ad2      	subs	r2, r2, r3
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	68da      	ldr	r2, [r3, #12]
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	4293      	cmp	r3, r2
 800f970:	bf28      	it	cs
 800f972:	4613      	movcs	r3, r2
 800f974:	461a      	mov	r2, r3
 800f976:	6879      	ldr	r1, [r7, #4]
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f001 f988 	bl	8010c8e <USBD_CtlContinueRx>
 800f97e:	e07d      	b.n	800fa7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f986:	f003 031f 	and.w	r3, r3, #31
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d014      	beq.n	800f9b8 <USBD_LL_DataOutStage+0x98>
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d81d      	bhi.n	800f9ce <USBD_LL_DataOutStage+0xae>
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <USBD_LL_DataOutStage+0x7c>
 800f996:	2b01      	cmp	r3, #1
 800f998:	d003      	beq.n	800f9a2 <USBD_LL_DataOutStage+0x82>
 800f99a:	e018      	b.n	800f9ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f99c:	2300      	movs	r3, #0
 800f99e:	75bb      	strb	r3, [r7, #22]
            break;
 800f9a0:	e018      	b.n	800f9d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f000 fa64 	bl	800fe7a <USBD_CoreFindIF>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	75bb      	strb	r3, [r7, #22]
            break;
 800f9b6:	e00d      	b.n	800f9d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f000 fa66 	bl	800fe94 <USBD_CoreFindEP>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	75bb      	strb	r3, [r7, #22]
            break;
 800f9cc:	e002      	b.n	800f9d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	75bb      	strb	r3, [r7, #22]
            break;
 800f9d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f9d4:	7dbb      	ldrb	r3, [r7, #22]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d119      	bne.n	800fa0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b03      	cmp	r3, #3
 800f9e4:	d113      	bne.n	800fa0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f9e6:	7dba      	ldrb	r2, [r7, #22]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	32ae      	adds	r2, #174	@ 0xae
 800f9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00b      	beq.n	800fa0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f9f6:	7dba      	ldrb	r2, [r7, #22]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f9fe:	7dba      	ldrb	r2, [r7, #22]
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	32ae      	adds	r2, #174	@ 0xae
 800fa04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f001 f94e 	bl	8010cb0 <USBD_CtlSendStatus>
 800fa14:	e032      	b.n	800fa7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fa16:	7afb      	ldrb	r3, [r7, #11]
 800fa18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	4619      	mov	r1, r3
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f000 fa37 	bl	800fe94 <USBD_CoreFindEP>
 800fa26:	4603      	mov	r3, r0
 800fa28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fa2a:	7dbb      	ldrb	r3, [r7, #22]
 800fa2c:	2bff      	cmp	r3, #255	@ 0xff
 800fa2e:	d025      	beq.n	800fa7c <USBD_LL_DataOutStage+0x15c>
 800fa30:	7dbb      	ldrb	r3, [r7, #22]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d122      	bne.n	800fa7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	2b03      	cmp	r3, #3
 800fa40:	d117      	bne.n	800fa72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fa42:	7dba      	ldrb	r2, [r7, #22]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	32ae      	adds	r2, #174	@ 0xae
 800fa48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa4c:	699b      	ldr	r3, [r3, #24]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00f      	beq.n	800fa72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fa52:	7dba      	ldrb	r2, [r7, #22]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fa5a:	7dba      	ldrb	r2, [r7, #22]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	32ae      	adds	r2, #174	@ 0xae
 800fa60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa64:	699b      	ldr	r3, [r3, #24]
 800fa66:	7afa      	ldrb	r2, [r7, #11]
 800fa68:	4611      	mov	r1, r2
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	4798      	blx	r3
 800fa6e:	4603      	mov	r3, r0
 800fa70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d001      	beq.n	800fa7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fa78:	7dfb      	ldrb	r3, [r7, #23]
 800fa7a:	e000      	b.n	800fa7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3718      	adds	r7, #24
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fa86:	b580      	push	{r7, lr}
 800fa88:	b086      	sub	sp, #24
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	60f8      	str	r0, [r7, #12]
 800fa8e:	460b      	mov	r3, r1
 800fa90:	607a      	str	r2, [r7, #4]
 800fa92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fa94:	7afb      	ldrb	r3, [r7, #11]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d16f      	bne.n	800fb7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3314      	adds	r3, #20
 800fa9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800faa6:	2b02      	cmp	r3, #2
 800faa8:	d15a      	bne.n	800fb60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	689a      	ldr	r2, [r3, #8]
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d914      	bls.n	800fae0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	689a      	ldr	r2, [r3, #8]
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	461a      	mov	r2, r3
 800faca:	6879      	ldr	r1, [r7, #4]
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f001 f8b0 	bl	8010c32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fad2:	2300      	movs	r3, #0
 800fad4:	2200      	movs	r2, #0
 800fad6:	2100      	movs	r1, #0
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f001 fe05 	bl	80116e8 <USBD_LL_PrepareReceive>
 800fade:	e03f      	b.n	800fb60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	68da      	ldr	r2, [r3, #12]
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d11c      	bne.n	800fb26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	685a      	ldr	r2, [r3, #4]
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d316      	bcc.n	800fb26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	685a      	ldr	r2, [r3, #4]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d20f      	bcs.n	800fb26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fb06:	2200      	movs	r2, #0
 800fb08:	2100      	movs	r1, #0
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f001 f891 	bl	8010c32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb18:	2300      	movs	r3, #0
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f001 fde2 	bl	80116e8 <USBD_LL_PrepareReceive>
 800fb24:	e01c      	b.n	800fb60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b03      	cmp	r3, #3
 800fb30:	d10f      	bne.n	800fb52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d009      	beq.n	800fb52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2200      	movs	r2, #0
 800fb42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb52:	2180      	movs	r1, #128	@ 0x80
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f001 fd1d 	bl	8011594 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f001 f8bb 	bl	8010cd6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d03a      	beq.n	800fbe0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	f7ff fe42 	bl	800f7f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fb78:	e032      	b.n	800fbe0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fb7a:	7afb      	ldrb	r3, [r7, #11]
 800fb7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	4619      	mov	r1, r3
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f000 f985 	bl	800fe94 <USBD_CoreFindEP>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
 800fb90:	2bff      	cmp	r3, #255	@ 0xff
 800fb92:	d025      	beq.n	800fbe0 <USBD_LL_DataInStage+0x15a>
 800fb94:	7dfb      	ldrb	r3, [r7, #23]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d122      	bne.n	800fbe0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b03      	cmp	r3, #3
 800fba4:	d11c      	bne.n	800fbe0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fba6:	7dfa      	ldrb	r2, [r7, #23]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	32ae      	adds	r2, #174	@ 0xae
 800fbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb0:	695b      	ldr	r3, [r3, #20]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d014      	beq.n	800fbe0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fbb6:	7dfa      	ldrb	r2, [r7, #23]
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fbbe:	7dfa      	ldrb	r2, [r7, #23]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	32ae      	adds	r2, #174	@ 0xae
 800fbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc8:	695b      	ldr	r3, [r3, #20]
 800fbca:	7afa      	ldrb	r2, [r7, #11]
 800fbcc:	4611      	mov	r1, r2
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	4798      	blx	r3
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fbd6:	7dbb      	ldrb	r3, [r7, #22]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fbdc:	7dbb      	ldrb	r3, [r7, #22]
 800fbde:	e000      	b.n	800fbe2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fbe0:	2300      	movs	r3, #0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}

0800fbea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b084      	sub	sp, #16
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d014      	beq.n	800fc50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d00e      	beq.n	800fc50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	6852      	ldr	r2, [r2, #4]
 800fc3e:	b2d2      	uxtb	r2, r2
 800fc40:	4611      	mov	r1, r2
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	4798      	blx	r3
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d001      	beq.n	800fc50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fc4c:	2303      	movs	r3, #3
 800fc4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc50:	2340      	movs	r3, #64	@ 0x40
 800fc52:	2200      	movs	r2, #0
 800fc54:	2100      	movs	r1, #0
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f001 fc57 	bl	801150a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2240      	movs	r2, #64	@ 0x40
 800fc68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc6c:	2340      	movs	r3, #64	@ 0x40
 800fc6e:	2200      	movs	r2, #0
 800fc70:	2180      	movs	r1, #128	@ 0x80
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f001 fc49 	bl	801150a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2240      	movs	r2, #64	@ 0x40
 800fc82:	621a      	str	r2, [r3, #32]

  return ret;
 800fc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b083      	sub	sp, #12
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	460b      	mov	r3, r1
 800fc98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	78fa      	ldrb	r2, [r7, #3]
 800fc9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fcae:	b480      	push	{r7}
 800fcb0:	b083      	sub	sp, #12
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b04      	cmp	r3, #4
 800fcc0:	d006      	beq.n	800fcd0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2204      	movs	r2, #4
 800fcd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800fcd8:	2300      	movs	r3, #0
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr

0800fce6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fce6:	b480      	push	{r7}
 800fce8:	b083      	sub	sp, #12
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	2b04      	cmp	r3, #4
 800fcf8:	d106      	bne.n	800fd08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fd00:	b2da      	uxtb	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b082      	sub	sp, #8
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d110      	bne.n	800fd4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00b      	beq.n	800fd4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd3a:	69db      	ldr	r3, [r3, #28]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d005      	beq.n	800fd4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd46:	69db      	ldr	r3, [r3, #28]
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b082      	sub	sp, #8
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
 800fd5e:	460b      	mov	r3, r1
 800fd60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	32ae      	adds	r2, #174	@ 0xae
 800fd6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d101      	bne.n	800fd78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fd74:	2303      	movs	r3, #3
 800fd76:	e01c      	b.n	800fdb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	2b03      	cmp	r3, #3
 800fd82:	d115      	bne.n	800fdb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	32ae      	adds	r2, #174	@ 0xae
 800fd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd92:	6a1b      	ldr	r3, [r3, #32]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00b      	beq.n	800fdb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	32ae      	adds	r2, #174	@ 0xae
 800fda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda6:	6a1b      	ldr	r3, [r3, #32]
 800fda8:	78fa      	ldrb	r2, [r7, #3]
 800fdaa:	4611      	mov	r1, r2
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fdb0:	2300      	movs	r3, #0
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	32ae      	adds	r2, #174	@ 0xae
 800fdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d101      	bne.n	800fddc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fdd8:	2303      	movs	r3, #3
 800fdda:	e01c      	b.n	800fe16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	2b03      	cmp	r3, #3
 800fde6:	d115      	bne.n	800fe14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	32ae      	adds	r2, #174	@ 0xae
 800fdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d00b      	beq.n	800fe14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	32ae      	adds	r2, #174	@ 0xae
 800fe06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe0c:	78fa      	ldrb	r2, [r7, #3]
 800fe0e:	4611      	mov	r1, r2
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fe1e:	b480      	push	{r7}
 800fe20:	b083      	sub	sp, #12
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d00e      	beq.n	800fe70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	687a      	ldr	r2, [r7, #4]
 800fe5c:	6852      	ldr	r2, [r2, #4]
 800fe5e:	b2d2      	uxtb	r2, r2
 800fe60:	4611      	mov	r1, r2
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	4798      	blx	r3
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe70:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe7a:	b480      	push	{r7}
 800fe7c:	b083      	sub	sp, #12
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
 800fe82:	460b      	mov	r3, r1
 800fe84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fe86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fea0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	370c      	adds	r7, #12
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr

0800feae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800feae:	b580      	push	{r7, lr}
 800feb0:	b086      	sub	sp, #24
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	460b      	mov	r3, r1
 800feb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fec2:	2300      	movs	r3, #0
 800fec4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	885b      	ldrh	r3, [r3, #2]
 800feca:	b29b      	uxth	r3, r3
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	7812      	ldrb	r2, [r2, #0]
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d91f      	bls.n	800ff14 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800feda:	e013      	b.n	800ff04 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fedc:	f107 030a 	add.w	r3, r7, #10
 800fee0:	4619      	mov	r1, r3
 800fee2:	6978      	ldr	r0, [r7, #20]
 800fee4:	f000 f81b 	bl	800ff1e <USBD_GetNextDesc>
 800fee8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	785b      	ldrb	r3, [r3, #1]
 800feee:	2b05      	cmp	r3, #5
 800fef0:	d108      	bne.n	800ff04 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	789b      	ldrb	r3, [r3, #2]
 800fefa:	78fa      	ldrb	r2, [r7, #3]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d008      	beq.n	800ff12 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ff00:	2300      	movs	r3, #0
 800ff02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	885b      	ldrh	r3, [r3, #2]
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	897b      	ldrh	r3, [r7, #10]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d8e5      	bhi.n	800fedc <USBD_GetEpDesc+0x2e>
 800ff10:	e000      	b.n	800ff14 <USBD_GetEpDesc+0x66>
          break;
 800ff12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ff14:	693b      	ldr	r3, [r7, #16]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ff1e:	b480      	push	{r7}
 800ff20:	b085      	sub	sp, #20
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
 800ff26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	7812      	ldrb	r2, [r2, #0]
 800ff34:	4413      	add	r3, r2
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	461a      	mov	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4413      	add	r3, r2
 800ff46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ff48:	68fb      	ldr	r3, [r7, #12]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3714      	adds	r7, #20
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ff56:	b480      	push	{r7}
 800ff58:	b087      	sub	sp, #28
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ff74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ff78:	021b      	lsls	r3, r3, #8
 800ff7a:	b21a      	sxth	r2, r3
 800ff7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff80:	4313      	orrs	r3, r2
 800ff82:	b21b      	sxth	r3, r3
 800ff84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ff86:	89fb      	ldrh	r3, [r7, #14]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	371c      	adds	r7, #28
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ffaa:	2b40      	cmp	r3, #64	@ 0x40
 800ffac:	d005      	beq.n	800ffba <USBD_StdDevReq+0x26>
 800ffae:	2b40      	cmp	r3, #64	@ 0x40
 800ffb0:	d857      	bhi.n	8010062 <USBD_StdDevReq+0xce>
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00f      	beq.n	800ffd6 <USBD_StdDevReq+0x42>
 800ffb6:	2b20      	cmp	r3, #32
 800ffb8:	d153      	bne.n	8010062 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	32ae      	adds	r2, #174	@ 0xae
 800ffc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffc8:	689b      	ldr	r3, [r3, #8]
 800ffca:	6839      	ldr	r1, [r7, #0]
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	4798      	blx	r3
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ffd4:	e04a      	b.n	801006c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	785b      	ldrb	r3, [r3, #1]
 800ffda:	2b09      	cmp	r3, #9
 800ffdc:	d83b      	bhi.n	8010056 <USBD_StdDevReq+0xc2>
 800ffde:	a201      	add	r2, pc, #4	@ (adr r2, 800ffe4 <USBD_StdDevReq+0x50>)
 800ffe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe4:	08010039 	.word	0x08010039
 800ffe8:	0801004d 	.word	0x0801004d
 800ffec:	08010057 	.word	0x08010057
 800fff0:	08010043 	.word	0x08010043
 800fff4:	08010057 	.word	0x08010057
 800fff8:	08010017 	.word	0x08010017
 800fffc:	0801000d 	.word	0x0801000d
 8010000:	08010057 	.word	0x08010057
 8010004:	0801002f 	.word	0x0801002f
 8010008:	08010021 	.word	0x08010021
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fa3c 	bl	801048c <USBD_GetDescriptor>
          break;
 8010014:	e024      	b.n	8010060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010016:	6839      	ldr	r1, [r7, #0]
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 fba1 	bl	8010760 <USBD_SetAddress>
          break;
 801001e:	e01f      	b.n	8010060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 fbe0 	bl	80107e8 <USBD_SetConfig>
 8010028:	4603      	mov	r3, r0
 801002a:	73fb      	strb	r3, [r7, #15]
          break;
 801002c:	e018      	b.n	8010060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801002e:	6839      	ldr	r1, [r7, #0]
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 fc83 	bl	801093c <USBD_GetConfig>
          break;
 8010036:	e013      	b.n	8010060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010038:	6839      	ldr	r1, [r7, #0]
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 fcb4 	bl	80109a8 <USBD_GetStatus>
          break;
 8010040:	e00e      	b.n	8010060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010042:	6839      	ldr	r1, [r7, #0]
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 fce3 	bl	8010a10 <USBD_SetFeature>
          break;
 801004a:	e009      	b.n	8010060 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801004c:	6839      	ldr	r1, [r7, #0]
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fd07 	bl	8010a62 <USBD_ClrFeature>
          break;
 8010054:	e004      	b.n	8010060 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 fd5e 	bl	8010b1a <USBD_CtlError>
          break;
 801005e:	bf00      	nop
      }
      break;
 8010060:	e004      	b.n	801006c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010062:	6839      	ldr	r1, [r7, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 fd58 	bl	8010b1a <USBD_CtlError>
      break;
 801006a:	bf00      	nop
  }

  return ret;
 801006c:	7bfb      	ldrb	r3, [r7, #15]
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop

08010078 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801008e:	2b40      	cmp	r3, #64	@ 0x40
 8010090:	d005      	beq.n	801009e <USBD_StdItfReq+0x26>
 8010092:	2b40      	cmp	r3, #64	@ 0x40
 8010094:	d852      	bhi.n	801013c <USBD_StdItfReq+0xc4>
 8010096:	2b00      	cmp	r3, #0
 8010098:	d001      	beq.n	801009e <USBD_StdItfReq+0x26>
 801009a:	2b20      	cmp	r3, #32
 801009c:	d14e      	bne.n	801013c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	3b01      	subs	r3, #1
 80100a8:	2b02      	cmp	r3, #2
 80100aa:	d840      	bhi.n	801012e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	889b      	ldrh	r3, [r3, #4]
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d836      	bhi.n	8010124 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	889b      	ldrh	r3, [r3, #4]
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	4619      	mov	r1, r3
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7ff fedb 	bl	800fe7a <USBD_CoreFindIF>
 80100c4:	4603      	mov	r3, r0
 80100c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100c8:	7bbb      	ldrb	r3, [r7, #14]
 80100ca:	2bff      	cmp	r3, #255	@ 0xff
 80100cc:	d01d      	beq.n	801010a <USBD_StdItfReq+0x92>
 80100ce:	7bbb      	ldrb	r3, [r7, #14]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d11a      	bne.n	801010a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80100d4:	7bba      	ldrb	r2, [r7, #14]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	32ae      	adds	r2, #174	@ 0xae
 80100da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d00f      	beq.n	8010104 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80100e4:	7bba      	ldrb	r2, [r7, #14]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80100ec:	7bba      	ldrb	r2, [r7, #14]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	32ae      	adds	r2, #174	@ 0xae
 80100f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f6:	689b      	ldr	r3, [r3, #8]
 80100f8:	6839      	ldr	r1, [r7, #0]
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	4798      	blx	r3
 80100fe:	4603      	mov	r3, r0
 8010100:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010102:	e004      	b.n	801010e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010104:	2303      	movs	r3, #3
 8010106:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010108:	e001      	b.n	801010e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801010a:	2303      	movs	r3, #3
 801010c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	88db      	ldrh	r3, [r3, #6]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d110      	bne.n	8010138 <USBD_StdItfReq+0xc0>
 8010116:	7bfb      	ldrb	r3, [r7, #15]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10d      	bne.n	8010138 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 fdc7 	bl	8010cb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010122:	e009      	b.n	8010138 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 fcf7 	bl	8010b1a <USBD_CtlError>
          break;
 801012c:	e004      	b.n	8010138 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801012e:	6839      	ldr	r1, [r7, #0]
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 fcf2 	bl	8010b1a <USBD_CtlError>
          break;
 8010136:	e000      	b.n	801013a <USBD_StdItfReq+0xc2>
          break;
 8010138:	bf00      	nop
      }
      break;
 801013a:	e004      	b.n	8010146 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801013c:	6839      	ldr	r1, [r7, #0]
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fceb 	bl	8010b1a <USBD_CtlError>
      break;
 8010144:	bf00      	nop
  }

  return ret;
 8010146:	7bfb      	ldrb	r3, [r7, #15]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	889b      	ldrh	r3, [r3, #4]
 8010162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801016c:	2b40      	cmp	r3, #64	@ 0x40
 801016e:	d007      	beq.n	8010180 <USBD_StdEPReq+0x30>
 8010170:	2b40      	cmp	r3, #64	@ 0x40
 8010172:	f200 817f 	bhi.w	8010474 <USBD_StdEPReq+0x324>
 8010176:	2b00      	cmp	r3, #0
 8010178:	d02a      	beq.n	80101d0 <USBD_StdEPReq+0x80>
 801017a:	2b20      	cmp	r3, #32
 801017c:	f040 817a 	bne.w	8010474 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010180:	7bbb      	ldrb	r3, [r7, #14]
 8010182:	4619      	mov	r1, r3
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7ff fe85 	bl	800fe94 <USBD_CoreFindEP>
 801018a:	4603      	mov	r3, r0
 801018c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801018e:	7b7b      	ldrb	r3, [r7, #13]
 8010190:	2bff      	cmp	r3, #255	@ 0xff
 8010192:	f000 8174 	beq.w	801047e <USBD_StdEPReq+0x32e>
 8010196:	7b7b      	ldrb	r3, [r7, #13]
 8010198:	2b00      	cmp	r3, #0
 801019a:	f040 8170 	bne.w	801047e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801019e:	7b7a      	ldrb	r2, [r7, #13]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80101a6:	7b7a      	ldrb	r2, [r7, #13]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	32ae      	adds	r2, #174	@ 0xae
 80101ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b0:	689b      	ldr	r3, [r3, #8]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f000 8163 	beq.w	801047e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80101b8:	7b7a      	ldrb	r2, [r7, #13]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	32ae      	adds	r2, #174	@ 0xae
 80101be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	6839      	ldr	r1, [r7, #0]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	4798      	blx	r3
 80101ca:	4603      	mov	r3, r0
 80101cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80101ce:	e156      	b.n	801047e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	785b      	ldrb	r3, [r3, #1]
 80101d4:	2b03      	cmp	r3, #3
 80101d6:	d008      	beq.n	80101ea <USBD_StdEPReq+0x9a>
 80101d8:	2b03      	cmp	r3, #3
 80101da:	f300 8145 	bgt.w	8010468 <USBD_StdEPReq+0x318>
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f000 809b 	beq.w	801031a <USBD_StdEPReq+0x1ca>
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d03c      	beq.n	8010262 <USBD_StdEPReq+0x112>
 80101e8:	e13e      	b.n	8010468 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d002      	beq.n	80101fc <USBD_StdEPReq+0xac>
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d016      	beq.n	8010228 <USBD_StdEPReq+0xd8>
 80101fa:	e02c      	b.n	8010256 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101fc:	7bbb      	ldrb	r3, [r7, #14]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00d      	beq.n	801021e <USBD_StdEPReq+0xce>
 8010202:	7bbb      	ldrb	r3, [r7, #14]
 8010204:	2b80      	cmp	r3, #128	@ 0x80
 8010206:	d00a      	beq.n	801021e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010208:	7bbb      	ldrb	r3, [r7, #14]
 801020a:	4619      	mov	r1, r3
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f001 f9c1 	bl	8011594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010212:	2180      	movs	r1, #128	@ 0x80
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f001 f9bd 	bl	8011594 <USBD_LL_StallEP>
 801021a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801021c:	e020      	b.n	8010260 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801021e:	6839      	ldr	r1, [r7, #0]
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fc7a 	bl	8010b1a <USBD_CtlError>
              break;
 8010226:	e01b      	b.n	8010260 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	885b      	ldrh	r3, [r3, #2]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d10e      	bne.n	801024e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010230:	7bbb      	ldrb	r3, [r7, #14]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00b      	beq.n	801024e <USBD_StdEPReq+0xfe>
 8010236:	7bbb      	ldrb	r3, [r7, #14]
 8010238:	2b80      	cmp	r3, #128	@ 0x80
 801023a:	d008      	beq.n	801024e <USBD_StdEPReq+0xfe>
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	88db      	ldrh	r3, [r3, #6]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d104      	bne.n	801024e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010244:	7bbb      	ldrb	r3, [r7, #14]
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f001 f9a3 	bl	8011594 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fd2e 	bl	8010cb0 <USBD_CtlSendStatus>

              break;
 8010254:	e004      	b.n	8010260 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 fc5e 	bl	8010b1a <USBD_CtlError>
              break;
 801025e:	bf00      	nop
          }
          break;
 8010260:	e107      	b.n	8010472 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b02      	cmp	r3, #2
 801026c:	d002      	beq.n	8010274 <USBD_StdEPReq+0x124>
 801026e:	2b03      	cmp	r3, #3
 8010270:	d016      	beq.n	80102a0 <USBD_StdEPReq+0x150>
 8010272:	e04b      	b.n	801030c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010274:	7bbb      	ldrb	r3, [r7, #14]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00d      	beq.n	8010296 <USBD_StdEPReq+0x146>
 801027a:	7bbb      	ldrb	r3, [r7, #14]
 801027c:	2b80      	cmp	r3, #128	@ 0x80
 801027e:	d00a      	beq.n	8010296 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010280:	7bbb      	ldrb	r3, [r7, #14]
 8010282:	4619      	mov	r1, r3
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f001 f985 	bl	8011594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801028a:	2180      	movs	r1, #128	@ 0x80
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f001 f981 	bl	8011594 <USBD_LL_StallEP>
 8010292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010294:	e040      	b.n	8010318 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010296:	6839      	ldr	r1, [r7, #0]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fc3e 	bl	8010b1a <USBD_CtlError>
              break;
 801029e:	e03b      	b.n	8010318 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	885b      	ldrh	r3, [r3, #2]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d136      	bne.n	8010316 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80102a8:	7bbb      	ldrb	r3, [r7, #14]
 80102aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d004      	beq.n	80102bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80102b2:	7bbb      	ldrb	r3, [r7, #14]
 80102b4:	4619      	mov	r1, r3
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f001 f98b 	bl	80115d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fcf7 	bl	8010cb0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80102c2:	7bbb      	ldrb	r3, [r7, #14]
 80102c4:	4619      	mov	r1, r3
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f7ff fde4 	bl	800fe94 <USBD_CoreFindEP>
 80102cc:	4603      	mov	r3, r0
 80102ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80102d0:	7b7b      	ldrb	r3, [r7, #13]
 80102d2:	2bff      	cmp	r3, #255	@ 0xff
 80102d4:	d01f      	beq.n	8010316 <USBD_StdEPReq+0x1c6>
 80102d6:	7b7b      	ldrb	r3, [r7, #13]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d11c      	bne.n	8010316 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80102dc:	7b7a      	ldrb	r2, [r7, #13]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80102e4:	7b7a      	ldrb	r2, [r7, #13]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	32ae      	adds	r2, #174	@ 0xae
 80102ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d010      	beq.n	8010316 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80102f4:	7b7a      	ldrb	r2, [r7, #13]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	32ae      	adds	r2, #174	@ 0xae
 80102fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	4798      	blx	r3
 8010306:	4603      	mov	r3, r0
 8010308:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801030a:	e004      	b.n	8010316 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 fc03 	bl	8010b1a <USBD_CtlError>
              break;
 8010314:	e000      	b.n	8010318 <USBD_StdEPReq+0x1c8>
              break;
 8010316:	bf00      	nop
          }
          break;
 8010318:	e0ab      	b.n	8010472 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010320:	b2db      	uxtb	r3, r3
 8010322:	2b02      	cmp	r3, #2
 8010324:	d002      	beq.n	801032c <USBD_StdEPReq+0x1dc>
 8010326:	2b03      	cmp	r3, #3
 8010328:	d032      	beq.n	8010390 <USBD_StdEPReq+0x240>
 801032a:	e097      	b.n	801045c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801032c:	7bbb      	ldrb	r3, [r7, #14]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d007      	beq.n	8010342 <USBD_StdEPReq+0x1f2>
 8010332:	7bbb      	ldrb	r3, [r7, #14]
 8010334:	2b80      	cmp	r3, #128	@ 0x80
 8010336:	d004      	beq.n	8010342 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 fbed 	bl	8010b1a <USBD_CtlError>
                break;
 8010340:	e091      	b.n	8010466 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010346:	2b00      	cmp	r3, #0
 8010348:	da0b      	bge.n	8010362 <USBD_StdEPReq+0x212>
 801034a:	7bbb      	ldrb	r3, [r7, #14]
 801034c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010350:	4613      	mov	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	4413      	add	r3, r2
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	3310      	adds	r3, #16
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	4413      	add	r3, r2
 801035e:	3304      	adds	r3, #4
 8010360:	e00b      	b.n	801037a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010362:	7bbb      	ldrb	r3, [r7, #14]
 8010364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010368:	4613      	mov	r3, r2
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	4413      	add	r3, r2
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	4413      	add	r3, r2
 8010378:	3304      	adds	r3, #4
 801037a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	2200      	movs	r2, #0
 8010380:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	2202      	movs	r2, #2
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 fc37 	bl	8010bfc <USBD_CtlSendData>
              break;
 801038e:	e06a      	b.n	8010466 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010394:	2b00      	cmp	r3, #0
 8010396:	da11      	bge.n	80103bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010398:	7bbb      	ldrb	r3, [r7, #14]
 801039a:	f003 020f 	and.w	r2, r3, #15
 801039e:	6879      	ldr	r1, [r7, #4]
 80103a0:	4613      	mov	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4413      	add	r3, r2
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	440b      	add	r3, r1
 80103aa:	3324      	adds	r3, #36	@ 0x24
 80103ac:	881b      	ldrh	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d117      	bne.n	80103e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 fbb0 	bl	8010b1a <USBD_CtlError>
                  break;
 80103ba:	e054      	b.n	8010466 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80103bc:	7bbb      	ldrb	r3, [r7, #14]
 80103be:	f003 020f 	and.w	r2, r3, #15
 80103c2:	6879      	ldr	r1, [r7, #4]
 80103c4:	4613      	mov	r3, r2
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4413      	add	r3, r2
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	440b      	add	r3, r1
 80103ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d104      	bne.n	80103e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80103d8:	6839      	ldr	r1, [r7, #0]
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 fb9d 	bl	8010b1a <USBD_CtlError>
                  break;
 80103e0:	e041      	b.n	8010466 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	da0b      	bge.n	8010402 <USBD_StdEPReq+0x2b2>
 80103ea:	7bbb      	ldrb	r3, [r7, #14]
 80103ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80103f0:	4613      	mov	r3, r2
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	3310      	adds	r3, #16
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	4413      	add	r3, r2
 80103fe:	3304      	adds	r3, #4
 8010400:	e00b      	b.n	801041a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010402:	7bbb      	ldrb	r3, [r7, #14]
 8010404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010408:	4613      	mov	r3, r2
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	4413      	add	r3, r2
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	4413      	add	r3, r2
 8010418:	3304      	adds	r3, #4
 801041a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801041c:	7bbb      	ldrb	r3, [r7, #14]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d002      	beq.n	8010428 <USBD_StdEPReq+0x2d8>
 8010422:	7bbb      	ldrb	r3, [r7, #14]
 8010424:	2b80      	cmp	r3, #128	@ 0x80
 8010426:	d103      	bne.n	8010430 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	2200      	movs	r2, #0
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	e00e      	b.n	801044e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010430:	7bbb      	ldrb	r3, [r7, #14]
 8010432:	4619      	mov	r1, r3
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f001 f8eb 	bl	8011610 <USBD_LL_IsStallEP>
 801043a:	4603      	mov	r3, r0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d003      	beq.n	8010448 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	2201      	movs	r2, #1
 8010444:	601a      	str	r2, [r3, #0]
 8010446:	e002      	b.n	801044e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	2200      	movs	r2, #0
 801044c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	2202      	movs	r2, #2
 8010452:	4619      	mov	r1, r3
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 fbd1 	bl	8010bfc <USBD_CtlSendData>
              break;
 801045a:	e004      	b.n	8010466 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801045c:	6839      	ldr	r1, [r7, #0]
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fb5b 	bl	8010b1a <USBD_CtlError>
              break;
 8010464:	bf00      	nop
          }
          break;
 8010466:	e004      	b.n	8010472 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010468:	6839      	ldr	r1, [r7, #0]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 fb55 	bl	8010b1a <USBD_CtlError>
          break;
 8010470:	bf00      	nop
      }
      break;
 8010472:	e005      	b.n	8010480 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010474:	6839      	ldr	r1, [r7, #0]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fb4f 	bl	8010b1a <USBD_CtlError>
      break;
 801047c:	e000      	b.n	8010480 <USBD_StdEPReq+0x330>
      break;
 801047e:	bf00      	nop
  }

  return ret;
 8010480:	7bfb      	ldrb	r3, [r7, #15]
}
 8010482:	4618      	mov	r0, r3
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
	...

0801048c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010496:	2300      	movs	r3, #0
 8010498:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801049a:	2300      	movs	r3, #0
 801049c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801049e:	2300      	movs	r3, #0
 80104a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	885b      	ldrh	r3, [r3, #2]
 80104a6:	0a1b      	lsrs	r3, r3, #8
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	3b01      	subs	r3, #1
 80104ac:	2b06      	cmp	r3, #6
 80104ae:	f200 8128 	bhi.w	8010702 <USBD_GetDescriptor+0x276>
 80104b2:	a201      	add	r2, pc, #4	@ (adr r2, 80104b8 <USBD_GetDescriptor+0x2c>)
 80104b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b8:	080104d5 	.word	0x080104d5
 80104bc:	080104ed 	.word	0x080104ed
 80104c0:	0801052d 	.word	0x0801052d
 80104c4:	08010703 	.word	0x08010703
 80104c8:	08010703 	.word	0x08010703
 80104cc:	080106a3 	.word	0x080106a3
 80104d0:	080106cf 	.word	0x080106cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	7c12      	ldrb	r2, [r2, #16]
 80104e0:	f107 0108 	add.w	r1, r7, #8
 80104e4:	4610      	mov	r0, r2
 80104e6:	4798      	blx	r3
 80104e8:	60f8      	str	r0, [r7, #12]
      break;
 80104ea:	e112      	b.n	8010712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	7c1b      	ldrb	r3, [r3, #16]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10d      	bne.n	8010510 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104fc:	f107 0208 	add.w	r2, r7, #8
 8010500:	4610      	mov	r0, r2
 8010502:	4798      	blx	r3
 8010504:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	3301      	adds	r3, #1
 801050a:	2202      	movs	r2, #2
 801050c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801050e:	e100      	b.n	8010712 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010518:	f107 0208 	add.w	r2, r7, #8
 801051c:	4610      	mov	r0, r2
 801051e:	4798      	blx	r3
 8010520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3301      	adds	r3, #1
 8010526:	2202      	movs	r2, #2
 8010528:	701a      	strb	r2, [r3, #0]
      break;
 801052a:	e0f2      	b.n	8010712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	885b      	ldrh	r3, [r3, #2]
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b05      	cmp	r3, #5
 8010534:	f200 80ac 	bhi.w	8010690 <USBD_GetDescriptor+0x204>
 8010538:	a201      	add	r2, pc, #4	@ (adr r2, 8010540 <USBD_GetDescriptor+0xb4>)
 801053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053e:	bf00      	nop
 8010540:	08010559 	.word	0x08010559
 8010544:	0801058d 	.word	0x0801058d
 8010548:	080105c1 	.word	0x080105c1
 801054c:	080105f5 	.word	0x080105f5
 8010550:	08010629 	.word	0x08010629
 8010554:	0801065d 	.word	0x0801065d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00b      	beq.n	801057c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	7c12      	ldrb	r2, [r2, #16]
 8010570:	f107 0108 	add.w	r1, r7, #8
 8010574:	4610      	mov	r0, r2
 8010576:	4798      	blx	r3
 8010578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801057a:	e091      	b.n	80106a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 facb 	bl	8010b1a <USBD_CtlError>
            err++;
 8010584:	7afb      	ldrb	r3, [r7, #11]
 8010586:	3301      	adds	r3, #1
 8010588:	72fb      	strb	r3, [r7, #11]
          break;
 801058a:	e089      	b.n	80106a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d00b      	beq.n	80105b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	7c12      	ldrb	r2, [r2, #16]
 80105a4:	f107 0108 	add.w	r1, r7, #8
 80105a8:	4610      	mov	r0, r2
 80105aa:	4798      	blx	r3
 80105ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105ae:	e077      	b.n	80106a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80105b0:	6839      	ldr	r1, [r7, #0]
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fab1 	bl	8010b1a <USBD_CtlError>
            err++;
 80105b8:	7afb      	ldrb	r3, [r7, #11]
 80105ba:	3301      	adds	r3, #1
 80105bc:	72fb      	strb	r3, [r7, #11]
          break;
 80105be:	e06f      	b.n	80106a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00b      	beq.n	80105e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	7c12      	ldrb	r2, [r2, #16]
 80105d8:	f107 0108 	add.w	r1, r7, #8
 80105dc:	4610      	mov	r0, r2
 80105de:	4798      	blx	r3
 80105e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105e2:	e05d      	b.n	80106a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80105e4:	6839      	ldr	r1, [r7, #0]
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 fa97 	bl	8010b1a <USBD_CtlError>
            err++;
 80105ec:	7afb      	ldrb	r3, [r7, #11]
 80105ee:	3301      	adds	r3, #1
 80105f0:	72fb      	strb	r3, [r7, #11]
          break;
 80105f2:	e055      	b.n	80106a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	7c12      	ldrb	r2, [r2, #16]
 801060c:	f107 0108 	add.w	r1, r7, #8
 8010610:	4610      	mov	r0, r2
 8010612:	4798      	blx	r3
 8010614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010616:	e043      	b.n	80106a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010618:	6839      	ldr	r1, [r7, #0]
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 fa7d 	bl	8010b1a <USBD_CtlError>
            err++;
 8010620:	7afb      	ldrb	r3, [r7, #11]
 8010622:	3301      	adds	r3, #1
 8010624:	72fb      	strb	r3, [r7, #11]
          break;
 8010626:	e03b      	b.n	80106a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801062e:	695b      	ldr	r3, [r3, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d00b      	beq.n	801064c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801063a:	695b      	ldr	r3, [r3, #20]
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	7c12      	ldrb	r2, [r2, #16]
 8010640:	f107 0108 	add.w	r1, r7, #8
 8010644:	4610      	mov	r0, r2
 8010646:	4798      	blx	r3
 8010648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801064a:	e029      	b.n	80106a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801064c:	6839      	ldr	r1, [r7, #0]
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 fa63 	bl	8010b1a <USBD_CtlError>
            err++;
 8010654:	7afb      	ldrb	r3, [r7, #11]
 8010656:	3301      	adds	r3, #1
 8010658:	72fb      	strb	r3, [r7, #11]
          break;
 801065a:	e021      	b.n	80106a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00b      	beq.n	8010680 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	7c12      	ldrb	r2, [r2, #16]
 8010674:	f107 0108 	add.w	r1, r7, #8
 8010678:	4610      	mov	r0, r2
 801067a:	4798      	blx	r3
 801067c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801067e:	e00f      	b.n	80106a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010680:	6839      	ldr	r1, [r7, #0]
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 fa49 	bl	8010b1a <USBD_CtlError>
            err++;
 8010688:	7afb      	ldrb	r3, [r7, #11]
 801068a:	3301      	adds	r3, #1
 801068c:	72fb      	strb	r3, [r7, #11]
          break;
 801068e:	e007      	b.n	80106a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010690:	6839      	ldr	r1, [r7, #0]
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fa41 	bl	8010b1a <USBD_CtlError>
          err++;
 8010698:	7afb      	ldrb	r3, [r7, #11]
 801069a:	3301      	adds	r3, #1
 801069c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801069e:	bf00      	nop
      }
      break;
 80106a0:	e037      	b.n	8010712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7c1b      	ldrb	r3, [r3, #16]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d109      	bne.n	80106be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106b2:	f107 0208 	add.w	r2, r7, #8
 80106b6:	4610      	mov	r0, r2
 80106b8:	4798      	blx	r3
 80106ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106bc:	e029      	b.n	8010712 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80106be:	6839      	ldr	r1, [r7, #0]
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f000 fa2a 	bl	8010b1a <USBD_CtlError>
        err++;
 80106c6:	7afb      	ldrb	r3, [r7, #11]
 80106c8:	3301      	adds	r3, #1
 80106ca:	72fb      	strb	r3, [r7, #11]
      break;
 80106cc:	e021      	b.n	8010712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	7c1b      	ldrb	r3, [r3, #16]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d10d      	bne.n	80106f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106de:	f107 0208 	add.w	r2, r7, #8
 80106e2:	4610      	mov	r0, r2
 80106e4:	4798      	blx	r3
 80106e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	3301      	adds	r3, #1
 80106ec:	2207      	movs	r2, #7
 80106ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106f0:	e00f      	b.n	8010712 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 fa10 	bl	8010b1a <USBD_CtlError>
        err++;
 80106fa:	7afb      	ldrb	r3, [r7, #11]
 80106fc:	3301      	adds	r3, #1
 80106fe:	72fb      	strb	r3, [r7, #11]
      break;
 8010700:	e007      	b.n	8010712 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010702:	6839      	ldr	r1, [r7, #0]
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f000 fa08 	bl	8010b1a <USBD_CtlError>
      err++;
 801070a:	7afb      	ldrb	r3, [r7, #11]
 801070c:	3301      	adds	r3, #1
 801070e:	72fb      	strb	r3, [r7, #11]
      break;
 8010710:	bf00      	nop
  }

  if (err != 0U)
 8010712:	7afb      	ldrb	r3, [r7, #11]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d11e      	bne.n	8010756 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	88db      	ldrh	r3, [r3, #6]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d016      	beq.n	801074e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010720:	893b      	ldrh	r3, [r7, #8]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00e      	beq.n	8010744 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	88da      	ldrh	r2, [r3, #6]
 801072a:	893b      	ldrh	r3, [r7, #8]
 801072c:	4293      	cmp	r3, r2
 801072e:	bf28      	it	cs
 8010730:	4613      	movcs	r3, r2
 8010732:	b29b      	uxth	r3, r3
 8010734:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010736:	893b      	ldrh	r3, [r7, #8]
 8010738:	461a      	mov	r2, r3
 801073a:	68f9      	ldr	r1, [r7, #12]
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 fa5d 	bl	8010bfc <USBD_CtlSendData>
 8010742:	e009      	b.n	8010758 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010744:	6839      	ldr	r1, [r7, #0]
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 f9e7 	bl	8010b1a <USBD_CtlError>
 801074c:	e004      	b.n	8010758 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 faae 	bl	8010cb0 <USBD_CtlSendStatus>
 8010754:	e000      	b.n	8010758 <USBD_GetDescriptor+0x2cc>
    return;
 8010756:	bf00      	nop
  }
}
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop

08010760 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	889b      	ldrh	r3, [r3, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d131      	bne.n	80107d6 <USBD_SetAddress+0x76>
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	88db      	ldrh	r3, [r3, #6]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d12d      	bne.n	80107d6 <USBD_SetAddress+0x76>
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	885b      	ldrh	r3, [r3, #2]
 801077e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010780:	d829      	bhi.n	80107d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	885b      	ldrh	r3, [r3, #2]
 8010786:	b2db      	uxtb	r3, r3
 8010788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801078c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b03      	cmp	r3, #3
 8010798:	d104      	bne.n	80107a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801079a:	6839      	ldr	r1, [r7, #0]
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 f9bc 	bl	8010b1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107a2:	e01d      	b.n	80107e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	7bfa      	ldrb	r2, [r7, #15]
 80107a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80107ac:	7bfb      	ldrb	r3, [r7, #15]
 80107ae:	4619      	mov	r1, r3
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 ff59 	bl	8011668 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 fa7a 	bl	8010cb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80107bc:	7bfb      	ldrb	r3, [r7, #15]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d004      	beq.n	80107cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2202      	movs	r2, #2
 80107c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107ca:	e009      	b.n	80107e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2201      	movs	r2, #1
 80107d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107d4:	e004      	b.n	80107e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 f99e 	bl	8010b1a <USBD_CtlError>
  }
}
 80107de:	bf00      	nop
 80107e0:	bf00      	nop
 80107e2:	3710      	adds	r7, #16
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	885b      	ldrh	r3, [r3, #2]
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	4b4e      	ldr	r3, [pc, #312]	@ (8010938 <USBD_SetConfig+0x150>)
 80107fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010800:	4b4d      	ldr	r3, [pc, #308]	@ (8010938 <USBD_SetConfig+0x150>)
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d905      	bls.n	8010814 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f985 	bl	8010b1a <USBD_CtlError>
    return USBD_FAIL;
 8010810:	2303      	movs	r3, #3
 8010812:	e08c      	b.n	801092e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801081a:	b2db      	uxtb	r3, r3
 801081c:	2b02      	cmp	r3, #2
 801081e:	d002      	beq.n	8010826 <USBD_SetConfig+0x3e>
 8010820:	2b03      	cmp	r3, #3
 8010822:	d029      	beq.n	8010878 <USBD_SetConfig+0x90>
 8010824:	e075      	b.n	8010912 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010826:	4b44      	ldr	r3, [pc, #272]	@ (8010938 <USBD_SetConfig+0x150>)
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d020      	beq.n	8010870 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801082e:	4b42      	ldr	r3, [pc, #264]	@ (8010938 <USBD_SetConfig+0x150>)
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	461a      	mov	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010838:	4b3f      	ldr	r3, [pc, #252]	@ (8010938 <USBD_SetConfig+0x150>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	4619      	mov	r1, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7fe ffe3 	bl	800f80a <USBD_SetClassConfig>
 8010844:	4603      	mov	r3, r0
 8010846:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d008      	beq.n	8010860 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801084e:	6839      	ldr	r1, [r7, #0]
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 f962 	bl	8010b1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2202      	movs	r2, #2
 801085a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801085e:	e065      	b.n	801092c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 fa25 	bl	8010cb0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2203      	movs	r2, #3
 801086a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801086e:	e05d      	b.n	801092c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 fa1d 	bl	8010cb0 <USBD_CtlSendStatus>
      break;
 8010876:	e059      	b.n	801092c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010878:	4b2f      	ldr	r3, [pc, #188]	@ (8010938 <USBD_SetConfig+0x150>)
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d112      	bne.n	80108a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2202      	movs	r2, #2
 8010884:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010888:	4b2b      	ldr	r3, [pc, #172]	@ (8010938 <USBD_SetConfig+0x150>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	461a      	mov	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010892:	4b29      	ldr	r3, [pc, #164]	@ (8010938 <USBD_SetConfig+0x150>)
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	4619      	mov	r1, r3
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7fe ffd2 	bl	800f842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 fa06 	bl	8010cb0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80108a4:	e042      	b.n	801092c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80108a6:	4b24      	ldr	r3, [pc, #144]	@ (8010938 <USBD_SetConfig+0x150>)
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	461a      	mov	r2, r3
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d02a      	beq.n	801090a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	4619      	mov	r1, r3
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7fe ffc0 	bl	800f842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80108c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010938 <USBD_SetConfig+0x150>)
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	461a      	mov	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80108cc:	4b1a      	ldr	r3, [pc, #104]	@ (8010938 <USBD_SetConfig+0x150>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7fe ff99 	bl	800f80a <USBD_SetClassConfig>
 80108d8:	4603      	mov	r3, r0
 80108da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00f      	beq.n	8010902 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 f918 	bl	8010b1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	4619      	mov	r1, r3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7fe ffa5 	bl	800f842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2202      	movs	r2, #2
 80108fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010900:	e014      	b.n	801092c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 f9d4 	bl	8010cb0 <USBD_CtlSendStatus>
      break;
 8010908:	e010      	b.n	801092c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 f9d0 	bl	8010cb0 <USBD_CtlSendStatus>
      break;
 8010910:	e00c      	b.n	801092c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f000 f900 	bl	8010b1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801091a:	4b07      	ldr	r3, [pc, #28]	@ (8010938 <USBD_SetConfig+0x150>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	4619      	mov	r1, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7fe ff8e 	bl	800f842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010926:	2303      	movs	r3, #3
 8010928:	73fb      	strb	r3, [r7, #15]
      break;
 801092a:	bf00      	nop
  }

  return ret;
 801092c:	7bfb      	ldrb	r3, [r7, #15]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	24000740 	.word	0x24000740

0801093c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	88db      	ldrh	r3, [r3, #6]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d004      	beq.n	8010958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801094e:	6839      	ldr	r1, [r7, #0]
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 f8e2 	bl	8010b1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010956:	e023      	b.n	80109a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801095e:	b2db      	uxtb	r3, r3
 8010960:	2b02      	cmp	r3, #2
 8010962:	dc02      	bgt.n	801096a <USBD_GetConfig+0x2e>
 8010964:	2b00      	cmp	r3, #0
 8010966:	dc03      	bgt.n	8010970 <USBD_GetConfig+0x34>
 8010968:	e015      	b.n	8010996 <USBD_GetConfig+0x5a>
 801096a:	2b03      	cmp	r3, #3
 801096c:	d00b      	beq.n	8010986 <USBD_GetConfig+0x4a>
 801096e:	e012      	b.n	8010996 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	3308      	adds	r3, #8
 801097a:	2201      	movs	r2, #1
 801097c:	4619      	mov	r1, r3
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 f93c 	bl	8010bfc <USBD_CtlSendData>
        break;
 8010984:	e00c      	b.n	80109a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3304      	adds	r3, #4
 801098a:	2201      	movs	r2, #1
 801098c:	4619      	mov	r1, r3
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 f934 	bl	8010bfc <USBD_CtlSendData>
        break;
 8010994:	e004      	b.n	80109a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f8be 	bl	8010b1a <USBD_CtlError>
        break;
 801099e:	bf00      	nop
}
 80109a0:	bf00      	nop
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	3b01      	subs	r3, #1
 80109bc:	2b02      	cmp	r3, #2
 80109be:	d81e      	bhi.n	80109fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	88db      	ldrh	r3, [r3, #6]
 80109c4:	2b02      	cmp	r3, #2
 80109c6:	d004      	beq.n	80109d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80109c8:	6839      	ldr	r1, [r7, #0]
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 f8a5 	bl	8010b1a <USBD_CtlError>
        break;
 80109d0:	e01a      	b.n	8010a08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2201      	movs	r2, #1
 80109d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d005      	beq.n	80109ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	f043 0202 	orr.w	r2, r3, #2
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	330c      	adds	r3, #12
 80109f2:	2202      	movs	r2, #2
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f900 	bl	8010bfc <USBD_CtlSendData>
      break;
 80109fc:	e004      	b.n	8010a08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80109fe:	6839      	ldr	r1, [r7, #0]
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 f88a 	bl	8010b1a <USBD_CtlError>
      break;
 8010a06:	bf00      	nop
  }
}
 8010a08:	bf00      	nop
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	885b      	ldrh	r3, [r3, #2]
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d107      	bne.n	8010a32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f940 	bl	8010cb0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010a30:	e013      	b.n	8010a5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	885b      	ldrh	r3, [r3, #2]
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d10b      	bne.n	8010a52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	889b      	ldrh	r3, [r3, #4]
 8010a3e:	0a1b      	lsrs	r3, r3, #8
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	b2da      	uxtb	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 f930 	bl	8010cb0 <USBD_CtlSendStatus>
}
 8010a50:	e003      	b.n	8010a5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 f860 	bl	8010b1a <USBD_CtlError>
}
 8010a5a:	bf00      	nop
 8010a5c:	3708      	adds	r7, #8
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b082      	sub	sp, #8
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	3b01      	subs	r3, #1
 8010a76:	2b02      	cmp	r3, #2
 8010a78:	d80b      	bhi.n	8010a92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	885b      	ldrh	r3, [r3, #2]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d10c      	bne.n	8010a9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 f910 	bl	8010cb0 <USBD_CtlSendStatus>
      }
      break;
 8010a90:	e004      	b.n	8010a9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010a92:	6839      	ldr	r1, [r7, #0]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 f840 	bl	8010b1a <USBD_CtlError>
      break;
 8010a9a:	e000      	b.n	8010a9e <USBD_ClrFeature+0x3c>
      break;
 8010a9c:	bf00      	nop
  }
}
 8010a9e:	bf00      	nop
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}

08010aa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b084      	sub	sp, #16
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	6078      	str	r0, [r7, #4]
 8010aae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	781a      	ldrb	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	781a      	ldrb	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	3301      	adds	r3, #1
 8010ace:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7ff fa40 	bl	800ff56 <SWAPBYTE>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	461a      	mov	r2, r3
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f7ff fa33 	bl	800ff56 <SWAPBYTE>
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	3301      	adds	r3, #1
 8010afc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3301      	adds	r3, #1
 8010b02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f7ff fa26 	bl	800ff56 <SWAPBYTE>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	80da      	strh	r2, [r3, #6]
}
 8010b12:	bf00      	nop
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b082      	sub	sp, #8
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
 8010b22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b24:	2180      	movs	r1, #128	@ 0x80
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 fd34 	bl	8011594 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fd30 	bl	8011594 <USBD_LL_StallEP>
}
 8010b34:	bf00      	nop
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d036      	beq.n	8010bc0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010b56:	6938      	ldr	r0, [r7, #16]
 8010b58:	f000 f836 	bl	8010bc8 <USBD_GetLen>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	3301      	adds	r3, #1
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	4413      	add	r3, r2
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	7812      	ldrb	r2, [r2, #0]
 8010b74:	701a      	strb	r2, [r3, #0]
  idx++;
 8010b76:	7dfb      	ldrb	r3, [r7, #23]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010b7c:	7dfb      	ldrb	r3, [r7, #23]
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	4413      	add	r3, r2
 8010b82:	2203      	movs	r2, #3
 8010b84:	701a      	strb	r2, [r3, #0]
  idx++;
 8010b86:	7dfb      	ldrb	r3, [r7, #23]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010b8c:	e013      	b.n	8010bb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	4413      	add	r3, r2
 8010b94:	693a      	ldr	r2, [r7, #16]
 8010b96:	7812      	ldrb	r2, [r2, #0]
 8010b98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	613b      	str	r3, [r7, #16]
    idx++;
 8010ba0:	7dfb      	ldrb	r3, [r7, #23]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	4413      	add	r3, r2
 8010bac:	2200      	movs	r2, #0
 8010bae:	701a      	strb	r2, [r3, #0]
    idx++;
 8010bb0:	7dfb      	ldrb	r3, [r7, #23]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1e7      	bne.n	8010b8e <USBD_GetString+0x52>
 8010bbe:	e000      	b.n	8010bc2 <USBD_GetString+0x86>
    return;
 8010bc0:	bf00      	nop
  }
}
 8010bc2:	3718      	adds	r7, #24
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010bd8:	e005      	b.n	8010be6 <USBD_GetLen+0x1e>
  {
    len++;
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
 8010bdc:	3301      	adds	r3, #1
 8010bde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	3301      	adds	r3, #1
 8010be4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1f5      	bne.n	8010bda <USBD_GetLen+0x12>
  }

  return len;
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3714      	adds	r7, #20
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr

08010bfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2202      	movs	r2, #2
 8010c0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	2100      	movs	r1, #0
 8010c22:	68f8      	ldr	r0, [r7, #12]
 8010c24:	f000 fd3f 	bl	80116a6 <USBD_LL_Transmit>

  return USBD_OK;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3710      	adds	r7, #16
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b084      	sub	sp, #16
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	60f8      	str	r0, [r7, #12]
 8010c3a:	60b9      	str	r1, [r7, #8]
 8010c3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	68ba      	ldr	r2, [r7, #8]
 8010c42:	2100      	movs	r1, #0
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f000 fd2e 	bl	80116a6 <USBD_LL_Transmit>

  return USBD_OK;
 8010c4a:	2300      	movs	r3, #0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2203      	movs	r2, #3
 8010c64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	68ba      	ldr	r2, [r7, #8]
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f000 fd32 	bl	80116e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b084      	sub	sp, #16
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	60b9      	str	r1, [r7, #8]
 8010c98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	68ba      	ldr	r2, [r7, #8]
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f000 fd21 	bl	80116e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ca6:	2300      	movs	r3, #0
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2204      	movs	r2, #4
 8010cbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 fced 	bl	80116a6 <USBD_LL_Transmit>

  return USBD_OK;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3708      	adds	r7, #8
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b082      	sub	sp, #8
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2205      	movs	r2, #5
 8010ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	2200      	movs	r2, #0
 8010cea:	2100      	movs	r1, #0
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 fcfb 	bl	80116e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010d00:	2200      	movs	r2, #0
 8010d02:	4913      	ldr	r1, [pc, #76]	@ (8010d50 <MX_USB_DEVICE_Init+0x54>)
 8010d04:	4813      	ldr	r0, [pc, #76]	@ (8010d54 <MX_USB_DEVICE_Init+0x58>)
 8010d06:	f7fe fd03 	bl	800f710 <USBD_Init>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010d10:	f7f6 fac6 	bl	80072a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010d14:	4910      	ldr	r1, [pc, #64]	@ (8010d58 <MX_USB_DEVICE_Init+0x5c>)
 8010d16:	480f      	ldr	r0, [pc, #60]	@ (8010d54 <MX_USB_DEVICE_Init+0x58>)
 8010d18:	f7fe fd2a 	bl	800f770 <USBD_RegisterClass>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d001      	beq.n	8010d26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010d22:	f7f6 fabd 	bl	80072a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010d26:	490d      	ldr	r1, [pc, #52]	@ (8010d5c <MX_USB_DEVICE_Init+0x60>)
 8010d28:	480a      	ldr	r0, [pc, #40]	@ (8010d54 <MX_USB_DEVICE_Init+0x58>)
 8010d2a:	f7fe fc21 	bl	800f570 <USBD_CDC_RegisterInterface>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d001      	beq.n	8010d38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010d34:	f7f6 fab4 	bl	80072a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010d38:	4806      	ldr	r0, [pc, #24]	@ (8010d54 <MX_USB_DEVICE_Init+0x58>)
 8010d3a:	f7fe fd4f 	bl	800f7dc <USBD_Start>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d001      	beq.n	8010d48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010d44:	f7f6 faac 	bl	80072a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010d48:	f7f9 fe6e 	bl	800aa28 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010d4c:	bf00      	nop
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	24000480 	.word	0x24000480
 8010d54:	24000744 	.word	0x24000744
 8010d58:	240003ec 	.word	0x240003ec
 8010d5c:	2400046c 	.word	0x2400046c

08010d60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010d64:	2200      	movs	r2, #0
 8010d66:	4905      	ldr	r1, [pc, #20]	@ (8010d7c <CDC_Init_FS+0x1c>)
 8010d68:	4805      	ldr	r0, [pc, #20]	@ (8010d80 <CDC_Init_FS+0x20>)
 8010d6a:	f7fe fc1b 	bl	800f5a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010d6e:	4905      	ldr	r1, [pc, #20]	@ (8010d84 <CDC_Init_FS+0x24>)
 8010d70:	4803      	ldr	r0, [pc, #12]	@ (8010d80 <CDC_Init_FS+0x20>)
 8010d72:	f7fe fc39 	bl	800f5e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010d76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	24001220 	.word	0x24001220
 8010d80:	24000744 	.word	0x24000744
 8010d84:	24000a20 	.word	0x24000a20

08010d88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010d8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	4603      	mov	r3, r0
 8010da0:	6039      	str	r1, [r7, #0]
 8010da2:	71fb      	strb	r3, [r7, #7]
 8010da4:	4613      	mov	r3, r2
 8010da6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010da8:	79fb      	ldrb	r3, [r7, #7]
 8010daa:	2b23      	cmp	r3, #35	@ 0x23
 8010dac:	d84a      	bhi.n	8010e44 <CDC_Control_FS+0xac>
 8010dae:	a201      	add	r2, pc, #4	@ (adr r2, 8010db4 <CDC_Control_FS+0x1c>)
 8010db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db4:	08010e45 	.word	0x08010e45
 8010db8:	08010e45 	.word	0x08010e45
 8010dbc:	08010e45 	.word	0x08010e45
 8010dc0:	08010e45 	.word	0x08010e45
 8010dc4:	08010e45 	.word	0x08010e45
 8010dc8:	08010e45 	.word	0x08010e45
 8010dcc:	08010e45 	.word	0x08010e45
 8010dd0:	08010e45 	.word	0x08010e45
 8010dd4:	08010e45 	.word	0x08010e45
 8010dd8:	08010e45 	.word	0x08010e45
 8010ddc:	08010e45 	.word	0x08010e45
 8010de0:	08010e45 	.word	0x08010e45
 8010de4:	08010e45 	.word	0x08010e45
 8010de8:	08010e45 	.word	0x08010e45
 8010dec:	08010e45 	.word	0x08010e45
 8010df0:	08010e45 	.word	0x08010e45
 8010df4:	08010e45 	.word	0x08010e45
 8010df8:	08010e45 	.word	0x08010e45
 8010dfc:	08010e45 	.word	0x08010e45
 8010e00:	08010e45 	.word	0x08010e45
 8010e04:	08010e45 	.word	0x08010e45
 8010e08:	08010e45 	.word	0x08010e45
 8010e0c:	08010e45 	.word	0x08010e45
 8010e10:	08010e45 	.word	0x08010e45
 8010e14:	08010e45 	.word	0x08010e45
 8010e18:	08010e45 	.word	0x08010e45
 8010e1c:	08010e45 	.word	0x08010e45
 8010e20:	08010e45 	.word	0x08010e45
 8010e24:	08010e45 	.word	0x08010e45
 8010e28:	08010e45 	.word	0x08010e45
 8010e2c:	08010e45 	.word	0x08010e45
 8010e30:	08010e45 	.word	0x08010e45
 8010e34:	08010e45 	.word	0x08010e45
 8010e38:	08010e45 	.word	0x08010e45
 8010e3c:	08010e45 	.word	0x08010e45
 8010e40:	08010e45 	.word	0x08010e45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010e44:	bf00      	nop
  }

  return (USBD_OK);
 8010e46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010e5e:	6879      	ldr	r1, [r7, #4]
 8010e60:	4819      	ldr	r0, [pc, #100]	@ (8010ec8 <CDC_Receive_FS+0x74>)
 8010e62:	f7fe fbc1 	bl	800f5e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010e66:	4818      	ldr	r0, [pc, #96]	@ (8010ec8 <CDC_Receive_FS+0x74>)
 8010e68:	f7fe fc1c 	bl	800f6a4 <USBD_CDC_ReceivePacket>

//  memset(usb_buffer, '\0', 100);
  usb_len = (uint8_t)* Len;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b16      	ldr	r3, [pc, #88]	@ (8010ecc <CDC_Receive_FS+0x78>)
 8010e74:	701a      	strb	r2, [r3, #0]
  memcpy(usb_buffer, Buf, usb_len);
 8010e76:	4b15      	ldr	r3, [pc, #84]	@ (8010ecc <CDC_Receive_FS+0x78>)
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	6879      	ldr	r1, [r7, #4]
 8010e7e:	4814      	ldr	r0, [pc, #80]	@ (8010ed0 <CDC_Receive_FS+0x7c>)
 8010e80:	f001 f9f7 	bl	8012272 <memcpy>
  if(usb_buffer[usb_len-1] == '\n')
 8010e84:	4b11      	ldr	r3, [pc, #68]	@ (8010ecc <CDC_Receive_FS+0x78>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	3b01      	subs	r3, #1
 8010e8a:	4a11      	ldr	r2, [pc, #68]	@ (8010ed0 <CDC_Receive_FS+0x7c>)
 8010e8c:	5cd3      	ldrb	r3, [r2, r3]
 8010e8e:	2b0a      	cmp	r3, #10
 8010e90:	d108      	bne.n	8010ea4 <CDC_Receive_FS+0x50>
  {
	  usb_flag = 1;
 8010e92:	4b10      	ldr	r3, [pc, #64]	@ (8010ed4 <CDC_Receive_FS+0x80>)
 8010e94:	2201      	movs	r2, #1
 8010e96:	701a      	strb	r2, [r3, #0]
	  usb_buffer[usb_len] = '\0';
 8010e98:	4b0c      	ldr	r3, [pc, #48]	@ (8010ecc <CDC_Receive_FS+0x78>)
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8010ed0 <CDC_Receive_FS+0x7c>)
 8010ea0:	2100      	movs	r1, #0
 8010ea2:	5499      	strb	r1, [r3, r2]
  }
  if(usb_flag)
 8010ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8010ed4 <CDC_Receive_FS+0x80>)
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d008      	beq.n	8010ebe <CDC_Receive_FS+0x6a>
  {
	cli_command_excute(usb_buffer, usb_len);
 8010eac:	4b07      	ldr	r3, [pc, #28]	@ (8010ecc <CDC_Receive_FS+0x78>)
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	4807      	ldr	r0, [pc, #28]	@ (8010ed0 <CDC_Receive_FS+0x7c>)
 8010eb4:	f7f0 f8a8 	bl	8001008 <cli_command_excute>
	usb_flag = 0;
 8010eb8:	4b06      	ldr	r3, [pc, #24]	@ (8010ed4 <CDC_Receive_FS+0x80>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	701a      	strb	r2, [r3, #0]
  }
//  memset(Buf, '\0', 100);

  return (USBD_OK);
 8010ebe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	24000744 	.word	0x24000744
 8010ecc:	24000734 	.word	0x24000734
 8010ed0:	240006d0 	.word	0x240006d0
 8010ed4:	24000735 	.word	0x24000735

08010ed8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8010f20 <CDC_Transmit_FS+0x48>)
 8010eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010eee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010efa:	2301      	movs	r3, #1
 8010efc:	e00b      	b.n	8010f16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010efe:	887b      	ldrh	r3, [r7, #2]
 8010f00:	461a      	mov	r2, r3
 8010f02:	6879      	ldr	r1, [r7, #4]
 8010f04:	4806      	ldr	r0, [pc, #24]	@ (8010f20 <CDC_Transmit_FS+0x48>)
 8010f06:	f7fe fb4d 	bl	800f5a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010f0a:	4805      	ldr	r0, [pc, #20]	@ (8010f20 <CDC_Transmit_FS+0x48>)
 8010f0c:	f7fe fb8a 	bl	800f624 <USBD_CDC_TransmitPacket>
 8010f10:	4603      	mov	r3, r0
 8010f12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	24000744 	.word	0x24000744

08010f24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b087      	sub	sp, #28
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	4613      	mov	r3, r2
 8010f30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010f32:	2300      	movs	r3, #0
 8010f34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	371c      	adds	r7, #28
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
	...

08010f48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	4603      	mov	r3, r0
 8010f50:	6039      	str	r1, [r7, #0]
 8010f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	2212      	movs	r2, #18
 8010f58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010f5a:	4b03      	ldr	r3, [pc, #12]	@ (8010f68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr
 8010f68:	2400049c 	.word	0x2400049c

08010f6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	4603      	mov	r3, r0
 8010f74:	6039      	str	r1, [r7, #0]
 8010f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	2204      	movs	r2, #4
 8010f7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010f7e:	4b03      	ldr	r3, [pc, #12]	@ (8010f8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr
 8010f8c:	240004b0 	.word	0x240004b0

08010f90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	4603      	mov	r3, r0
 8010f98:	6039      	str	r1, [r7, #0]
 8010f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010f9c:	79fb      	ldrb	r3, [r7, #7]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d105      	bne.n	8010fae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fa2:	683a      	ldr	r2, [r7, #0]
 8010fa4:	4907      	ldr	r1, [pc, #28]	@ (8010fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010fa6:	4808      	ldr	r0, [pc, #32]	@ (8010fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fa8:	f7ff fdc8 	bl	8010b3c <USBD_GetString>
 8010fac:	e004      	b.n	8010fb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fae:	683a      	ldr	r2, [r7, #0]
 8010fb0:	4904      	ldr	r1, [pc, #16]	@ (8010fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010fb2:	4805      	ldr	r0, [pc, #20]	@ (8010fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fb4:	f7ff fdc2 	bl	8010b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fb8:	4b02      	ldr	r3, [pc, #8]	@ (8010fc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	24001a20 	.word	0x24001a20
 8010fc8:	0801313c 	.word	0x0801313c

08010fcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	6039      	str	r1, [r7, #0]
 8010fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	4904      	ldr	r1, [pc, #16]	@ (8010fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010fdc:	4804      	ldr	r0, [pc, #16]	@ (8010ff0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010fde:	f7ff fdad 	bl	8010b3c <USBD_GetString>
  return USBD_StrDesc;
 8010fe2:	4b02      	ldr	r3, [pc, #8]	@ (8010fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	24001a20 	.word	0x24001a20
 8010ff0:	08013150 	.word	0x08013150

08010ff4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	6039      	str	r1, [r7, #0]
 8010ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	221a      	movs	r2, #26
 8011004:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011006:	f000 f843 	bl	8011090 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801100a:	4b02      	ldr	r3, [pc, #8]	@ (8011014 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801100c:	4618      	mov	r0, r3
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	240004b4 	.word	0x240004b4

08011018 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	4603      	mov	r3, r0
 8011020:	6039      	str	r1, [r7, #0]
 8011022:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011024:	79fb      	ldrb	r3, [r7, #7]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d105      	bne.n	8011036 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801102a:	683a      	ldr	r2, [r7, #0]
 801102c:	4907      	ldr	r1, [pc, #28]	@ (801104c <USBD_FS_ConfigStrDescriptor+0x34>)
 801102e:	4808      	ldr	r0, [pc, #32]	@ (8011050 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011030:	f7ff fd84 	bl	8010b3c <USBD_GetString>
 8011034:	e004      	b.n	8011040 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011036:	683a      	ldr	r2, [r7, #0]
 8011038:	4904      	ldr	r1, [pc, #16]	@ (801104c <USBD_FS_ConfigStrDescriptor+0x34>)
 801103a:	4805      	ldr	r0, [pc, #20]	@ (8011050 <USBD_FS_ConfigStrDescriptor+0x38>)
 801103c:	f7ff fd7e 	bl	8010b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011040:	4b02      	ldr	r3, [pc, #8]	@ (801104c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011042:	4618      	mov	r0, r3
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	24001a20 	.word	0x24001a20
 8011050:	08013164 	.word	0x08013164

08011054 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	4603      	mov	r3, r0
 801105c:	6039      	str	r1, [r7, #0]
 801105e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011060:	79fb      	ldrb	r3, [r7, #7]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d105      	bne.n	8011072 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011066:	683a      	ldr	r2, [r7, #0]
 8011068:	4907      	ldr	r1, [pc, #28]	@ (8011088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801106a:	4808      	ldr	r0, [pc, #32]	@ (801108c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801106c:	f7ff fd66 	bl	8010b3c <USBD_GetString>
 8011070:	e004      	b.n	801107c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011072:	683a      	ldr	r2, [r7, #0]
 8011074:	4904      	ldr	r1, [pc, #16]	@ (8011088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011076:	4805      	ldr	r0, [pc, #20]	@ (801108c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011078:	f7ff fd60 	bl	8010b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801107c:	4b02      	ldr	r3, [pc, #8]	@ (8011088 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801107e:	4618      	mov	r0, r3
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	24001a20 	.word	0x24001a20
 801108c:	08013170 	.word	0x08013170

08011090 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011096:	4b0f      	ldr	r3, [pc, #60]	@ (80110d4 <Get_SerialNum+0x44>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801109c:	4b0e      	ldr	r3, [pc, #56]	@ (80110d8 <Get_SerialNum+0x48>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80110a2:	4b0e      	ldr	r3, [pc, #56]	@ (80110dc <Get_SerialNum+0x4c>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4413      	add	r3, r2
 80110ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d009      	beq.n	80110ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80110b6:	2208      	movs	r2, #8
 80110b8:	4909      	ldr	r1, [pc, #36]	@ (80110e0 <Get_SerialNum+0x50>)
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f000 f814 	bl	80110e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80110c0:	2204      	movs	r2, #4
 80110c2:	4908      	ldr	r1, [pc, #32]	@ (80110e4 <Get_SerialNum+0x54>)
 80110c4:	68b8      	ldr	r0, [r7, #8]
 80110c6:	f000 f80f 	bl	80110e8 <IntToUnicode>
  }
}
 80110ca:	bf00      	nop
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	1ff1e800 	.word	0x1ff1e800
 80110d8:	1ff1e804 	.word	0x1ff1e804
 80110dc:	1ff1e808 	.word	0x1ff1e808
 80110e0:	240004b6 	.word	0x240004b6
 80110e4:	240004c6 	.word	0x240004c6

080110e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b087      	sub	sp, #28
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	4613      	mov	r3, r2
 80110f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80110fa:	2300      	movs	r3, #0
 80110fc:	75fb      	strb	r3, [r7, #23]
 80110fe:	e027      	b.n	8011150 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	0f1b      	lsrs	r3, r3, #28
 8011104:	2b09      	cmp	r3, #9
 8011106:	d80b      	bhi.n	8011120 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	0f1b      	lsrs	r3, r3, #28
 801110c:	b2da      	uxtb	r2, r3
 801110e:	7dfb      	ldrb	r3, [r7, #23]
 8011110:	005b      	lsls	r3, r3, #1
 8011112:	4619      	mov	r1, r3
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	440b      	add	r3, r1
 8011118:	3230      	adds	r2, #48	@ 0x30
 801111a:	b2d2      	uxtb	r2, r2
 801111c:	701a      	strb	r2, [r3, #0]
 801111e:	e00a      	b.n	8011136 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	0f1b      	lsrs	r3, r3, #28
 8011124:	b2da      	uxtb	r2, r3
 8011126:	7dfb      	ldrb	r3, [r7, #23]
 8011128:	005b      	lsls	r3, r3, #1
 801112a:	4619      	mov	r1, r3
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	440b      	add	r3, r1
 8011130:	3237      	adds	r2, #55	@ 0x37
 8011132:	b2d2      	uxtb	r2, r2
 8011134:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	011b      	lsls	r3, r3, #4
 801113a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801113c:	7dfb      	ldrb	r3, [r7, #23]
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	3301      	adds	r3, #1
 8011142:	68ba      	ldr	r2, [r7, #8]
 8011144:	4413      	add	r3, r2
 8011146:	2200      	movs	r2, #0
 8011148:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801114a:	7dfb      	ldrb	r3, [r7, #23]
 801114c:	3301      	adds	r3, #1
 801114e:	75fb      	strb	r3, [r7, #23]
 8011150:	7dfa      	ldrb	r2, [r7, #23]
 8011152:	79fb      	ldrb	r3, [r7, #7]
 8011154:	429a      	cmp	r2, r3
 8011156:	d3d3      	bcc.n	8011100 <IntToUnicode+0x18>
  }
}
 8011158:	bf00      	nop
 801115a:	bf00      	nop
 801115c:	371c      	adds	r7, #28
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
	...

08011168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b0ba      	sub	sp, #232	@ 0xe8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011170:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011174:	2200      	movs	r2, #0
 8011176:	601a      	str	r2, [r3, #0]
 8011178:	605a      	str	r2, [r3, #4]
 801117a:	609a      	str	r2, [r3, #8]
 801117c:	60da      	str	r2, [r3, #12]
 801117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011180:	f107 0310 	add.w	r3, r7, #16
 8011184:	22c0      	movs	r2, #192	@ 0xc0
 8011186:	2100      	movs	r1, #0
 8011188:	4618      	mov	r0, r3
 801118a:	f000 ff8b 	bl	80120a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	4a2c      	ldr	r2, [pc, #176]	@ (8011244 <HAL_PCD_MspInit+0xdc>)
 8011194:	4293      	cmp	r3, r2
 8011196:	d151      	bne.n	801123c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011198:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801119c:	f04f 0300 	mov.w	r3, #0
 80111a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80111a4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80111a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80111ac:	f107 0310 	add.w	r3, r7, #16
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fa fc03 	bl	800b9bc <HAL_RCCEx_PeriphCLKConfig>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d001      	beq.n	80111c0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80111bc:	f7f6 f870 	bl	80072a0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80111c0:	f7f9 fc32 	bl	800aa28 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111c4:	4b20      	ldr	r3, [pc, #128]	@ (8011248 <HAL_PCD_MspInit+0xe0>)
 80111c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80111ca:	4a1f      	ldr	r2, [pc, #124]	@ (8011248 <HAL_PCD_MspInit+0xe0>)
 80111cc:	f043 0301 	orr.w	r3, r3, #1
 80111d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80111d4:	4b1c      	ldr	r3, [pc, #112]	@ (8011248 <HAL_PCD_MspInit+0xe0>)
 80111d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80111da:	f003 0301 	and.w	r3, r3, #1
 80111de:	60fb      	str	r3, [r7, #12]
 80111e0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80111e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80111e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111ea:	2302      	movs	r3, #2
 80111ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111f0:	2300      	movs	r3, #0
 80111f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111f6:	2300      	movs	r3, #0
 80111f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80111fc:	230a      	movs	r3, #10
 80111fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011202:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011206:	4619      	mov	r1, r3
 8011208:	4810      	ldr	r0, [pc, #64]	@ (801124c <HAL_PCD_MspInit+0xe4>)
 801120a:	f7f7 ff51 	bl	80090b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801120e:	4b0e      	ldr	r3, [pc, #56]	@ (8011248 <HAL_PCD_MspInit+0xe0>)
 8011210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011214:	4a0c      	ldr	r2, [pc, #48]	@ (8011248 <HAL_PCD_MspInit+0xe0>)
 8011216:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801121a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801121e:	4b0a      	ldr	r3, [pc, #40]	@ (8011248 <HAL_PCD_MspInit+0xe0>)
 8011220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011228:	60bb      	str	r3, [r7, #8]
 801122a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801122c:	2200      	movs	r2, #0
 801122e:	2100      	movs	r1, #0
 8011230:	2065      	movs	r0, #101	@ 0x65
 8011232:	f7f6 fc9e 	bl	8007b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011236:	2065      	movs	r0, #101	@ 0x65
 8011238:	f7f6 fcb5 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801123c:	bf00      	nop
 801123e:	37e8      	adds	r7, #232	@ 0xe8
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	40080000 	.word	0x40080000
 8011248:	58024400 	.word	0x58024400
 801124c:	58020000 	.word	0x58020000

08011250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011264:	4619      	mov	r1, r3
 8011266:	4610      	mov	r0, r2
 8011268:	f7fe fb05 	bl	800f876 <USBD_LL_SetupStage>
}
 801126c:	bf00      	nop
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
 801127c:	460b      	mov	r3, r1
 801127e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011286:	78fa      	ldrb	r2, [r7, #3]
 8011288:	6879      	ldr	r1, [r7, #4]
 801128a:	4613      	mov	r3, r2
 801128c:	00db      	lsls	r3, r3, #3
 801128e:	4413      	add	r3, r2
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	440b      	add	r3, r1
 8011294:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	78fb      	ldrb	r3, [r7, #3]
 801129c:	4619      	mov	r1, r3
 801129e:	f7fe fb3f 	bl	800f920 <USBD_LL_DataOutStage>
}
 80112a2:	bf00      	nop
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}

080112aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112aa:	b580      	push	{r7, lr}
 80112ac:	b082      	sub	sp, #8
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	6078      	str	r0, [r7, #4]
 80112b2:	460b      	mov	r3, r1
 80112b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80112bc:	78fa      	ldrb	r2, [r7, #3]
 80112be:	6879      	ldr	r1, [r7, #4]
 80112c0:	4613      	mov	r3, r2
 80112c2:	00db      	lsls	r3, r3, #3
 80112c4:	4413      	add	r3, r2
 80112c6:	009b      	lsls	r3, r3, #2
 80112c8:	440b      	add	r3, r1
 80112ca:	3348      	adds	r3, #72	@ 0x48
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	78fb      	ldrb	r3, [r7, #3]
 80112d0:	4619      	mov	r1, r3
 80112d2:	f7fe fbd8 	bl	800fa86 <USBD_LL_DataInStage>
}
 80112d6:	bf00      	nop
 80112d8:	3708      	adds	r7, #8
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b082      	sub	sp, #8
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fe fd12 	bl	800fd16 <USBD_LL_SOF>
}
 80112f2:	bf00      	nop
 80112f4:	3708      	adds	r7, #8
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}

080112fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112fa:	b580      	push	{r7, lr}
 80112fc:	b084      	sub	sp, #16
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011302:	2301      	movs	r3, #1
 8011304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d102      	bne.n	8011314 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801130e:	2300      	movs	r3, #0
 8011310:	73fb      	strb	r3, [r7, #15]
 8011312:	e008      	b.n	8011326 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	691b      	ldr	r3, [r3, #16]
 8011318:	2b02      	cmp	r3, #2
 801131a:	d102      	bne.n	8011322 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801131c:	2301      	movs	r3, #1
 801131e:	73fb      	strb	r3, [r7, #15]
 8011320:	e001      	b.n	8011326 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011322:	f7f5 ffbd 	bl	80072a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801132c:	7bfa      	ldrb	r2, [r7, #15]
 801132e:	4611      	mov	r1, r2
 8011330:	4618      	mov	r0, r3
 8011332:	f7fe fcac 	bl	800fc8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801133c:	4618      	mov	r0, r3
 801133e:	f7fe fc54 	bl	800fbea <USBD_LL_Reset>
}
 8011342:	bf00      	nop
 8011344:	3710      	adds	r7, #16
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
	...

0801134c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b082      	sub	sp, #8
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801135a:	4618      	mov	r0, r3
 801135c:	f7fe fca7 	bl	800fcae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	6812      	ldr	r2, [r2, #0]
 801136e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011372:	f043 0301 	orr.w	r3, r3, #1
 8011376:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6a1b      	ldr	r3, [r3, #32]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d005      	beq.n	801138c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011380:	4b04      	ldr	r3, [pc, #16]	@ (8011394 <HAL_PCD_SuspendCallback+0x48>)
 8011382:	691b      	ldr	r3, [r3, #16]
 8011384:	4a03      	ldr	r2, [pc, #12]	@ (8011394 <HAL_PCD_SuspendCallback+0x48>)
 8011386:	f043 0306 	orr.w	r3, r3, #6
 801138a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801138c:	bf00      	nop
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	e000ed00 	.word	0xe000ed00

08011398 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fe fc9d 	bl	800fce6 <USBD_LL_Resume>
}
 80113ac:	bf00      	nop
 80113ae:	3708      	adds	r7, #8
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	460b      	mov	r3, r1
 80113be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80113c6:	78fa      	ldrb	r2, [r7, #3]
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fe fcf5 	bl	800fdba <USBD_LL_IsoOUTIncomplete>
}
 80113d0:	bf00      	nop
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	460b      	mov	r3, r1
 80113e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80113ea:	78fa      	ldrb	r2, [r7, #3]
 80113ec:	4611      	mov	r1, r2
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe fcb1 	bl	800fd56 <USBD_LL_IsoINIncomplete>
}
 80113f4:	bf00      	nop
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801140a:	4618      	mov	r0, r3
 801140c:	f7fe fd07 	bl	800fe1e <USBD_LL_DevConnected>
}
 8011410:	bf00      	nop
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011426:	4618      	mov	r0, r3
 8011428:	f7fe fd04 	bl	800fe34 <USBD_LL_DevDisconnected>
}
 801142c:	bf00      	nop
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d13e      	bne.n	80114c2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011444:	4a21      	ldr	r2, [pc, #132]	@ (80114cc <USBD_LL_Init+0x98>)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4a1f      	ldr	r2, [pc, #124]	@ (80114cc <USBD_LL_Init+0x98>)
 8011450:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011454:	4b1d      	ldr	r3, [pc, #116]	@ (80114cc <USBD_LL_Init+0x98>)
 8011456:	4a1e      	ldr	r2, [pc, #120]	@ (80114d0 <USBD_LL_Init+0x9c>)
 8011458:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801145a:	4b1c      	ldr	r3, [pc, #112]	@ (80114cc <USBD_LL_Init+0x98>)
 801145c:	2209      	movs	r2, #9
 801145e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011460:	4b1a      	ldr	r3, [pc, #104]	@ (80114cc <USBD_LL_Init+0x98>)
 8011462:	2202      	movs	r2, #2
 8011464:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011466:	4b19      	ldr	r3, [pc, #100]	@ (80114cc <USBD_LL_Init+0x98>)
 8011468:	2200      	movs	r2, #0
 801146a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801146c:	4b17      	ldr	r3, [pc, #92]	@ (80114cc <USBD_LL_Init+0x98>)
 801146e:	2202      	movs	r2, #2
 8011470:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011472:	4b16      	ldr	r3, [pc, #88]	@ (80114cc <USBD_LL_Init+0x98>)
 8011474:	2200      	movs	r2, #0
 8011476:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011478:	4b14      	ldr	r3, [pc, #80]	@ (80114cc <USBD_LL_Init+0x98>)
 801147a:	2200      	movs	r2, #0
 801147c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801147e:	4b13      	ldr	r3, [pc, #76]	@ (80114cc <USBD_LL_Init+0x98>)
 8011480:	2200      	movs	r2, #0
 8011482:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011484:	4b11      	ldr	r3, [pc, #68]	@ (80114cc <USBD_LL_Init+0x98>)
 8011486:	2200      	movs	r2, #0
 8011488:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801148a:	4b10      	ldr	r3, [pc, #64]	@ (80114cc <USBD_LL_Init+0x98>)
 801148c:	2200      	movs	r2, #0
 801148e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011490:	4b0e      	ldr	r3, [pc, #56]	@ (80114cc <USBD_LL_Init+0x98>)
 8011492:	2200      	movs	r2, #0
 8011494:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011496:	480d      	ldr	r0, [pc, #52]	@ (80114cc <USBD_LL_Init+0x98>)
 8011498:	f7f7 ffd3 	bl	8009442 <HAL_PCD_Init>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80114a2:	f7f5 fefd 	bl	80072a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80114a6:	2180      	movs	r1, #128	@ 0x80
 80114a8:	4808      	ldr	r0, [pc, #32]	@ (80114cc <USBD_LL_Init+0x98>)
 80114aa:	f7f9 fa42 	bl	800a932 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80114ae:	2240      	movs	r2, #64	@ 0x40
 80114b0:	2100      	movs	r1, #0
 80114b2:	4806      	ldr	r0, [pc, #24]	@ (80114cc <USBD_LL_Init+0x98>)
 80114b4:	f7f9 f9f6 	bl	800a8a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80114b8:	2280      	movs	r2, #128	@ 0x80
 80114ba:	2101      	movs	r1, #1
 80114bc:	4803      	ldr	r0, [pc, #12]	@ (80114cc <USBD_LL_Init+0x98>)
 80114be:	f7f9 f9f1 	bl	800a8a4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80114c2:	2300      	movs	r3, #0
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3708      	adds	r7, #8
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	24001c20 	.word	0x24001c20
 80114d0:	40080000 	.word	0x40080000

080114d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114dc:	2300      	movs	r3, #0
 80114de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7f8 f8cd 	bl	800968a <HAL_PCD_Start>
 80114f0:	4603      	mov	r3, r0
 80114f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114f4:	7bfb      	ldrb	r3, [r7, #15]
 80114f6:	4618      	mov	r0, r3
 80114f8:	f000 f942 	bl	8011780 <USBD_Get_USB_Status>
 80114fc:	4603      	mov	r3, r0
 80114fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011500:	7bbb      	ldrb	r3, [r7, #14]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b084      	sub	sp, #16
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
 8011512:	4608      	mov	r0, r1
 8011514:	4611      	mov	r1, r2
 8011516:	461a      	mov	r2, r3
 8011518:	4603      	mov	r3, r0
 801151a:	70fb      	strb	r3, [r7, #3]
 801151c:	460b      	mov	r3, r1
 801151e:	70bb      	strb	r3, [r7, #2]
 8011520:	4613      	mov	r3, r2
 8011522:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011528:	2300      	movs	r3, #0
 801152a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011532:	78bb      	ldrb	r3, [r7, #2]
 8011534:	883a      	ldrh	r2, [r7, #0]
 8011536:	78f9      	ldrb	r1, [r7, #3]
 8011538:	f7f8 fdcd 	bl	800a0d6 <HAL_PCD_EP_Open>
 801153c:	4603      	mov	r3, r0
 801153e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011540:	7bfb      	ldrb	r3, [r7, #15]
 8011542:	4618      	mov	r0, r3
 8011544:	f000 f91c 	bl	8011780 <USBD_Get_USB_Status>
 8011548:	4603      	mov	r3, r0
 801154a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801154c:	7bbb      	ldrb	r3, [r7, #14]
}
 801154e:	4618      	mov	r0, r3
 8011550:	3710      	adds	r7, #16
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011556:	b580      	push	{r7, lr}
 8011558:	b084      	sub	sp, #16
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
 801155e:	460b      	mov	r3, r1
 8011560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011562:	2300      	movs	r3, #0
 8011564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011566:	2300      	movs	r3, #0
 8011568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011570:	78fa      	ldrb	r2, [r7, #3]
 8011572:	4611      	mov	r1, r2
 8011574:	4618      	mov	r0, r3
 8011576:	f7f8 fe16 	bl	800a1a6 <HAL_PCD_EP_Close>
 801157a:	4603      	mov	r3, r0
 801157c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801157e:	7bfb      	ldrb	r3, [r7, #15]
 8011580:	4618      	mov	r0, r3
 8011582:	f000 f8fd 	bl	8011780 <USBD_Get_USB_Status>
 8011586:	4603      	mov	r3, r0
 8011588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801158a:	7bbb      	ldrb	r3, [r7, #14]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3710      	adds	r7, #16
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115a0:	2300      	movs	r3, #0
 80115a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115a4:	2300      	movs	r3, #0
 80115a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80115ae:	78fa      	ldrb	r2, [r7, #3]
 80115b0:	4611      	mov	r1, r2
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7f8 fed0 	bl	800a358 <HAL_PCD_EP_SetStall>
 80115b8:	4603      	mov	r3, r0
 80115ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
 80115be:	4618      	mov	r0, r3
 80115c0:	f000 f8de 	bl	8011780 <USBD_Get_USB_Status>
 80115c4:	4603      	mov	r3, r0
 80115c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3710      	adds	r7, #16
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}

080115d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b084      	sub	sp, #16
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
 80115da:	460b      	mov	r3, r1
 80115dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115de:	2300      	movs	r3, #0
 80115e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115e2:	2300      	movs	r3, #0
 80115e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80115ec:	78fa      	ldrb	r2, [r7, #3]
 80115ee:	4611      	mov	r1, r2
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7f8 ff15 	bl	800a420 <HAL_PCD_EP_ClrStall>
 80115f6:	4603      	mov	r3, r0
 80115f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f000 f8bf 	bl	8011780 <USBD_Get_USB_Status>
 8011602:	4603      	mov	r3, r0
 8011604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011606:	7bbb      	ldrb	r3, [r7, #14]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3710      	adds	r7, #16
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011610:	b480      	push	{r7}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	460b      	mov	r3, r1
 801161a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011622:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011628:	2b00      	cmp	r3, #0
 801162a:	da0b      	bge.n	8011644 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801162c:	78fb      	ldrb	r3, [r7, #3]
 801162e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011632:	68f9      	ldr	r1, [r7, #12]
 8011634:	4613      	mov	r3, r2
 8011636:	00db      	lsls	r3, r3, #3
 8011638:	4413      	add	r3, r2
 801163a:	009b      	lsls	r3, r3, #2
 801163c:	440b      	add	r3, r1
 801163e:	333e      	adds	r3, #62	@ 0x3e
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	e00b      	b.n	801165c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011644:	78fb      	ldrb	r3, [r7, #3]
 8011646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801164a:	68f9      	ldr	r1, [r7, #12]
 801164c:	4613      	mov	r3, r2
 801164e:	00db      	lsls	r3, r3, #3
 8011650:	4413      	add	r3, r2
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	440b      	add	r3, r1
 8011656:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801165a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801165c:	4618      	mov	r0, r3
 801165e:	3714      	adds	r7, #20
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	460b      	mov	r3, r1
 8011672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011678:	2300      	movs	r3, #0
 801167a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011682:	78fa      	ldrb	r2, [r7, #3]
 8011684:	4611      	mov	r1, r2
 8011686:	4618      	mov	r0, r3
 8011688:	f7f8 fd00 	bl	800a08c <HAL_PCD_SetAddress>
 801168c:	4603      	mov	r3, r0
 801168e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011690:	7bfb      	ldrb	r3, [r7, #15]
 8011692:	4618      	mov	r0, r3
 8011694:	f000 f874 	bl	8011780 <USBD_Get_USB_Status>
 8011698:	4603      	mov	r3, r0
 801169a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801169c:	7bbb      	ldrb	r3, [r7, #14]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b086      	sub	sp, #24
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	60f8      	str	r0, [r7, #12]
 80116ae:	607a      	str	r2, [r7, #4]
 80116b0:	603b      	str	r3, [r7, #0]
 80116b2:	460b      	mov	r3, r1
 80116b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116b6:	2300      	movs	r3, #0
 80116b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116ba:	2300      	movs	r3, #0
 80116bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80116c4:	7af9      	ldrb	r1, [r7, #11]
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	f7f8 fe0a 	bl	800a2e2 <HAL_PCD_EP_Transmit>
 80116ce:	4603      	mov	r3, r0
 80116d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116d2:	7dfb      	ldrb	r3, [r7, #23]
 80116d4:	4618      	mov	r0, r3
 80116d6:	f000 f853 	bl	8011780 <USBD_Get_USB_Status>
 80116da:	4603      	mov	r3, r0
 80116dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116de:	7dbb      	ldrb	r3, [r7, #22]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3718      	adds	r7, #24
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b086      	sub	sp, #24
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	607a      	str	r2, [r7, #4]
 80116f2:	603b      	str	r3, [r7, #0]
 80116f4:	460b      	mov	r3, r1
 80116f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116f8:	2300      	movs	r3, #0
 80116fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116fc:	2300      	movs	r3, #0
 80116fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011706:	7af9      	ldrb	r1, [r7, #11]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	f7f8 fd95 	bl	800a23a <HAL_PCD_EP_Receive>
 8011710:	4603      	mov	r3, r0
 8011712:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011714:	7dfb      	ldrb	r3, [r7, #23]
 8011716:	4618      	mov	r0, r3
 8011718:	f000 f832 	bl	8011780 <USBD_Get_USB_Status>
 801171c:	4603      	mov	r3, r0
 801171e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011720:	7dbb      	ldrb	r3, [r7, #22]
}
 8011722:	4618      	mov	r0, r3
 8011724:	3718      	adds	r7, #24
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}

0801172a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801172a:	b580      	push	{r7, lr}
 801172c:	b082      	sub	sp, #8
 801172e:	af00      	add	r7, sp, #0
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	460b      	mov	r3, r1
 8011734:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801173c:	78fa      	ldrb	r2, [r7, #3]
 801173e:	4611      	mov	r1, r2
 8011740:	4618      	mov	r0, r3
 8011742:	f7f8 fdb6 	bl	800a2b2 <HAL_PCD_EP_GetRxCount>
 8011746:	4603      	mov	r3, r0
}
 8011748:	4618      	mov	r0, r3
 801174a:	3708      	adds	r7, #8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011758:	4b03      	ldr	r3, [pc, #12]	@ (8011768 <USBD_static_malloc+0x18>)
}
 801175a:	4618      	mov	r0, r3
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	2400212c 	.word	0x2400212c

0801176c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801176c:	b480      	push	{r7}
 801176e:	b083      	sub	sp, #12
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011774:	bf00      	nop
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	4603      	mov	r3, r0
 8011788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801178a:	2300      	movs	r3, #0
 801178c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801178e:	79fb      	ldrb	r3, [r7, #7]
 8011790:	2b03      	cmp	r3, #3
 8011792:	d817      	bhi.n	80117c4 <USBD_Get_USB_Status+0x44>
 8011794:	a201      	add	r2, pc, #4	@ (adr r2, 801179c <USBD_Get_USB_Status+0x1c>)
 8011796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801179a:	bf00      	nop
 801179c:	080117ad 	.word	0x080117ad
 80117a0:	080117b3 	.word	0x080117b3
 80117a4:	080117b9 	.word	0x080117b9
 80117a8:	080117bf 	.word	0x080117bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80117ac:	2300      	movs	r3, #0
 80117ae:	73fb      	strb	r3, [r7, #15]
    break;
 80117b0:	e00b      	b.n	80117ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80117b2:	2303      	movs	r3, #3
 80117b4:	73fb      	strb	r3, [r7, #15]
    break;
 80117b6:	e008      	b.n	80117ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80117b8:	2301      	movs	r3, #1
 80117ba:	73fb      	strb	r3, [r7, #15]
    break;
 80117bc:	e005      	b.n	80117ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80117be:	2303      	movs	r3, #3
 80117c0:	73fb      	strb	r3, [r7, #15]
    break;
 80117c2:	e002      	b.n	80117ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80117c4:	2303      	movs	r3, #3
 80117c6:	73fb      	strb	r3, [r7, #15]
    break;
 80117c8:	bf00      	nop
  }
  return usb_status;
 80117ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3714      	adds	r7, #20
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <atoi>:
 80117d8:	220a      	movs	r2, #10
 80117da:	2100      	movs	r1, #0
 80117dc:	f000 b954 	b.w	8011a88 <strtol>

080117e0 <calloc>:
 80117e0:	4b02      	ldr	r3, [pc, #8]	@ (80117ec <calloc+0xc>)
 80117e2:	460a      	mov	r2, r1
 80117e4:	4601      	mov	r1, r0
 80117e6:	6818      	ldr	r0, [r3, #0]
 80117e8:	f000 b802 	b.w	80117f0 <_calloc_r>
 80117ec:	240004dc 	.word	0x240004dc

080117f0 <_calloc_r>:
 80117f0:	b570      	push	{r4, r5, r6, lr}
 80117f2:	fba1 5402 	umull	r5, r4, r1, r2
 80117f6:	b934      	cbnz	r4, 8011806 <_calloc_r+0x16>
 80117f8:	4629      	mov	r1, r5
 80117fa:	f000 f83f 	bl	801187c <_malloc_r>
 80117fe:	4606      	mov	r6, r0
 8011800:	b928      	cbnz	r0, 801180e <_calloc_r+0x1e>
 8011802:	4630      	mov	r0, r6
 8011804:	bd70      	pop	{r4, r5, r6, pc}
 8011806:	220c      	movs	r2, #12
 8011808:	6002      	str	r2, [r0, #0]
 801180a:	2600      	movs	r6, #0
 801180c:	e7f9      	b.n	8011802 <_calloc_r+0x12>
 801180e:	462a      	mov	r2, r5
 8011810:	4621      	mov	r1, r4
 8011812:	f000 fc47 	bl	80120a4 <memset>
 8011816:	e7f4      	b.n	8011802 <_calloc_r+0x12>

08011818 <malloc>:
 8011818:	4b02      	ldr	r3, [pc, #8]	@ (8011824 <malloc+0xc>)
 801181a:	4601      	mov	r1, r0
 801181c:	6818      	ldr	r0, [r3, #0]
 801181e:	f000 b82d 	b.w	801187c <_malloc_r>
 8011822:	bf00      	nop
 8011824:	240004dc 	.word	0x240004dc

08011828 <free>:
 8011828:	4b02      	ldr	r3, [pc, #8]	@ (8011834 <free+0xc>)
 801182a:	4601      	mov	r1, r0
 801182c:	6818      	ldr	r0, [r3, #0]
 801182e:	f000 bd4d 	b.w	80122cc <_free_r>
 8011832:	bf00      	nop
 8011834:	240004dc 	.word	0x240004dc

08011838 <sbrk_aligned>:
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	4e0f      	ldr	r6, [pc, #60]	@ (8011878 <sbrk_aligned+0x40>)
 801183c:	460c      	mov	r4, r1
 801183e:	6831      	ldr	r1, [r6, #0]
 8011840:	4605      	mov	r5, r0
 8011842:	b911      	cbnz	r1, 801184a <sbrk_aligned+0x12>
 8011844:	f000 fcc6 	bl	80121d4 <_sbrk_r>
 8011848:	6030      	str	r0, [r6, #0]
 801184a:	4621      	mov	r1, r4
 801184c:	4628      	mov	r0, r5
 801184e:	f000 fcc1 	bl	80121d4 <_sbrk_r>
 8011852:	1c43      	adds	r3, r0, #1
 8011854:	d103      	bne.n	801185e <sbrk_aligned+0x26>
 8011856:	f04f 34ff 	mov.w	r4, #4294967295
 801185a:	4620      	mov	r0, r4
 801185c:	bd70      	pop	{r4, r5, r6, pc}
 801185e:	1cc4      	adds	r4, r0, #3
 8011860:	f024 0403 	bic.w	r4, r4, #3
 8011864:	42a0      	cmp	r0, r4
 8011866:	d0f8      	beq.n	801185a <sbrk_aligned+0x22>
 8011868:	1a21      	subs	r1, r4, r0
 801186a:	4628      	mov	r0, r5
 801186c:	f000 fcb2 	bl	80121d4 <_sbrk_r>
 8011870:	3001      	adds	r0, #1
 8011872:	d1f2      	bne.n	801185a <sbrk_aligned+0x22>
 8011874:	e7ef      	b.n	8011856 <sbrk_aligned+0x1e>
 8011876:	bf00      	nop
 8011878:	2400234c 	.word	0x2400234c

0801187c <_malloc_r>:
 801187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011880:	1ccd      	adds	r5, r1, #3
 8011882:	f025 0503 	bic.w	r5, r5, #3
 8011886:	3508      	adds	r5, #8
 8011888:	2d0c      	cmp	r5, #12
 801188a:	bf38      	it	cc
 801188c:	250c      	movcc	r5, #12
 801188e:	2d00      	cmp	r5, #0
 8011890:	4606      	mov	r6, r0
 8011892:	db01      	blt.n	8011898 <_malloc_r+0x1c>
 8011894:	42a9      	cmp	r1, r5
 8011896:	d904      	bls.n	80118a2 <_malloc_r+0x26>
 8011898:	230c      	movs	r3, #12
 801189a:	6033      	str	r3, [r6, #0]
 801189c:	2000      	movs	r0, #0
 801189e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011978 <_malloc_r+0xfc>
 80118a6:	f000 f869 	bl	801197c <__malloc_lock>
 80118aa:	f8d8 3000 	ldr.w	r3, [r8]
 80118ae:	461c      	mov	r4, r3
 80118b0:	bb44      	cbnz	r4, 8011904 <_malloc_r+0x88>
 80118b2:	4629      	mov	r1, r5
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff ffbf 	bl	8011838 <sbrk_aligned>
 80118ba:	1c43      	adds	r3, r0, #1
 80118bc:	4604      	mov	r4, r0
 80118be:	d158      	bne.n	8011972 <_malloc_r+0xf6>
 80118c0:	f8d8 4000 	ldr.w	r4, [r8]
 80118c4:	4627      	mov	r7, r4
 80118c6:	2f00      	cmp	r7, #0
 80118c8:	d143      	bne.n	8011952 <_malloc_r+0xd6>
 80118ca:	2c00      	cmp	r4, #0
 80118cc:	d04b      	beq.n	8011966 <_malloc_r+0xea>
 80118ce:	6823      	ldr	r3, [r4, #0]
 80118d0:	4639      	mov	r1, r7
 80118d2:	4630      	mov	r0, r6
 80118d4:	eb04 0903 	add.w	r9, r4, r3
 80118d8:	f000 fc7c 	bl	80121d4 <_sbrk_r>
 80118dc:	4581      	cmp	r9, r0
 80118de:	d142      	bne.n	8011966 <_malloc_r+0xea>
 80118e0:	6821      	ldr	r1, [r4, #0]
 80118e2:	1a6d      	subs	r5, r5, r1
 80118e4:	4629      	mov	r1, r5
 80118e6:	4630      	mov	r0, r6
 80118e8:	f7ff ffa6 	bl	8011838 <sbrk_aligned>
 80118ec:	3001      	adds	r0, #1
 80118ee:	d03a      	beq.n	8011966 <_malloc_r+0xea>
 80118f0:	6823      	ldr	r3, [r4, #0]
 80118f2:	442b      	add	r3, r5
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	f8d8 3000 	ldr.w	r3, [r8]
 80118fa:	685a      	ldr	r2, [r3, #4]
 80118fc:	bb62      	cbnz	r2, 8011958 <_malloc_r+0xdc>
 80118fe:	f8c8 7000 	str.w	r7, [r8]
 8011902:	e00f      	b.n	8011924 <_malloc_r+0xa8>
 8011904:	6822      	ldr	r2, [r4, #0]
 8011906:	1b52      	subs	r2, r2, r5
 8011908:	d420      	bmi.n	801194c <_malloc_r+0xd0>
 801190a:	2a0b      	cmp	r2, #11
 801190c:	d917      	bls.n	801193e <_malloc_r+0xc2>
 801190e:	1961      	adds	r1, r4, r5
 8011910:	42a3      	cmp	r3, r4
 8011912:	6025      	str	r5, [r4, #0]
 8011914:	bf18      	it	ne
 8011916:	6059      	strne	r1, [r3, #4]
 8011918:	6863      	ldr	r3, [r4, #4]
 801191a:	bf08      	it	eq
 801191c:	f8c8 1000 	streq.w	r1, [r8]
 8011920:	5162      	str	r2, [r4, r5]
 8011922:	604b      	str	r3, [r1, #4]
 8011924:	4630      	mov	r0, r6
 8011926:	f000 f82f 	bl	8011988 <__malloc_unlock>
 801192a:	f104 000b 	add.w	r0, r4, #11
 801192e:	1d23      	adds	r3, r4, #4
 8011930:	f020 0007 	bic.w	r0, r0, #7
 8011934:	1ac2      	subs	r2, r0, r3
 8011936:	bf1c      	itt	ne
 8011938:	1a1b      	subne	r3, r3, r0
 801193a:	50a3      	strne	r3, [r4, r2]
 801193c:	e7af      	b.n	801189e <_malloc_r+0x22>
 801193e:	6862      	ldr	r2, [r4, #4]
 8011940:	42a3      	cmp	r3, r4
 8011942:	bf0c      	ite	eq
 8011944:	f8c8 2000 	streq.w	r2, [r8]
 8011948:	605a      	strne	r2, [r3, #4]
 801194a:	e7eb      	b.n	8011924 <_malloc_r+0xa8>
 801194c:	4623      	mov	r3, r4
 801194e:	6864      	ldr	r4, [r4, #4]
 8011950:	e7ae      	b.n	80118b0 <_malloc_r+0x34>
 8011952:	463c      	mov	r4, r7
 8011954:	687f      	ldr	r7, [r7, #4]
 8011956:	e7b6      	b.n	80118c6 <_malloc_r+0x4a>
 8011958:	461a      	mov	r2, r3
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	42a3      	cmp	r3, r4
 801195e:	d1fb      	bne.n	8011958 <_malloc_r+0xdc>
 8011960:	2300      	movs	r3, #0
 8011962:	6053      	str	r3, [r2, #4]
 8011964:	e7de      	b.n	8011924 <_malloc_r+0xa8>
 8011966:	230c      	movs	r3, #12
 8011968:	6033      	str	r3, [r6, #0]
 801196a:	4630      	mov	r0, r6
 801196c:	f000 f80c 	bl	8011988 <__malloc_unlock>
 8011970:	e794      	b.n	801189c <_malloc_r+0x20>
 8011972:	6005      	str	r5, [r0, #0]
 8011974:	e7d6      	b.n	8011924 <_malloc_r+0xa8>
 8011976:	bf00      	nop
 8011978:	24002350 	.word	0x24002350

0801197c <__malloc_lock>:
 801197c:	4801      	ldr	r0, [pc, #4]	@ (8011984 <__malloc_lock+0x8>)
 801197e:	f000 bc76 	b.w	801226e <__retarget_lock_acquire_recursive>
 8011982:	bf00      	nop
 8011984:	24002494 	.word	0x24002494

08011988 <__malloc_unlock>:
 8011988:	4801      	ldr	r0, [pc, #4]	@ (8011990 <__malloc_unlock+0x8>)
 801198a:	f000 bc71 	b.w	8012270 <__retarget_lock_release_recursive>
 801198e:	bf00      	nop
 8011990:	24002494 	.word	0x24002494

08011994 <_strtol_l.isra.0>:
 8011994:	2b24      	cmp	r3, #36	@ 0x24
 8011996:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801199a:	4686      	mov	lr, r0
 801199c:	4690      	mov	r8, r2
 801199e:	d801      	bhi.n	80119a4 <_strtol_l.isra.0+0x10>
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d106      	bne.n	80119b2 <_strtol_l.isra.0+0x1e>
 80119a4:	f000 fc38 	bl	8012218 <__errno>
 80119a8:	2316      	movs	r3, #22
 80119aa:	6003      	str	r3, [r0, #0]
 80119ac:	2000      	movs	r0, #0
 80119ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119b2:	4834      	ldr	r0, [pc, #208]	@ (8011a84 <_strtol_l.isra.0+0xf0>)
 80119b4:	460d      	mov	r5, r1
 80119b6:	462a      	mov	r2, r5
 80119b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119bc:	5d06      	ldrb	r6, [r0, r4]
 80119be:	f016 0608 	ands.w	r6, r6, #8
 80119c2:	d1f8      	bne.n	80119b6 <_strtol_l.isra.0+0x22>
 80119c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80119c6:	d110      	bne.n	80119ea <_strtol_l.isra.0+0x56>
 80119c8:	782c      	ldrb	r4, [r5, #0]
 80119ca:	2601      	movs	r6, #1
 80119cc:	1c95      	adds	r5, r2, #2
 80119ce:	f033 0210 	bics.w	r2, r3, #16
 80119d2:	d115      	bne.n	8011a00 <_strtol_l.isra.0+0x6c>
 80119d4:	2c30      	cmp	r4, #48	@ 0x30
 80119d6:	d10d      	bne.n	80119f4 <_strtol_l.isra.0+0x60>
 80119d8:	782a      	ldrb	r2, [r5, #0]
 80119da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80119de:	2a58      	cmp	r2, #88	@ 0x58
 80119e0:	d108      	bne.n	80119f4 <_strtol_l.isra.0+0x60>
 80119e2:	786c      	ldrb	r4, [r5, #1]
 80119e4:	3502      	adds	r5, #2
 80119e6:	2310      	movs	r3, #16
 80119e8:	e00a      	b.n	8011a00 <_strtol_l.isra.0+0x6c>
 80119ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80119ec:	bf04      	itt	eq
 80119ee:	782c      	ldrbeq	r4, [r5, #0]
 80119f0:	1c95      	addeq	r5, r2, #2
 80119f2:	e7ec      	b.n	80119ce <_strtol_l.isra.0+0x3a>
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1f6      	bne.n	80119e6 <_strtol_l.isra.0+0x52>
 80119f8:	2c30      	cmp	r4, #48	@ 0x30
 80119fa:	bf14      	ite	ne
 80119fc:	230a      	movne	r3, #10
 80119fe:	2308      	moveq	r3, #8
 8011a00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011a04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011a08:	2200      	movs	r2, #0
 8011a0a:	fbbc f9f3 	udiv	r9, ip, r3
 8011a0e:	4610      	mov	r0, r2
 8011a10:	fb03 ca19 	mls	sl, r3, r9, ip
 8011a14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011a18:	2f09      	cmp	r7, #9
 8011a1a:	d80f      	bhi.n	8011a3c <_strtol_l.isra.0+0xa8>
 8011a1c:	463c      	mov	r4, r7
 8011a1e:	42a3      	cmp	r3, r4
 8011a20:	dd1b      	ble.n	8011a5a <_strtol_l.isra.0+0xc6>
 8011a22:	1c57      	adds	r7, r2, #1
 8011a24:	d007      	beq.n	8011a36 <_strtol_l.isra.0+0xa2>
 8011a26:	4581      	cmp	r9, r0
 8011a28:	d314      	bcc.n	8011a54 <_strtol_l.isra.0+0xc0>
 8011a2a:	d101      	bne.n	8011a30 <_strtol_l.isra.0+0x9c>
 8011a2c:	45a2      	cmp	sl, r4
 8011a2e:	db11      	blt.n	8011a54 <_strtol_l.isra.0+0xc0>
 8011a30:	fb00 4003 	mla	r0, r0, r3, r4
 8011a34:	2201      	movs	r2, #1
 8011a36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a3a:	e7eb      	b.n	8011a14 <_strtol_l.isra.0+0x80>
 8011a3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011a40:	2f19      	cmp	r7, #25
 8011a42:	d801      	bhi.n	8011a48 <_strtol_l.isra.0+0xb4>
 8011a44:	3c37      	subs	r4, #55	@ 0x37
 8011a46:	e7ea      	b.n	8011a1e <_strtol_l.isra.0+0x8a>
 8011a48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011a4c:	2f19      	cmp	r7, #25
 8011a4e:	d804      	bhi.n	8011a5a <_strtol_l.isra.0+0xc6>
 8011a50:	3c57      	subs	r4, #87	@ 0x57
 8011a52:	e7e4      	b.n	8011a1e <_strtol_l.isra.0+0x8a>
 8011a54:	f04f 32ff 	mov.w	r2, #4294967295
 8011a58:	e7ed      	b.n	8011a36 <_strtol_l.isra.0+0xa2>
 8011a5a:	1c53      	adds	r3, r2, #1
 8011a5c:	d108      	bne.n	8011a70 <_strtol_l.isra.0+0xdc>
 8011a5e:	2322      	movs	r3, #34	@ 0x22
 8011a60:	f8ce 3000 	str.w	r3, [lr]
 8011a64:	4660      	mov	r0, ip
 8011a66:	f1b8 0f00 	cmp.w	r8, #0
 8011a6a:	d0a0      	beq.n	80119ae <_strtol_l.isra.0+0x1a>
 8011a6c:	1e69      	subs	r1, r5, #1
 8011a6e:	e006      	b.n	8011a7e <_strtol_l.isra.0+0xea>
 8011a70:	b106      	cbz	r6, 8011a74 <_strtol_l.isra.0+0xe0>
 8011a72:	4240      	negs	r0, r0
 8011a74:	f1b8 0f00 	cmp.w	r8, #0
 8011a78:	d099      	beq.n	80119ae <_strtol_l.isra.0+0x1a>
 8011a7a:	2a00      	cmp	r2, #0
 8011a7c:	d1f6      	bne.n	8011a6c <_strtol_l.isra.0+0xd8>
 8011a7e:	f8c8 1000 	str.w	r1, [r8]
 8011a82:	e794      	b.n	80119ae <_strtol_l.isra.0+0x1a>
 8011a84:	08013881 	.word	0x08013881

08011a88 <strtol>:
 8011a88:	4613      	mov	r3, r2
 8011a8a:	460a      	mov	r2, r1
 8011a8c:	4601      	mov	r1, r0
 8011a8e:	4802      	ldr	r0, [pc, #8]	@ (8011a98 <strtol+0x10>)
 8011a90:	6800      	ldr	r0, [r0, #0]
 8011a92:	f7ff bf7f 	b.w	8011994 <_strtol_l.isra.0>
 8011a96:	bf00      	nop
 8011a98:	240004dc 	.word	0x240004dc

08011a9c <__sflush_r>:
 8011a9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa4:	0716      	lsls	r6, r2, #28
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	460c      	mov	r4, r1
 8011aaa:	d454      	bmi.n	8011b56 <__sflush_r+0xba>
 8011aac:	684b      	ldr	r3, [r1, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	dc02      	bgt.n	8011ab8 <__sflush_r+0x1c>
 8011ab2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	dd48      	ble.n	8011b4a <__sflush_r+0xae>
 8011ab8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011aba:	2e00      	cmp	r6, #0
 8011abc:	d045      	beq.n	8011b4a <__sflush_r+0xae>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011ac4:	682f      	ldr	r7, [r5, #0]
 8011ac6:	6a21      	ldr	r1, [r4, #32]
 8011ac8:	602b      	str	r3, [r5, #0]
 8011aca:	d030      	beq.n	8011b2e <__sflush_r+0x92>
 8011acc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011ace:	89a3      	ldrh	r3, [r4, #12]
 8011ad0:	0759      	lsls	r1, r3, #29
 8011ad2:	d505      	bpl.n	8011ae0 <__sflush_r+0x44>
 8011ad4:	6863      	ldr	r3, [r4, #4]
 8011ad6:	1ad2      	subs	r2, r2, r3
 8011ad8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ada:	b10b      	cbz	r3, 8011ae0 <__sflush_r+0x44>
 8011adc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ade:	1ad2      	subs	r2, r2, r3
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ae4:	6a21      	ldr	r1, [r4, #32]
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	47b0      	blx	r6
 8011aea:	1c43      	adds	r3, r0, #1
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	d106      	bne.n	8011afe <__sflush_r+0x62>
 8011af0:	6829      	ldr	r1, [r5, #0]
 8011af2:	291d      	cmp	r1, #29
 8011af4:	d82b      	bhi.n	8011b4e <__sflush_r+0xb2>
 8011af6:	4a2a      	ldr	r2, [pc, #168]	@ (8011ba0 <__sflush_r+0x104>)
 8011af8:	40ca      	lsrs	r2, r1
 8011afa:	07d6      	lsls	r6, r2, #31
 8011afc:	d527      	bpl.n	8011b4e <__sflush_r+0xb2>
 8011afe:	2200      	movs	r2, #0
 8011b00:	6062      	str	r2, [r4, #4]
 8011b02:	04d9      	lsls	r1, r3, #19
 8011b04:	6922      	ldr	r2, [r4, #16]
 8011b06:	6022      	str	r2, [r4, #0]
 8011b08:	d504      	bpl.n	8011b14 <__sflush_r+0x78>
 8011b0a:	1c42      	adds	r2, r0, #1
 8011b0c:	d101      	bne.n	8011b12 <__sflush_r+0x76>
 8011b0e:	682b      	ldr	r3, [r5, #0]
 8011b10:	b903      	cbnz	r3, 8011b14 <__sflush_r+0x78>
 8011b12:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b16:	602f      	str	r7, [r5, #0]
 8011b18:	b1b9      	cbz	r1, 8011b4a <__sflush_r+0xae>
 8011b1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b1e:	4299      	cmp	r1, r3
 8011b20:	d002      	beq.n	8011b28 <__sflush_r+0x8c>
 8011b22:	4628      	mov	r0, r5
 8011b24:	f000 fbd2 	bl	80122cc <_free_r>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b2c:	e00d      	b.n	8011b4a <__sflush_r+0xae>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	4628      	mov	r0, r5
 8011b32:	47b0      	blx	r6
 8011b34:	4602      	mov	r2, r0
 8011b36:	1c50      	adds	r0, r2, #1
 8011b38:	d1c9      	bne.n	8011ace <__sflush_r+0x32>
 8011b3a:	682b      	ldr	r3, [r5, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d0c6      	beq.n	8011ace <__sflush_r+0x32>
 8011b40:	2b1d      	cmp	r3, #29
 8011b42:	d001      	beq.n	8011b48 <__sflush_r+0xac>
 8011b44:	2b16      	cmp	r3, #22
 8011b46:	d11e      	bne.n	8011b86 <__sflush_r+0xea>
 8011b48:	602f      	str	r7, [r5, #0]
 8011b4a:	2000      	movs	r0, #0
 8011b4c:	e022      	b.n	8011b94 <__sflush_r+0xf8>
 8011b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b52:	b21b      	sxth	r3, r3
 8011b54:	e01b      	b.n	8011b8e <__sflush_r+0xf2>
 8011b56:	690f      	ldr	r7, [r1, #16]
 8011b58:	2f00      	cmp	r7, #0
 8011b5a:	d0f6      	beq.n	8011b4a <__sflush_r+0xae>
 8011b5c:	0793      	lsls	r3, r2, #30
 8011b5e:	680e      	ldr	r6, [r1, #0]
 8011b60:	bf08      	it	eq
 8011b62:	694b      	ldreq	r3, [r1, #20]
 8011b64:	600f      	str	r7, [r1, #0]
 8011b66:	bf18      	it	ne
 8011b68:	2300      	movne	r3, #0
 8011b6a:	eba6 0807 	sub.w	r8, r6, r7
 8011b6e:	608b      	str	r3, [r1, #8]
 8011b70:	f1b8 0f00 	cmp.w	r8, #0
 8011b74:	dde9      	ble.n	8011b4a <__sflush_r+0xae>
 8011b76:	6a21      	ldr	r1, [r4, #32]
 8011b78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b7a:	4643      	mov	r3, r8
 8011b7c:	463a      	mov	r2, r7
 8011b7e:	4628      	mov	r0, r5
 8011b80:	47b0      	blx	r6
 8011b82:	2800      	cmp	r0, #0
 8011b84:	dc08      	bgt.n	8011b98 <__sflush_r+0xfc>
 8011b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b8e:	81a3      	strh	r3, [r4, #12]
 8011b90:	f04f 30ff 	mov.w	r0, #4294967295
 8011b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b98:	4407      	add	r7, r0
 8011b9a:	eba8 0800 	sub.w	r8, r8, r0
 8011b9e:	e7e7      	b.n	8011b70 <__sflush_r+0xd4>
 8011ba0:	20400001 	.word	0x20400001

08011ba4 <_fflush_r>:
 8011ba4:	b538      	push	{r3, r4, r5, lr}
 8011ba6:	690b      	ldr	r3, [r1, #16]
 8011ba8:	4605      	mov	r5, r0
 8011baa:	460c      	mov	r4, r1
 8011bac:	b913      	cbnz	r3, 8011bb4 <_fflush_r+0x10>
 8011bae:	2500      	movs	r5, #0
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}
 8011bb4:	b118      	cbz	r0, 8011bbe <_fflush_r+0x1a>
 8011bb6:	6a03      	ldr	r3, [r0, #32]
 8011bb8:	b90b      	cbnz	r3, 8011bbe <_fflush_r+0x1a>
 8011bba:	f000 f8bb 	bl	8011d34 <__sinit>
 8011bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d0f3      	beq.n	8011bae <_fflush_r+0xa>
 8011bc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011bc8:	07d0      	lsls	r0, r2, #31
 8011bca:	d404      	bmi.n	8011bd6 <_fflush_r+0x32>
 8011bcc:	0599      	lsls	r1, r3, #22
 8011bce:	d402      	bmi.n	8011bd6 <_fflush_r+0x32>
 8011bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bd2:	f000 fb4c 	bl	801226e <__retarget_lock_acquire_recursive>
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	4621      	mov	r1, r4
 8011bda:	f7ff ff5f 	bl	8011a9c <__sflush_r>
 8011bde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011be0:	07da      	lsls	r2, r3, #31
 8011be2:	4605      	mov	r5, r0
 8011be4:	d4e4      	bmi.n	8011bb0 <_fflush_r+0xc>
 8011be6:	89a3      	ldrh	r3, [r4, #12]
 8011be8:	059b      	lsls	r3, r3, #22
 8011bea:	d4e1      	bmi.n	8011bb0 <_fflush_r+0xc>
 8011bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bee:	f000 fb3f 	bl	8012270 <__retarget_lock_release_recursive>
 8011bf2:	e7dd      	b.n	8011bb0 <_fflush_r+0xc>

08011bf4 <fflush>:
 8011bf4:	4601      	mov	r1, r0
 8011bf6:	b920      	cbnz	r0, 8011c02 <fflush+0xe>
 8011bf8:	4a04      	ldr	r2, [pc, #16]	@ (8011c0c <fflush+0x18>)
 8011bfa:	4905      	ldr	r1, [pc, #20]	@ (8011c10 <fflush+0x1c>)
 8011bfc:	4805      	ldr	r0, [pc, #20]	@ (8011c14 <fflush+0x20>)
 8011bfe:	f000 b8b1 	b.w	8011d64 <_fwalk_sglue>
 8011c02:	4b05      	ldr	r3, [pc, #20]	@ (8011c18 <fflush+0x24>)
 8011c04:	6818      	ldr	r0, [r3, #0]
 8011c06:	f7ff bfcd 	b.w	8011ba4 <_fflush_r>
 8011c0a:	bf00      	nop
 8011c0c:	240004d0 	.word	0x240004d0
 8011c10:	08011ba5 	.word	0x08011ba5
 8011c14:	240004e0 	.word	0x240004e0
 8011c18:	240004dc 	.word	0x240004dc

08011c1c <std>:
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	b510      	push	{r4, lr}
 8011c20:	4604      	mov	r4, r0
 8011c22:	e9c0 3300 	strd	r3, r3, [r0]
 8011c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c2a:	6083      	str	r3, [r0, #8]
 8011c2c:	8181      	strh	r1, [r0, #12]
 8011c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c30:	81c2      	strh	r2, [r0, #14]
 8011c32:	6183      	str	r3, [r0, #24]
 8011c34:	4619      	mov	r1, r3
 8011c36:	2208      	movs	r2, #8
 8011c38:	305c      	adds	r0, #92	@ 0x5c
 8011c3a:	f000 fa33 	bl	80120a4 <memset>
 8011c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c74 <std+0x58>)
 8011c40:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c42:	4b0d      	ldr	r3, [pc, #52]	@ (8011c78 <std+0x5c>)
 8011c44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c46:	4b0d      	ldr	r3, [pc, #52]	@ (8011c7c <std+0x60>)
 8011c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011c80 <std+0x64>)
 8011c4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c84 <std+0x68>)
 8011c50:	6224      	str	r4, [r4, #32]
 8011c52:	429c      	cmp	r4, r3
 8011c54:	d006      	beq.n	8011c64 <std+0x48>
 8011c56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011c5a:	4294      	cmp	r4, r2
 8011c5c:	d002      	beq.n	8011c64 <std+0x48>
 8011c5e:	33d0      	adds	r3, #208	@ 0xd0
 8011c60:	429c      	cmp	r4, r3
 8011c62:	d105      	bne.n	8011c70 <std+0x54>
 8011c64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c6c:	f000 bafe 	b.w	801226c <__retarget_lock_init_recursive>
 8011c70:	bd10      	pop	{r4, pc}
 8011c72:	bf00      	nop
 8011c74:	08011e81 	.word	0x08011e81
 8011c78:	08011ea3 	.word	0x08011ea3
 8011c7c:	08011edb 	.word	0x08011edb
 8011c80:	08011eff 	.word	0x08011eff
 8011c84:	24002354 	.word	0x24002354

08011c88 <stdio_exit_handler>:
 8011c88:	4a02      	ldr	r2, [pc, #8]	@ (8011c94 <stdio_exit_handler+0xc>)
 8011c8a:	4903      	ldr	r1, [pc, #12]	@ (8011c98 <stdio_exit_handler+0x10>)
 8011c8c:	4803      	ldr	r0, [pc, #12]	@ (8011c9c <stdio_exit_handler+0x14>)
 8011c8e:	f000 b869 	b.w	8011d64 <_fwalk_sglue>
 8011c92:	bf00      	nop
 8011c94:	240004d0 	.word	0x240004d0
 8011c98:	08011ba5 	.word	0x08011ba5
 8011c9c:	240004e0 	.word	0x240004e0

08011ca0 <cleanup_stdio>:
 8011ca0:	6841      	ldr	r1, [r0, #4]
 8011ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd4 <cleanup_stdio+0x34>)
 8011ca4:	4299      	cmp	r1, r3
 8011ca6:	b510      	push	{r4, lr}
 8011ca8:	4604      	mov	r4, r0
 8011caa:	d001      	beq.n	8011cb0 <cleanup_stdio+0x10>
 8011cac:	f7ff ff7a 	bl	8011ba4 <_fflush_r>
 8011cb0:	68a1      	ldr	r1, [r4, #8]
 8011cb2:	4b09      	ldr	r3, [pc, #36]	@ (8011cd8 <cleanup_stdio+0x38>)
 8011cb4:	4299      	cmp	r1, r3
 8011cb6:	d002      	beq.n	8011cbe <cleanup_stdio+0x1e>
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f7ff ff73 	bl	8011ba4 <_fflush_r>
 8011cbe:	68e1      	ldr	r1, [r4, #12]
 8011cc0:	4b06      	ldr	r3, [pc, #24]	@ (8011cdc <cleanup_stdio+0x3c>)
 8011cc2:	4299      	cmp	r1, r3
 8011cc4:	d004      	beq.n	8011cd0 <cleanup_stdio+0x30>
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ccc:	f7ff bf6a 	b.w	8011ba4 <_fflush_r>
 8011cd0:	bd10      	pop	{r4, pc}
 8011cd2:	bf00      	nop
 8011cd4:	24002354 	.word	0x24002354
 8011cd8:	240023bc 	.word	0x240023bc
 8011cdc:	24002424 	.word	0x24002424

08011ce0 <global_stdio_init.part.0>:
 8011ce0:	b510      	push	{r4, lr}
 8011ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8011d10 <global_stdio_init.part.0+0x30>)
 8011ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8011d14 <global_stdio_init.part.0+0x34>)
 8011ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8011d18 <global_stdio_init.part.0+0x38>)
 8011ce8:	601a      	str	r2, [r3, #0]
 8011cea:	4620      	mov	r0, r4
 8011cec:	2200      	movs	r2, #0
 8011cee:	2104      	movs	r1, #4
 8011cf0:	f7ff ff94 	bl	8011c1c <std>
 8011cf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	2109      	movs	r1, #9
 8011cfc:	f7ff ff8e 	bl	8011c1c <std>
 8011d00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d04:	2202      	movs	r2, #2
 8011d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d0a:	2112      	movs	r1, #18
 8011d0c:	f7ff bf86 	b.w	8011c1c <std>
 8011d10:	2400248c 	.word	0x2400248c
 8011d14:	24002354 	.word	0x24002354
 8011d18:	08011c89 	.word	0x08011c89

08011d1c <__sfp_lock_acquire>:
 8011d1c:	4801      	ldr	r0, [pc, #4]	@ (8011d24 <__sfp_lock_acquire+0x8>)
 8011d1e:	f000 baa6 	b.w	801226e <__retarget_lock_acquire_recursive>
 8011d22:	bf00      	nop
 8011d24:	24002495 	.word	0x24002495

08011d28 <__sfp_lock_release>:
 8011d28:	4801      	ldr	r0, [pc, #4]	@ (8011d30 <__sfp_lock_release+0x8>)
 8011d2a:	f000 baa1 	b.w	8012270 <__retarget_lock_release_recursive>
 8011d2e:	bf00      	nop
 8011d30:	24002495 	.word	0x24002495

08011d34 <__sinit>:
 8011d34:	b510      	push	{r4, lr}
 8011d36:	4604      	mov	r4, r0
 8011d38:	f7ff fff0 	bl	8011d1c <__sfp_lock_acquire>
 8011d3c:	6a23      	ldr	r3, [r4, #32]
 8011d3e:	b11b      	cbz	r3, 8011d48 <__sinit+0x14>
 8011d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d44:	f7ff bff0 	b.w	8011d28 <__sfp_lock_release>
 8011d48:	4b04      	ldr	r3, [pc, #16]	@ (8011d5c <__sinit+0x28>)
 8011d4a:	6223      	str	r3, [r4, #32]
 8011d4c:	4b04      	ldr	r3, [pc, #16]	@ (8011d60 <__sinit+0x2c>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d1f5      	bne.n	8011d40 <__sinit+0xc>
 8011d54:	f7ff ffc4 	bl	8011ce0 <global_stdio_init.part.0>
 8011d58:	e7f2      	b.n	8011d40 <__sinit+0xc>
 8011d5a:	bf00      	nop
 8011d5c:	08011ca1 	.word	0x08011ca1
 8011d60:	2400248c 	.word	0x2400248c

08011d64 <_fwalk_sglue>:
 8011d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d68:	4607      	mov	r7, r0
 8011d6a:	4688      	mov	r8, r1
 8011d6c:	4614      	mov	r4, r2
 8011d6e:	2600      	movs	r6, #0
 8011d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d74:	f1b9 0901 	subs.w	r9, r9, #1
 8011d78:	d505      	bpl.n	8011d86 <_fwalk_sglue+0x22>
 8011d7a:	6824      	ldr	r4, [r4, #0]
 8011d7c:	2c00      	cmp	r4, #0
 8011d7e:	d1f7      	bne.n	8011d70 <_fwalk_sglue+0xc>
 8011d80:	4630      	mov	r0, r6
 8011d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d86:	89ab      	ldrh	r3, [r5, #12]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d907      	bls.n	8011d9c <_fwalk_sglue+0x38>
 8011d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d90:	3301      	adds	r3, #1
 8011d92:	d003      	beq.n	8011d9c <_fwalk_sglue+0x38>
 8011d94:	4629      	mov	r1, r5
 8011d96:	4638      	mov	r0, r7
 8011d98:	47c0      	blx	r8
 8011d9a:	4306      	orrs	r6, r0
 8011d9c:	3568      	adds	r5, #104	@ 0x68
 8011d9e:	e7e9      	b.n	8011d74 <_fwalk_sglue+0x10>

08011da0 <iprintf>:
 8011da0:	b40f      	push	{r0, r1, r2, r3}
 8011da2:	b507      	push	{r0, r1, r2, lr}
 8011da4:	4906      	ldr	r1, [pc, #24]	@ (8011dc0 <iprintf+0x20>)
 8011da6:	ab04      	add	r3, sp, #16
 8011da8:	6808      	ldr	r0, [r1, #0]
 8011daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dae:	6881      	ldr	r1, [r0, #8]
 8011db0:	9301      	str	r3, [sp, #4]
 8011db2:	f000 fc57 	bl	8012664 <_vfiprintf_r>
 8011db6:	b003      	add	sp, #12
 8011db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dbc:	b004      	add	sp, #16
 8011dbe:	4770      	bx	lr
 8011dc0:	240004dc 	.word	0x240004dc

08011dc4 <_puts_r>:
 8011dc4:	6a03      	ldr	r3, [r0, #32]
 8011dc6:	b570      	push	{r4, r5, r6, lr}
 8011dc8:	6884      	ldr	r4, [r0, #8]
 8011dca:	4605      	mov	r5, r0
 8011dcc:	460e      	mov	r6, r1
 8011dce:	b90b      	cbnz	r3, 8011dd4 <_puts_r+0x10>
 8011dd0:	f7ff ffb0 	bl	8011d34 <__sinit>
 8011dd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011dd6:	07db      	lsls	r3, r3, #31
 8011dd8:	d405      	bmi.n	8011de6 <_puts_r+0x22>
 8011dda:	89a3      	ldrh	r3, [r4, #12]
 8011ddc:	0598      	lsls	r0, r3, #22
 8011dde:	d402      	bmi.n	8011de6 <_puts_r+0x22>
 8011de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011de2:	f000 fa44 	bl	801226e <__retarget_lock_acquire_recursive>
 8011de6:	89a3      	ldrh	r3, [r4, #12]
 8011de8:	0719      	lsls	r1, r3, #28
 8011dea:	d502      	bpl.n	8011df2 <_puts_r+0x2e>
 8011dec:	6923      	ldr	r3, [r4, #16]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d135      	bne.n	8011e5e <_puts_r+0x9a>
 8011df2:	4621      	mov	r1, r4
 8011df4:	4628      	mov	r0, r5
 8011df6:	f000 f8e5 	bl	8011fc4 <__swsetup_r>
 8011dfa:	b380      	cbz	r0, 8011e5e <_puts_r+0x9a>
 8011dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8011e00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e02:	07da      	lsls	r2, r3, #31
 8011e04:	d405      	bmi.n	8011e12 <_puts_r+0x4e>
 8011e06:	89a3      	ldrh	r3, [r4, #12]
 8011e08:	059b      	lsls	r3, r3, #22
 8011e0a:	d402      	bmi.n	8011e12 <_puts_r+0x4e>
 8011e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e0e:	f000 fa2f 	bl	8012270 <__retarget_lock_release_recursive>
 8011e12:	4628      	mov	r0, r5
 8011e14:	bd70      	pop	{r4, r5, r6, pc}
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	da04      	bge.n	8011e24 <_puts_r+0x60>
 8011e1a:	69a2      	ldr	r2, [r4, #24]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	dc17      	bgt.n	8011e50 <_puts_r+0x8c>
 8011e20:	290a      	cmp	r1, #10
 8011e22:	d015      	beq.n	8011e50 <_puts_r+0x8c>
 8011e24:	6823      	ldr	r3, [r4, #0]
 8011e26:	1c5a      	adds	r2, r3, #1
 8011e28:	6022      	str	r2, [r4, #0]
 8011e2a:	7019      	strb	r1, [r3, #0]
 8011e2c:	68a3      	ldr	r3, [r4, #8]
 8011e2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e32:	3b01      	subs	r3, #1
 8011e34:	60a3      	str	r3, [r4, #8]
 8011e36:	2900      	cmp	r1, #0
 8011e38:	d1ed      	bne.n	8011e16 <_puts_r+0x52>
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	da11      	bge.n	8011e62 <_puts_r+0x9e>
 8011e3e:	4622      	mov	r2, r4
 8011e40:	210a      	movs	r1, #10
 8011e42:	4628      	mov	r0, r5
 8011e44:	f000 f880 	bl	8011f48 <__swbuf_r>
 8011e48:	3001      	adds	r0, #1
 8011e4a:	d0d7      	beq.n	8011dfc <_puts_r+0x38>
 8011e4c:	250a      	movs	r5, #10
 8011e4e:	e7d7      	b.n	8011e00 <_puts_r+0x3c>
 8011e50:	4622      	mov	r2, r4
 8011e52:	4628      	mov	r0, r5
 8011e54:	f000 f878 	bl	8011f48 <__swbuf_r>
 8011e58:	3001      	adds	r0, #1
 8011e5a:	d1e7      	bne.n	8011e2c <_puts_r+0x68>
 8011e5c:	e7ce      	b.n	8011dfc <_puts_r+0x38>
 8011e5e:	3e01      	subs	r6, #1
 8011e60:	e7e4      	b.n	8011e2c <_puts_r+0x68>
 8011e62:	6823      	ldr	r3, [r4, #0]
 8011e64:	1c5a      	adds	r2, r3, #1
 8011e66:	6022      	str	r2, [r4, #0]
 8011e68:	220a      	movs	r2, #10
 8011e6a:	701a      	strb	r2, [r3, #0]
 8011e6c:	e7ee      	b.n	8011e4c <_puts_r+0x88>
	...

08011e70 <puts>:
 8011e70:	4b02      	ldr	r3, [pc, #8]	@ (8011e7c <puts+0xc>)
 8011e72:	4601      	mov	r1, r0
 8011e74:	6818      	ldr	r0, [r3, #0]
 8011e76:	f7ff bfa5 	b.w	8011dc4 <_puts_r>
 8011e7a:	bf00      	nop
 8011e7c:	240004dc 	.word	0x240004dc

08011e80 <__sread>:
 8011e80:	b510      	push	{r4, lr}
 8011e82:	460c      	mov	r4, r1
 8011e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e88:	f000 f992 	bl	80121b0 <_read_r>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	bfab      	itete	ge
 8011e90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011e92:	89a3      	ldrhlt	r3, [r4, #12]
 8011e94:	181b      	addge	r3, r3, r0
 8011e96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011e9a:	bfac      	ite	ge
 8011e9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011e9e:	81a3      	strhlt	r3, [r4, #12]
 8011ea0:	bd10      	pop	{r4, pc}

08011ea2 <__swrite>:
 8011ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea6:	461f      	mov	r7, r3
 8011ea8:	898b      	ldrh	r3, [r1, #12]
 8011eaa:	05db      	lsls	r3, r3, #23
 8011eac:	4605      	mov	r5, r0
 8011eae:	460c      	mov	r4, r1
 8011eb0:	4616      	mov	r6, r2
 8011eb2:	d505      	bpl.n	8011ec0 <__swrite+0x1e>
 8011eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb8:	2302      	movs	r3, #2
 8011eba:	2200      	movs	r2, #0
 8011ebc:	f000 f966 	bl	801218c <_lseek_r>
 8011ec0:	89a3      	ldrh	r3, [r4, #12]
 8011ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011eca:	81a3      	strh	r3, [r4, #12]
 8011ecc:	4632      	mov	r2, r6
 8011ece:	463b      	mov	r3, r7
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed6:	f000 b98d 	b.w	80121f4 <_write_r>

08011eda <__sseek>:
 8011eda:	b510      	push	{r4, lr}
 8011edc:	460c      	mov	r4, r1
 8011ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee2:	f000 f953 	bl	801218c <_lseek_r>
 8011ee6:	1c43      	adds	r3, r0, #1
 8011ee8:	89a3      	ldrh	r3, [r4, #12]
 8011eea:	bf15      	itete	ne
 8011eec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011eee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011ef2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011ef6:	81a3      	strheq	r3, [r4, #12]
 8011ef8:	bf18      	it	ne
 8011efa:	81a3      	strhne	r3, [r4, #12]
 8011efc:	bd10      	pop	{r4, pc}

08011efe <__sclose>:
 8011efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f02:	f000 b933 	b.w	801216c <_close_r>
	...

08011f08 <_vsiprintf_r>:
 8011f08:	b510      	push	{r4, lr}
 8011f0a:	b09a      	sub	sp, #104	@ 0x68
 8011f0c:	2400      	movs	r4, #0
 8011f0e:	9100      	str	r1, [sp, #0]
 8011f10:	9104      	str	r1, [sp, #16]
 8011f12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f16:	9105      	str	r1, [sp, #20]
 8011f18:	9102      	str	r1, [sp, #8]
 8011f1a:	4905      	ldr	r1, [pc, #20]	@ (8011f30 <_vsiprintf_r+0x28>)
 8011f1c:	9103      	str	r1, [sp, #12]
 8011f1e:	4669      	mov	r1, sp
 8011f20:	9419      	str	r4, [sp, #100]	@ 0x64
 8011f22:	f000 fa79 	bl	8012418 <_svfiprintf_r>
 8011f26:	9b00      	ldr	r3, [sp, #0]
 8011f28:	701c      	strb	r4, [r3, #0]
 8011f2a:	b01a      	add	sp, #104	@ 0x68
 8011f2c:	bd10      	pop	{r4, pc}
 8011f2e:	bf00      	nop
 8011f30:	ffff0208 	.word	0xffff0208

08011f34 <vsiprintf>:
 8011f34:	4613      	mov	r3, r2
 8011f36:	460a      	mov	r2, r1
 8011f38:	4601      	mov	r1, r0
 8011f3a:	4802      	ldr	r0, [pc, #8]	@ (8011f44 <vsiprintf+0x10>)
 8011f3c:	6800      	ldr	r0, [r0, #0]
 8011f3e:	f7ff bfe3 	b.w	8011f08 <_vsiprintf_r>
 8011f42:	bf00      	nop
 8011f44:	240004dc 	.word	0x240004dc

08011f48 <__swbuf_r>:
 8011f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4a:	460e      	mov	r6, r1
 8011f4c:	4614      	mov	r4, r2
 8011f4e:	4605      	mov	r5, r0
 8011f50:	b118      	cbz	r0, 8011f5a <__swbuf_r+0x12>
 8011f52:	6a03      	ldr	r3, [r0, #32]
 8011f54:	b90b      	cbnz	r3, 8011f5a <__swbuf_r+0x12>
 8011f56:	f7ff feed 	bl	8011d34 <__sinit>
 8011f5a:	69a3      	ldr	r3, [r4, #24]
 8011f5c:	60a3      	str	r3, [r4, #8]
 8011f5e:	89a3      	ldrh	r3, [r4, #12]
 8011f60:	071a      	lsls	r2, r3, #28
 8011f62:	d501      	bpl.n	8011f68 <__swbuf_r+0x20>
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	b943      	cbnz	r3, 8011f7a <__swbuf_r+0x32>
 8011f68:	4621      	mov	r1, r4
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	f000 f82a 	bl	8011fc4 <__swsetup_r>
 8011f70:	b118      	cbz	r0, 8011f7a <__swbuf_r+0x32>
 8011f72:	f04f 37ff 	mov.w	r7, #4294967295
 8011f76:	4638      	mov	r0, r7
 8011f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	6922      	ldr	r2, [r4, #16]
 8011f7e:	1a98      	subs	r0, r3, r2
 8011f80:	6963      	ldr	r3, [r4, #20]
 8011f82:	b2f6      	uxtb	r6, r6
 8011f84:	4283      	cmp	r3, r0
 8011f86:	4637      	mov	r7, r6
 8011f88:	dc05      	bgt.n	8011f96 <__swbuf_r+0x4e>
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	f7ff fe09 	bl	8011ba4 <_fflush_r>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d1ed      	bne.n	8011f72 <__swbuf_r+0x2a>
 8011f96:	68a3      	ldr	r3, [r4, #8]
 8011f98:	3b01      	subs	r3, #1
 8011f9a:	60a3      	str	r3, [r4, #8]
 8011f9c:	6823      	ldr	r3, [r4, #0]
 8011f9e:	1c5a      	adds	r2, r3, #1
 8011fa0:	6022      	str	r2, [r4, #0]
 8011fa2:	701e      	strb	r6, [r3, #0]
 8011fa4:	6962      	ldr	r2, [r4, #20]
 8011fa6:	1c43      	adds	r3, r0, #1
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d004      	beq.n	8011fb6 <__swbuf_r+0x6e>
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	07db      	lsls	r3, r3, #31
 8011fb0:	d5e1      	bpl.n	8011f76 <__swbuf_r+0x2e>
 8011fb2:	2e0a      	cmp	r6, #10
 8011fb4:	d1df      	bne.n	8011f76 <__swbuf_r+0x2e>
 8011fb6:	4621      	mov	r1, r4
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f7ff fdf3 	bl	8011ba4 <_fflush_r>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d0d9      	beq.n	8011f76 <__swbuf_r+0x2e>
 8011fc2:	e7d6      	b.n	8011f72 <__swbuf_r+0x2a>

08011fc4 <__swsetup_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4b29      	ldr	r3, [pc, #164]	@ (801206c <__swsetup_r+0xa8>)
 8011fc8:	4605      	mov	r5, r0
 8011fca:	6818      	ldr	r0, [r3, #0]
 8011fcc:	460c      	mov	r4, r1
 8011fce:	b118      	cbz	r0, 8011fd8 <__swsetup_r+0x14>
 8011fd0:	6a03      	ldr	r3, [r0, #32]
 8011fd2:	b90b      	cbnz	r3, 8011fd8 <__swsetup_r+0x14>
 8011fd4:	f7ff feae 	bl	8011d34 <__sinit>
 8011fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fdc:	0719      	lsls	r1, r3, #28
 8011fde:	d422      	bmi.n	8012026 <__swsetup_r+0x62>
 8011fe0:	06da      	lsls	r2, r3, #27
 8011fe2:	d407      	bmi.n	8011ff4 <__swsetup_r+0x30>
 8011fe4:	2209      	movs	r2, #9
 8011fe6:	602a      	str	r2, [r5, #0]
 8011fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fec:	81a3      	strh	r3, [r4, #12]
 8011fee:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff2:	e033      	b.n	801205c <__swsetup_r+0x98>
 8011ff4:	0758      	lsls	r0, r3, #29
 8011ff6:	d512      	bpl.n	801201e <__swsetup_r+0x5a>
 8011ff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ffa:	b141      	cbz	r1, 801200e <__swsetup_r+0x4a>
 8011ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012000:	4299      	cmp	r1, r3
 8012002:	d002      	beq.n	801200a <__swsetup_r+0x46>
 8012004:	4628      	mov	r0, r5
 8012006:	f000 f961 	bl	80122cc <_free_r>
 801200a:	2300      	movs	r3, #0
 801200c:	6363      	str	r3, [r4, #52]	@ 0x34
 801200e:	89a3      	ldrh	r3, [r4, #12]
 8012010:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012014:	81a3      	strh	r3, [r4, #12]
 8012016:	2300      	movs	r3, #0
 8012018:	6063      	str	r3, [r4, #4]
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	6023      	str	r3, [r4, #0]
 801201e:	89a3      	ldrh	r3, [r4, #12]
 8012020:	f043 0308 	orr.w	r3, r3, #8
 8012024:	81a3      	strh	r3, [r4, #12]
 8012026:	6923      	ldr	r3, [r4, #16]
 8012028:	b94b      	cbnz	r3, 801203e <__swsetup_r+0x7a>
 801202a:	89a3      	ldrh	r3, [r4, #12]
 801202c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012034:	d003      	beq.n	801203e <__swsetup_r+0x7a>
 8012036:	4621      	mov	r1, r4
 8012038:	4628      	mov	r0, r5
 801203a:	f000 fdef 	bl	8012c1c <__smakebuf_r>
 801203e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012042:	f013 0201 	ands.w	r2, r3, #1
 8012046:	d00a      	beq.n	801205e <__swsetup_r+0x9a>
 8012048:	2200      	movs	r2, #0
 801204a:	60a2      	str	r2, [r4, #8]
 801204c:	6962      	ldr	r2, [r4, #20]
 801204e:	4252      	negs	r2, r2
 8012050:	61a2      	str	r2, [r4, #24]
 8012052:	6922      	ldr	r2, [r4, #16]
 8012054:	b942      	cbnz	r2, 8012068 <__swsetup_r+0xa4>
 8012056:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801205a:	d1c5      	bne.n	8011fe8 <__swsetup_r+0x24>
 801205c:	bd38      	pop	{r3, r4, r5, pc}
 801205e:	0799      	lsls	r1, r3, #30
 8012060:	bf58      	it	pl
 8012062:	6962      	ldrpl	r2, [r4, #20]
 8012064:	60a2      	str	r2, [r4, #8]
 8012066:	e7f4      	b.n	8012052 <__swsetup_r+0x8e>
 8012068:	2000      	movs	r0, #0
 801206a:	e7f7      	b.n	801205c <__swsetup_r+0x98>
 801206c:	240004dc 	.word	0x240004dc

08012070 <memmove>:
 8012070:	4288      	cmp	r0, r1
 8012072:	b510      	push	{r4, lr}
 8012074:	eb01 0402 	add.w	r4, r1, r2
 8012078:	d902      	bls.n	8012080 <memmove+0x10>
 801207a:	4284      	cmp	r4, r0
 801207c:	4623      	mov	r3, r4
 801207e:	d807      	bhi.n	8012090 <memmove+0x20>
 8012080:	1e43      	subs	r3, r0, #1
 8012082:	42a1      	cmp	r1, r4
 8012084:	d008      	beq.n	8012098 <memmove+0x28>
 8012086:	f811 2b01 	ldrb.w	r2, [r1], #1
 801208a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801208e:	e7f8      	b.n	8012082 <memmove+0x12>
 8012090:	4402      	add	r2, r0
 8012092:	4601      	mov	r1, r0
 8012094:	428a      	cmp	r2, r1
 8012096:	d100      	bne.n	801209a <memmove+0x2a>
 8012098:	bd10      	pop	{r4, pc}
 801209a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801209e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120a2:	e7f7      	b.n	8012094 <memmove+0x24>

080120a4 <memset>:
 80120a4:	4402      	add	r2, r0
 80120a6:	4603      	mov	r3, r0
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d100      	bne.n	80120ae <memset+0xa>
 80120ac:	4770      	bx	lr
 80120ae:	f803 1b01 	strb.w	r1, [r3], #1
 80120b2:	e7f9      	b.n	80120a8 <memset+0x4>

080120b4 <strtok>:
 80120b4:	4b16      	ldr	r3, [pc, #88]	@ (8012110 <strtok+0x5c>)
 80120b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ba:	681f      	ldr	r7, [r3, #0]
 80120bc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80120be:	4605      	mov	r5, r0
 80120c0:	460e      	mov	r6, r1
 80120c2:	b9ec      	cbnz	r4, 8012100 <strtok+0x4c>
 80120c4:	2050      	movs	r0, #80	@ 0x50
 80120c6:	f7ff fba7 	bl	8011818 <malloc>
 80120ca:	4602      	mov	r2, r0
 80120cc:	6478      	str	r0, [r7, #68]	@ 0x44
 80120ce:	b920      	cbnz	r0, 80120da <strtok+0x26>
 80120d0:	4b10      	ldr	r3, [pc, #64]	@ (8012114 <strtok+0x60>)
 80120d2:	4811      	ldr	r0, [pc, #68]	@ (8012118 <strtok+0x64>)
 80120d4:	215b      	movs	r1, #91	@ 0x5b
 80120d6:	f000 f8db 	bl	8012290 <__assert_func>
 80120da:	e9c0 4400 	strd	r4, r4, [r0]
 80120de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80120e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80120e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80120ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80120ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80120f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80120f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80120fa:	6184      	str	r4, [r0, #24]
 80120fc:	7704      	strb	r4, [r0, #28]
 80120fe:	6244      	str	r4, [r0, #36]	@ 0x24
 8012100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012102:	4631      	mov	r1, r6
 8012104:	4628      	mov	r0, r5
 8012106:	2301      	movs	r3, #1
 8012108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801210c:	f000 b806 	b.w	801211c <__strtok_r>
 8012110:	240004dc 	.word	0x240004dc
 8012114:	08013981 	.word	0x08013981
 8012118:	08013998 	.word	0x08013998

0801211c <__strtok_r>:
 801211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801211e:	4604      	mov	r4, r0
 8012120:	b908      	cbnz	r0, 8012126 <__strtok_r+0xa>
 8012122:	6814      	ldr	r4, [r2, #0]
 8012124:	b144      	cbz	r4, 8012138 <__strtok_r+0x1c>
 8012126:	4620      	mov	r0, r4
 8012128:	f814 5b01 	ldrb.w	r5, [r4], #1
 801212c:	460f      	mov	r7, r1
 801212e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012132:	b91e      	cbnz	r6, 801213c <__strtok_r+0x20>
 8012134:	b965      	cbnz	r5, 8012150 <__strtok_r+0x34>
 8012136:	6015      	str	r5, [r2, #0]
 8012138:	2000      	movs	r0, #0
 801213a:	e005      	b.n	8012148 <__strtok_r+0x2c>
 801213c:	42b5      	cmp	r5, r6
 801213e:	d1f6      	bne.n	801212e <__strtok_r+0x12>
 8012140:	2b00      	cmp	r3, #0
 8012142:	d1f0      	bne.n	8012126 <__strtok_r+0xa>
 8012144:	6014      	str	r4, [r2, #0]
 8012146:	7003      	strb	r3, [r0, #0]
 8012148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801214a:	461c      	mov	r4, r3
 801214c:	e00c      	b.n	8012168 <__strtok_r+0x4c>
 801214e:	b91d      	cbnz	r5, 8012158 <__strtok_r+0x3c>
 8012150:	4627      	mov	r7, r4
 8012152:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012156:	460e      	mov	r6, r1
 8012158:	f816 5b01 	ldrb.w	r5, [r6], #1
 801215c:	42ab      	cmp	r3, r5
 801215e:	d1f6      	bne.n	801214e <__strtok_r+0x32>
 8012160:	2b00      	cmp	r3, #0
 8012162:	d0f2      	beq.n	801214a <__strtok_r+0x2e>
 8012164:	2300      	movs	r3, #0
 8012166:	703b      	strb	r3, [r7, #0]
 8012168:	6014      	str	r4, [r2, #0]
 801216a:	e7ed      	b.n	8012148 <__strtok_r+0x2c>

0801216c <_close_r>:
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	4d06      	ldr	r5, [pc, #24]	@ (8012188 <_close_r+0x1c>)
 8012170:	2300      	movs	r3, #0
 8012172:	4604      	mov	r4, r0
 8012174:	4608      	mov	r0, r1
 8012176:	602b      	str	r3, [r5, #0]
 8012178:	f7f5 fa42 	bl	8007600 <_close>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_close_r+0x1a>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_close_r+0x1a>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	24002490 	.word	0x24002490

0801218c <_lseek_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4d07      	ldr	r5, [pc, #28]	@ (80121ac <_lseek_r+0x20>)
 8012190:	4604      	mov	r4, r0
 8012192:	4608      	mov	r0, r1
 8012194:	4611      	mov	r1, r2
 8012196:	2200      	movs	r2, #0
 8012198:	602a      	str	r2, [r5, #0]
 801219a:	461a      	mov	r2, r3
 801219c:	f7f5 fa57 	bl	800764e <_lseek>
 80121a0:	1c43      	adds	r3, r0, #1
 80121a2:	d102      	bne.n	80121aa <_lseek_r+0x1e>
 80121a4:	682b      	ldr	r3, [r5, #0]
 80121a6:	b103      	cbz	r3, 80121aa <_lseek_r+0x1e>
 80121a8:	6023      	str	r3, [r4, #0]
 80121aa:	bd38      	pop	{r3, r4, r5, pc}
 80121ac:	24002490 	.word	0x24002490

080121b0 <_read_r>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	4d07      	ldr	r5, [pc, #28]	@ (80121d0 <_read_r+0x20>)
 80121b4:	4604      	mov	r4, r0
 80121b6:	4608      	mov	r0, r1
 80121b8:	4611      	mov	r1, r2
 80121ba:	2200      	movs	r2, #0
 80121bc:	602a      	str	r2, [r5, #0]
 80121be:	461a      	mov	r2, r3
 80121c0:	f7f5 f9e5 	bl	800758e <_read>
 80121c4:	1c43      	adds	r3, r0, #1
 80121c6:	d102      	bne.n	80121ce <_read_r+0x1e>
 80121c8:	682b      	ldr	r3, [r5, #0]
 80121ca:	b103      	cbz	r3, 80121ce <_read_r+0x1e>
 80121cc:	6023      	str	r3, [r4, #0]
 80121ce:	bd38      	pop	{r3, r4, r5, pc}
 80121d0:	24002490 	.word	0x24002490

080121d4 <_sbrk_r>:
 80121d4:	b538      	push	{r3, r4, r5, lr}
 80121d6:	4d06      	ldr	r5, [pc, #24]	@ (80121f0 <_sbrk_r+0x1c>)
 80121d8:	2300      	movs	r3, #0
 80121da:	4604      	mov	r4, r0
 80121dc:	4608      	mov	r0, r1
 80121de:	602b      	str	r3, [r5, #0]
 80121e0:	f7f5 fa42 	bl	8007668 <_sbrk>
 80121e4:	1c43      	adds	r3, r0, #1
 80121e6:	d102      	bne.n	80121ee <_sbrk_r+0x1a>
 80121e8:	682b      	ldr	r3, [r5, #0]
 80121ea:	b103      	cbz	r3, 80121ee <_sbrk_r+0x1a>
 80121ec:	6023      	str	r3, [r4, #0]
 80121ee:	bd38      	pop	{r3, r4, r5, pc}
 80121f0:	24002490 	.word	0x24002490

080121f4 <_write_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	4d07      	ldr	r5, [pc, #28]	@ (8012214 <_write_r+0x20>)
 80121f8:	4604      	mov	r4, r0
 80121fa:	4608      	mov	r0, r1
 80121fc:	4611      	mov	r1, r2
 80121fe:	2200      	movs	r2, #0
 8012200:	602a      	str	r2, [r5, #0]
 8012202:	461a      	mov	r2, r3
 8012204:	f7f5 f9e0 	bl	80075c8 <_write>
 8012208:	1c43      	adds	r3, r0, #1
 801220a:	d102      	bne.n	8012212 <_write_r+0x1e>
 801220c:	682b      	ldr	r3, [r5, #0]
 801220e:	b103      	cbz	r3, 8012212 <_write_r+0x1e>
 8012210:	6023      	str	r3, [r4, #0]
 8012212:	bd38      	pop	{r3, r4, r5, pc}
 8012214:	24002490 	.word	0x24002490

08012218 <__errno>:
 8012218:	4b01      	ldr	r3, [pc, #4]	@ (8012220 <__errno+0x8>)
 801221a:	6818      	ldr	r0, [r3, #0]
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	240004dc 	.word	0x240004dc

08012224 <__libc_init_array>:
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	4d0d      	ldr	r5, [pc, #52]	@ (801225c <__libc_init_array+0x38>)
 8012228:	4c0d      	ldr	r4, [pc, #52]	@ (8012260 <__libc_init_array+0x3c>)
 801222a:	1b64      	subs	r4, r4, r5
 801222c:	10a4      	asrs	r4, r4, #2
 801222e:	2600      	movs	r6, #0
 8012230:	42a6      	cmp	r6, r4
 8012232:	d109      	bne.n	8012248 <__libc_init_array+0x24>
 8012234:	4d0b      	ldr	r5, [pc, #44]	@ (8012264 <__libc_init_array+0x40>)
 8012236:	4c0c      	ldr	r4, [pc, #48]	@ (8012268 <__libc_init_array+0x44>)
 8012238:	f000 fdd0 	bl	8012ddc <_init>
 801223c:	1b64      	subs	r4, r4, r5
 801223e:	10a4      	asrs	r4, r4, #2
 8012240:	2600      	movs	r6, #0
 8012242:	42a6      	cmp	r6, r4
 8012244:	d105      	bne.n	8012252 <__libc_init_array+0x2e>
 8012246:	bd70      	pop	{r4, r5, r6, pc}
 8012248:	f855 3b04 	ldr.w	r3, [r5], #4
 801224c:	4798      	blx	r3
 801224e:	3601      	adds	r6, #1
 8012250:	e7ee      	b.n	8012230 <__libc_init_array+0xc>
 8012252:	f855 3b04 	ldr.w	r3, [r5], #4
 8012256:	4798      	blx	r3
 8012258:	3601      	adds	r6, #1
 801225a:	e7f2      	b.n	8012242 <__libc_init_array+0x1e>
 801225c:	08013a6c 	.word	0x08013a6c
 8012260:	08013a6c 	.word	0x08013a6c
 8012264:	08013a6c 	.word	0x08013a6c
 8012268:	08013a70 	.word	0x08013a70

0801226c <__retarget_lock_init_recursive>:
 801226c:	4770      	bx	lr

0801226e <__retarget_lock_acquire_recursive>:
 801226e:	4770      	bx	lr

08012270 <__retarget_lock_release_recursive>:
 8012270:	4770      	bx	lr

08012272 <memcpy>:
 8012272:	440a      	add	r2, r1
 8012274:	4291      	cmp	r1, r2
 8012276:	f100 33ff 	add.w	r3, r0, #4294967295
 801227a:	d100      	bne.n	801227e <memcpy+0xc>
 801227c:	4770      	bx	lr
 801227e:	b510      	push	{r4, lr}
 8012280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012288:	4291      	cmp	r1, r2
 801228a:	d1f9      	bne.n	8012280 <memcpy+0xe>
 801228c:	bd10      	pop	{r4, pc}
	...

08012290 <__assert_func>:
 8012290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012292:	4614      	mov	r4, r2
 8012294:	461a      	mov	r2, r3
 8012296:	4b09      	ldr	r3, [pc, #36]	@ (80122bc <__assert_func+0x2c>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	4605      	mov	r5, r0
 801229c:	68d8      	ldr	r0, [r3, #12]
 801229e:	b14c      	cbz	r4, 80122b4 <__assert_func+0x24>
 80122a0:	4b07      	ldr	r3, [pc, #28]	@ (80122c0 <__assert_func+0x30>)
 80122a2:	9100      	str	r1, [sp, #0]
 80122a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122a8:	4906      	ldr	r1, [pc, #24]	@ (80122c4 <__assert_func+0x34>)
 80122aa:	462b      	mov	r3, r5
 80122ac:	f000 fc7e 	bl	8012bac <fiprintf>
 80122b0:	f000 fd12 	bl	8012cd8 <abort>
 80122b4:	4b04      	ldr	r3, [pc, #16]	@ (80122c8 <__assert_func+0x38>)
 80122b6:	461c      	mov	r4, r3
 80122b8:	e7f3      	b.n	80122a2 <__assert_func+0x12>
 80122ba:	bf00      	nop
 80122bc:	240004dc 	.word	0x240004dc
 80122c0:	080139f2 	.word	0x080139f2
 80122c4:	080139ff 	.word	0x080139ff
 80122c8:	08013a2d 	.word	0x08013a2d

080122cc <_free_r>:
 80122cc:	b538      	push	{r3, r4, r5, lr}
 80122ce:	4605      	mov	r5, r0
 80122d0:	2900      	cmp	r1, #0
 80122d2:	d041      	beq.n	8012358 <_free_r+0x8c>
 80122d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122d8:	1f0c      	subs	r4, r1, #4
 80122da:	2b00      	cmp	r3, #0
 80122dc:	bfb8      	it	lt
 80122de:	18e4      	addlt	r4, r4, r3
 80122e0:	f7ff fb4c 	bl	801197c <__malloc_lock>
 80122e4:	4a1d      	ldr	r2, [pc, #116]	@ (801235c <_free_r+0x90>)
 80122e6:	6813      	ldr	r3, [r2, #0]
 80122e8:	b933      	cbnz	r3, 80122f8 <_free_r+0x2c>
 80122ea:	6063      	str	r3, [r4, #4]
 80122ec:	6014      	str	r4, [r2, #0]
 80122ee:	4628      	mov	r0, r5
 80122f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122f4:	f7ff bb48 	b.w	8011988 <__malloc_unlock>
 80122f8:	42a3      	cmp	r3, r4
 80122fa:	d908      	bls.n	801230e <_free_r+0x42>
 80122fc:	6820      	ldr	r0, [r4, #0]
 80122fe:	1821      	adds	r1, r4, r0
 8012300:	428b      	cmp	r3, r1
 8012302:	bf01      	itttt	eq
 8012304:	6819      	ldreq	r1, [r3, #0]
 8012306:	685b      	ldreq	r3, [r3, #4]
 8012308:	1809      	addeq	r1, r1, r0
 801230a:	6021      	streq	r1, [r4, #0]
 801230c:	e7ed      	b.n	80122ea <_free_r+0x1e>
 801230e:	461a      	mov	r2, r3
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	b10b      	cbz	r3, 8012318 <_free_r+0x4c>
 8012314:	42a3      	cmp	r3, r4
 8012316:	d9fa      	bls.n	801230e <_free_r+0x42>
 8012318:	6811      	ldr	r1, [r2, #0]
 801231a:	1850      	adds	r0, r2, r1
 801231c:	42a0      	cmp	r0, r4
 801231e:	d10b      	bne.n	8012338 <_free_r+0x6c>
 8012320:	6820      	ldr	r0, [r4, #0]
 8012322:	4401      	add	r1, r0
 8012324:	1850      	adds	r0, r2, r1
 8012326:	4283      	cmp	r3, r0
 8012328:	6011      	str	r1, [r2, #0]
 801232a:	d1e0      	bne.n	80122ee <_free_r+0x22>
 801232c:	6818      	ldr	r0, [r3, #0]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	6053      	str	r3, [r2, #4]
 8012332:	4408      	add	r0, r1
 8012334:	6010      	str	r0, [r2, #0]
 8012336:	e7da      	b.n	80122ee <_free_r+0x22>
 8012338:	d902      	bls.n	8012340 <_free_r+0x74>
 801233a:	230c      	movs	r3, #12
 801233c:	602b      	str	r3, [r5, #0]
 801233e:	e7d6      	b.n	80122ee <_free_r+0x22>
 8012340:	6820      	ldr	r0, [r4, #0]
 8012342:	1821      	adds	r1, r4, r0
 8012344:	428b      	cmp	r3, r1
 8012346:	bf04      	itt	eq
 8012348:	6819      	ldreq	r1, [r3, #0]
 801234a:	685b      	ldreq	r3, [r3, #4]
 801234c:	6063      	str	r3, [r4, #4]
 801234e:	bf04      	itt	eq
 8012350:	1809      	addeq	r1, r1, r0
 8012352:	6021      	streq	r1, [r4, #0]
 8012354:	6054      	str	r4, [r2, #4]
 8012356:	e7ca      	b.n	80122ee <_free_r+0x22>
 8012358:	bd38      	pop	{r3, r4, r5, pc}
 801235a:	bf00      	nop
 801235c:	24002350 	.word	0x24002350

08012360 <__ssputs_r>:
 8012360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012364:	688e      	ldr	r6, [r1, #8]
 8012366:	461f      	mov	r7, r3
 8012368:	42be      	cmp	r6, r7
 801236a:	680b      	ldr	r3, [r1, #0]
 801236c:	4682      	mov	sl, r0
 801236e:	460c      	mov	r4, r1
 8012370:	4690      	mov	r8, r2
 8012372:	d82d      	bhi.n	80123d0 <__ssputs_r+0x70>
 8012374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012378:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801237c:	d026      	beq.n	80123cc <__ssputs_r+0x6c>
 801237e:	6965      	ldr	r5, [r4, #20]
 8012380:	6909      	ldr	r1, [r1, #16]
 8012382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012386:	eba3 0901 	sub.w	r9, r3, r1
 801238a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801238e:	1c7b      	adds	r3, r7, #1
 8012390:	444b      	add	r3, r9
 8012392:	106d      	asrs	r5, r5, #1
 8012394:	429d      	cmp	r5, r3
 8012396:	bf38      	it	cc
 8012398:	461d      	movcc	r5, r3
 801239a:	0553      	lsls	r3, r2, #21
 801239c:	d527      	bpl.n	80123ee <__ssputs_r+0x8e>
 801239e:	4629      	mov	r1, r5
 80123a0:	f7ff fa6c 	bl	801187c <_malloc_r>
 80123a4:	4606      	mov	r6, r0
 80123a6:	b360      	cbz	r0, 8012402 <__ssputs_r+0xa2>
 80123a8:	6921      	ldr	r1, [r4, #16]
 80123aa:	464a      	mov	r2, r9
 80123ac:	f7ff ff61 	bl	8012272 <memcpy>
 80123b0:	89a3      	ldrh	r3, [r4, #12]
 80123b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80123b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123ba:	81a3      	strh	r3, [r4, #12]
 80123bc:	6126      	str	r6, [r4, #16]
 80123be:	6165      	str	r5, [r4, #20]
 80123c0:	444e      	add	r6, r9
 80123c2:	eba5 0509 	sub.w	r5, r5, r9
 80123c6:	6026      	str	r6, [r4, #0]
 80123c8:	60a5      	str	r5, [r4, #8]
 80123ca:	463e      	mov	r6, r7
 80123cc:	42be      	cmp	r6, r7
 80123ce:	d900      	bls.n	80123d2 <__ssputs_r+0x72>
 80123d0:	463e      	mov	r6, r7
 80123d2:	6820      	ldr	r0, [r4, #0]
 80123d4:	4632      	mov	r2, r6
 80123d6:	4641      	mov	r1, r8
 80123d8:	f7ff fe4a 	bl	8012070 <memmove>
 80123dc:	68a3      	ldr	r3, [r4, #8]
 80123de:	1b9b      	subs	r3, r3, r6
 80123e0:	60a3      	str	r3, [r4, #8]
 80123e2:	6823      	ldr	r3, [r4, #0]
 80123e4:	4433      	add	r3, r6
 80123e6:	6023      	str	r3, [r4, #0]
 80123e8:	2000      	movs	r0, #0
 80123ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123ee:	462a      	mov	r2, r5
 80123f0:	f000 fc79 	bl	8012ce6 <_realloc_r>
 80123f4:	4606      	mov	r6, r0
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d1e0      	bne.n	80123bc <__ssputs_r+0x5c>
 80123fa:	6921      	ldr	r1, [r4, #16]
 80123fc:	4650      	mov	r0, sl
 80123fe:	f7ff ff65 	bl	80122cc <_free_r>
 8012402:	230c      	movs	r3, #12
 8012404:	f8ca 3000 	str.w	r3, [sl]
 8012408:	89a3      	ldrh	r3, [r4, #12]
 801240a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801240e:	81a3      	strh	r3, [r4, #12]
 8012410:	f04f 30ff 	mov.w	r0, #4294967295
 8012414:	e7e9      	b.n	80123ea <__ssputs_r+0x8a>
	...

08012418 <_svfiprintf_r>:
 8012418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	4698      	mov	r8, r3
 801241e:	898b      	ldrh	r3, [r1, #12]
 8012420:	061b      	lsls	r3, r3, #24
 8012422:	b09d      	sub	sp, #116	@ 0x74
 8012424:	4607      	mov	r7, r0
 8012426:	460d      	mov	r5, r1
 8012428:	4614      	mov	r4, r2
 801242a:	d510      	bpl.n	801244e <_svfiprintf_r+0x36>
 801242c:	690b      	ldr	r3, [r1, #16]
 801242e:	b973      	cbnz	r3, 801244e <_svfiprintf_r+0x36>
 8012430:	2140      	movs	r1, #64	@ 0x40
 8012432:	f7ff fa23 	bl	801187c <_malloc_r>
 8012436:	6028      	str	r0, [r5, #0]
 8012438:	6128      	str	r0, [r5, #16]
 801243a:	b930      	cbnz	r0, 801244a <_svfiprintf_r+0x32>
 801243c:	230c      	movs	r3, #12
 801243e:	603b      	str	r3, [r7, #0]
 8012440:	f04f 30ff 	mov.w	r0, #4294967295
 8012444:	b01d      	add	sp, #116	@ 0x74
 8012446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244a:	2340      	movs	r3, #64	@ 0x40
 801244c:	616b      	str	r3, [r5, #20]
 801244e:	2300      	movs	r3, #0
 8012450:	9309      	str	r3, [sp, #36]	@ 0x24
 8012452:	2320      	movs	r3, #32
 8012454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012458:	f8cd 800c 	str.w	r8, [sp, #12]
 801245c:	2330      	movs	r3, #48	@ 0x30
 801245e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80125fc <_svfiprintf_r+0x1e4>
 8012462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012466:	f04f 0901 	mov.w	r9, #1
 801246a:	4623      	mov	r3, r4
 801246c:	469a      	mov	sl, r3
 801246e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012472:	b10a      	cbz	r2, 8012478 <_svfiprintf_r+0x60>
 8012474:	2a25      	cmp	r2, #37	@ 0x25
 8012476:	d1f9      	bne.n	801246c <_svfiprintf_r+0x54>
 8012478:	ebba 0b04 	subs.w	fp, sl, r4
 801247c:	d00b      	beq.n	8012496 <_svfiprintf_r+0x7e>
 801247e:	465b      	mov	r3, fp
 8012480:	4622      	mov	r2, r4
 8012482:	4629      	mov	r1, r5
 8012484:	4638      	mov	r0, r7
 8012486:	f7ff ff6b 	bl	8012360 <__ssputs_r>
 801248a:	3001      	adds	r0, #1
 801248c:	f000 80a7 	beq.w	80125de <_svfiprintf_r+0x1c6>
 8012490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012492:	445a      	add	r2, fp
 8012494:	9209      	str	r2, [sp, #36]	@ 0x24
 8012496:	f89a 3000 	ldrb.w	r3, [sl]
 801249a:	2b00      	cmp	r3, #0
 801249c:	f000 809f 	beq.w	80125de <_svfiprintf_r+0x1c6>
 80124a0:	2300      	movs	r3, #0
 80124a2:	f04f 32ff 	mov.w	r2, #4294967295
 80124a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124aa:	f10a 0a01 	add.w	sl, sl, #1
 80124ae:	9304      	str	r3, [sp, #16]
 80124b0:	9307      	str	r3, [sp, #28]
 80124b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80124b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80124b8:	4654      	mov	r4, sl
 80124ba:	2205      	movs	r2, #5
 80124bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c0:	484e      	ldr	r0, [pc, #312]	@ (80125fc <_svfiprintf_r+0x1e4>)
 80124c2:	f7ed ff25 	bl	8000310 <memchr>
 80124c6:	9a04      	ldr	r2, [sp, #16]
 80124c8:	b9d8      	cbnz	r0, 8012502 <_svfiprintf_r+0xea>
 80124ca:	06d0      	lsls	r0, r2, #27
 80124cc:	bf44      	itt	mi
 80124ce:	2320      	movmi	r3, #32
 80124d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124d4:	0711      	lsls	r1, r2, #28
 80124d6:	bf44      	itt	mi
 80124d8:	232b      	movmi	r3, #43	@ 0x2b
 80124da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124de:	f89a 3000 	ldrb.w	r3, [sl]
 80124e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80124e4:	d015      	beq.n	8012512 <_svfiprintf_r+0xfa>
 80124e6:	9a07      	ldr	r2, [sp, #28]
 80124e8:	4654      	mov	r4, sl
 80124ea:	2000      	movs	r0, #0
 80124ec:	f04f 0c0a 	mov.w	ip, #10
 80124f0:	4621      	mov	r1, r4
 80124f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124f6:	3b30      	subs	r3, #48	@ 0x30
 80124f8:	2b09      	cmp	r3, #9
 80124fa:	d94b      	bls.n	8012594 <_svfiprintf_r+0x17c>
 80124fc:	b1b0      	cbz	r0, 801252c <_svfiprintf_r+0x114>
 80124fe:	9207      	str	r2, [sp, #28]
 8012500:	e014      	b.n	801252c <_svfiprintf_r+0x114>
 8012502:	eba0 0308 	sub.w	r3, r0, r8
 8012506:	fa09 f303 	lsl.w	r3, r9, r3
 801250a:	4313      	orrs	r3, r2
 801250c:	9304      	str	r3, [sp, #16]
 801250e:	46a2      	mov	sl, r4
 8012510:	e7d2      	b.n	80124b8 <_svfiprintf_r+0xa0>
 8012512:	9b03      	ldr	r3, [sp, #12]
 8012514:	1d19      	adds	r1, r3, #4
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	9103      	str	r1, [sp, #12]
 801251a:	2b00      	cmp	r3, #0
 801251c:	bfbb      	ittet	lt
 801251e:	425b      	neglt	r3, r3
 8012520:	f042 0202 	orrlt.w	r2, r2, #2
 8012524:	9307      	strge	r3, [sp, #28]
 8012526:	9307      	strlt	r3, [sp, #28]
 8012528:	bfb8      	it	lt
 801252a:	9204      	strlt	r2, [sp, #16]
 801252c:	7823      	ldrb	r3, [r4, #0]
 801252e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012530:	d10a      	bne.n	8012548 <_svfiprintf_r+0x130>
 8012532:	7863      	ldrb	r3, [r4, #1]
 8012534:	2b2a      	cmp	r3, #42	@ 0x2a
 8012536:	d132      	bne.n	801259e <_svfiprintf_r+0x186>
 8012538:	9b03      	ldr	r3, [sp, #12]
 801253a:	1d1a      	adds	r2, r3, #4
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	9203      	str	r2, [sp, #12]
 8012540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012544:	3402      	adds	r4, #2
 8012546:	9305      	str	r3, [sp, #20]
 8012548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801260c <_svfiprintf_r+0x1f4>
 801254c:	7821      	ldrb	r1, [r4, #0]
 801254e:	2203      	movs	r2, #3
 8012550:	4650      	mov	r0, sl
 8012552:	f7ed fedd 	bl	8000310 <memchr>
 8012556:	b138      	cbz	r0, 8012568 <_svfiprintf_r+0x150>
 8012558:	9b04      	ldr	r3, [sp, #16]
 801255a:	eba0 000a 	sub.w	r0, r0, sl
 801255e:	2240      	movs	r2, #64	@ 0x40
 8012560:	4082      	lsls	r2, r0
 8012562:	4313      	orrs	r3, r2
 8012564:	3401      	adds	r4, #1
 8012566:	9304      	str	r3, [sp, #16]
 8012568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801256c:	4824      	ldr	r0, [pc, #144]	@ (8012600 <_svfiprintf_r+0x1e8>)
 801256e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012572:	2206      	movs	r2, #6
 8012574:	f7ed fecc 	bl	8000310 <memchr>
 8012578:	2800      	cmp	r0, #0
 801257a:	d036      	beq.n	80125ea <_svfiprintf_r+0x1d2>
 801257c:	4b21      	ldr	r3, [pc, #132]	@ (8012604 <_svfiprintf_r+0x1ec>)
 801257e:	bb1b      	cbnz	r3, 80125c8 <_svfiprintf_r+0x1b0>
 8012580:	9b03      	ldr	r3, [sp, #12]
 8012582:	3307      	adds	r3, #7
 8012584:	f023 0307 	bic.w	r3, r3, #7
 8012588:	3308      	adds	r3, #8
 801258a:	9303      	str	r3, [sp, #12]
 801258c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801258e:	4433      	add	r3, r6
 8012590:	9309      	str	r3, [sp, #36]	@ 0x24
 8012592:	e76a      	b.n	801246a <_svfiprintf_r+0x52>
 8012594:	fb0c 3202 	mla	r2, ip, r2, r3
 8012598:	460c      	mov	r4, r1
 801259a:	2001      	movs	r0, #1
 801259c:	e7a8      	b.n	80124f0 <_svfiprintf_r+0xd8>
 801259e:	2300      	movs	r3, #0
 80125a0:	3401      	adds	r4, #1
 80125a2:	9305      	str	r3, [sp, #20]
 80125a4:	4619      	mov	r1, r3
 80125a6:	f04f 0c0a 	mov.w	ip, #10
 80125aa:	4620      	mov	r0, r4
 80125ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b0:	3a30      	subs	r2, #48	@ 0x30
 80125b2:	2a09      	cmp	r2, #9
 80125b4:	d903      	bls.n	80125be <_svfiprintf_r+0x1a6>
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d0c6      	beq.n	8012548 <_svfiprintf_r+0x130>
 80125ba:	9105      	str	r1, [sp, #20]
 80125bc:	e7c4      	b.n	8012548 <_svfiprintf_r+0x130>
 80125be:	fb0c 2101 	mla	r1, ip, r1, r2
 80125c2:	4604      	mov	r4, r0
 80125c4:	2301      	movs	r3, #1
 80125c6:	e7f0      	b.n	80125aa <_svfiprintf_r+0x192>
 80125c8:	ab03      	add	r3, sp, #12
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	462a      	mov	r2, r5
 80125ce:	4b0e      	ldr	r3, [pc, #56]	@ (8012608 <_svfiprintf_r+0x1f0>)
 80125d0:	a904      	add	r1, sp, #16
 80125d2:	4638      	mov	r0, r7
 80125d4:	f3af 8000 	nop.w
 80125d8:	1c42      	adds	r2, r0, #1
 80125da:	4606      	mov	r6, r0
 80125dc:	d1d6      	bne.n	801258c <_svfiprintf_r+0x174>
 80125de:	89ab      	ldrh	r3, [r5, #12]
 80125e0:	065b      	lsls	r3, r3, #25
 80125e2:	f53f af2d 	bmi.w	8012440 <_svfiprintf_r+0x28>
 80125e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125e8:	e72c      	b.n	8012444 <_svfiprintf_r+0x2c>
 80125ea:	ab03      	add	r3, sp, #12
 80125ec:	9300      	str	r3, [sp, #0]
 80125ee:	462a      	mov	r2, r5
 80125f0:	4b05      	ldr	r3, [pc, #20]	@ (8012608 <_svfiprintf_r+0x1f0>)
 80125f2:	a904      	add	r1, sp, #16
 80125f4:	4638      	mov	r0, r7
 80125f6:	f000 f9bb 	bl	8012970 <_printf_i>
 80125fa:	e7ed      	b.n	80125d8 <_svfiprintf_r+0x1c0>
 80125fc:	08013a2e 	.word	0x08013a2e
 8012600:	08013a38 	.word	0x08013a38
 8012604:	00000000 	.word	0x00000000
 8012608:	08012361 	.word	0x08012361
 801260c:	08013a34 	.word	0x08013a34

08012610 <__sfputc_r>:
 8012610:	6893      	ldr	r3, [r2, #8]
 8012612:	3b01      	subs	r3, #1
 8012614:	2b00      	cmp	r3, #0
 8012616:	b410      	push	{r4}
 8012618:	6093      	str	r3, [r2, #8]
 801261a:	da08      	bge.n	801262e <__sfputc_r+0x1e>
 801261c:	6994      	ldr	r4, [r2, #24]
 801261e:	42a3      	cmp	r3, r4
 8012620:	db01      	blt.n	8012626 <__sfputc_r+0x16>
 8012622:	290a      	cmp	r1, #10
 8012624:	d103      	bne.n	801262e <__sfputc_r+0x1e>
 8012626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801262a:	f7ff bc8d 	b.w	8011f48 <__swbuf_r>
 801262e:	6813      	ldr	r3, [r2, #0]
 8012630:	1c58      	adds	r0, r3, #1
 8012632:	6010      	str	r0, [r2, #0]
 8012634:	7019      	strb	r1, [r3, #0]
 8012636:	4608      	mov	r0, r1
 8012638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801263c:	4770      	bx	lr

0801263e <__sfputs_r>:
 801263e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012640:	4606      	mov	r6, r0
 8012642:	460f      	mov	r7, r1
 8012644:	4614      	mov	r4, r2
 8012646:	18d5      	adds	r5, r2, r3
 8012648:	42ac      	cmp	r4, r5
 801264a:	d101      	bne.n	8012650 <__sfputs_r+0x12>
 801264c:	2000      	movs	r0, #0
 801264e:	e007      	b.n	8012660 <__sfputs_r+0x22>
 8012650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012654:	463a      	mov	r2, r7
 8012656:	4630      	mov	r0, r6
 8012658:	f7ff ffda 	bl	8012610 <__sfputc_r>
 801265c:	1c43      	adds	r3, r0, #1
 801265e:	d1f3      	bne.n	8012648 <__sfputs_r+0xa>
 8012660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012664 <_vfiprintf_r>:
 8012664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012668:	460d      	mov	r5, r1
 801266a:	b09d      	sub	sp, #116	@ 0x74
 801266c:	4614      	mov	r4, r2
 801266e:	4698      	mov	r8, r3
 8012670:	4606      	mov	r6, r0
 8012672:	b118      	cbz	r0, 801267c <_vfiprintf_r+0x18>
 8012674:	6a03      	ldr	r3, [r0, #32]
 8012676:	b90b      	cbnz	r3, 801267c <_vfiprintf_r+0x18>
 8012678:	f7ff fb5c 	bl	8011d34 <__sinit>
 801267c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801267e:	07d9      	lsls	r1, r3, #31
 8012680:	d405      	bmi.n	801268e <_vfiprintf_r+0x2a>
 8012682:	89ab      	ldrh	r3, [r5, #12]
 8012684:	059a      	lsls	r2, r3, #22
 8012686:	d402      	bmi.n	801268e <_vfiprintf_r+0x2a>
 8012688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801268a:	f7ff fdf0 	bl	801226e <__retarget_lock_acquire_recursive>
 801268e:	89ab      	ldrh	r3, [r5, #12]
 8012690:	071b      	lsls	r3, r3, #28
 8012692:	d501      	bpl.n	8012698 <_vfiprintf_r+0x34>
 8012694:	692b      	ldr	r3, [r5, #16]
 8012696:	b99b      	cbnz	r3, 80126c0 <_vfiprintf_r+0x5c>
 8012698:	4629      	mov	r1, r5
 801269a:	4630      	mov	r0, r6
 801269c:	f7ff fc92 	bl	8011fc4 <__swsetup_r>
 80126a0:	b170      	cbz	r0, 80126c0 <_vfiprintf_r+0x5c>
 80126a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126a4:	07dc      	lsls	r4, r3, #31
 80126a6:	d504      	bpl.n	80126b2 <_vfiprintf_r+0x4e>
 80126a8:	f04f 30ff 	mov.w	r0, #4294967295
 80126ac:	b01d      	add	sp, #116	@ 0x74
 80126ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b2:	89ab      	ldrh	r3, [r5, #12]
 80126b4:	0598      	lsls	r0, r3, #22
 80126b6:	d4f7      	bmi.n	80126a8 <_vfiprintf_r+0x44>
 80126b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126ba:	f7ff fdd9 	bl	8012270 <__retarget_lock_release_recursive>
 80126be:	e7f3      	b.n	80126a8 <_vfiprintf_r+0x44>
 80126c0:	2300      	movs	r3, #0
 80126c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80126c4:	2320      	movs	r3, #32
 80126c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80126ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80126ce:	2330      	movs	r3, #48	@ 0x30
 80126d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012880 <_vfiprintf_r+0x21c>
 80126d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126d8:	f04f 0901 	mov.w	r9, #1
 80126dc:	4623      	mov	r3, r4
 80126de:	469a      	mov	sl, r3
 80126e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126e4:	b10a      	cbz	r2, 80126ea <_vfiprintf_r+0x86>
 80126e6:	2a25      	cmp	r2, #37	@ 0x25
 80126e8:	d1f9      	bne.n	80126de <_vfiprintf_r+0x7a>
 80126ea:	ebba 0b04 	subs.w	fp, sl, r4
 80126ee:	d00b      	beq.n	8012708 <_vfiprintf_r+0xa4>
 80126f0:	465b      	mov	r3, fp
 80126f2:	4622      	mov	r2, r4
 80126f4:	4629      	mov	r1, r5
 80126f6:	4630      	mov	r0, r6
 80126f8:	f7ff ffa1 	bl	801263e <__sfputs_r>
 80126fc:	3001      	adds	r0, #1
 80126fe:	f000 80a7 	beq.w	8012850 <_vfiprintf_r+0x1ec>
 8012702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012704:	445a      	add	r2, fp
 8012706:	9209      	str	r2, [sp, #36]	@ 0x24
 8012708:	f89a 3000 	ldrb.w	r3, [sl]
 801270c:	2b00      	cmp	r3, #0
 801270e:	f000 809f 	beq.w	8012850 <_vfiprintf_r+0x1ec>
 8012712:	2300      	movs	r3, #0
 8012714:	f04f 32ff 	mov.w	r2, #4294967295
 8012718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801271c:	f10a 0a01 	add.w	sl, sl, #1
 8012720:	9304      	str	r3, [sp, #16]
 8012722:	9307      	str	r3, [sp, #28]
 8012724:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012728:	931a      	str	r3, [sp, #104]	@ 0x68
 801272a:	4654      	mov	r4, sl
 801272c:	2205      	movs	r2, #5
 801272e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012732:	4853      	ldr	r0, [pc, #332]	@ (8012880 <_vfiprintf_r+0x21c>)
 8012734:	f7ed fdec 	bl	8000310 <memchr>
 8012738:	9a04      	ldr	r2, [sp, #16]
 801273a:	b9d8      	cbnz	r0, 8012774 <_vfiprintf_r+0x110>
 801273c:	06d1      	lsls	r1, r2, #27
 801273e:	bf44      	itt	mi
 8012740:	2320      	movmi	r3, #32
 8012742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012746:	0713      	lsls	r3, r2, #28
 8012748:	bf44      	itt	mi
 801274a:	232b      	movmi	r3, #43	@ 0x2b
 801274c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012750:	f89a 3000 	ldrb.w	r3, [sl]
 8012754:	2b2a      	cmp	r3, #42	@ 0x2a
 8012756:	d015      	beq.n	8012784 <_vfiprintf_r+0x120>
 8012758:	9a07      	ldr	r2, [sp, #28]
 801275a:	4654      	mov	r4, sl
 801275c:	2000      	movs	r0, #0
 801275e:	f04f 0c0a 	mov.w	ip, #10
 8012762:	4621      	mov	r1, r4
 8012764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012768:	3b30      	subs	r3, #48	@ 0x30
 801276a:	2b09      	cmp	r3, #9
 801276c:	d94b      	bls.n	8012806 <_vfiprintf_r+0x1a2>
 801276e:	b1b0      	cbz	r0, 801279e <_vfiprintf_r+0x13a>
 8012770:	9207      	str	r2, [sp, #28]
 8012772:	e014      	b.n	801279e <_vfiprintf_r+0x13a>
 8012774:	eba0 0308 	sub.w	r3, r0, r8
 8012778:	fa09 f303 	lsl.w	r3, r9, r3
 801277c:	4313      	orrs	r3, r2
 801277e:	9304      	str	r3, [sp, #16]
 8012780:	46a2      	mov	sl, r4
 8012782:	e7d2      	b.n	801272a <_vfiprintf_r+0xc6>
 8012784:	9b03      	ldr	r3, [sp, #12]
 8012786:	1d19      	adds	r1, r3, #4
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	9103      	str	r1, [sp, #12]
 801278c:	2b00      	cmp	r3, #0
 801278e:	bfbb      	ittet	lt
 8012790:	425b      	neglt	r3, r3
 8012792:	f042 0202 	orrlt.w	r2, r2, #2
 8012796:	9307      	strge	r3, [sp, #28]
 8012798:	9307      	strlt	r3, [sp, #28]
 801279a:	bfb8      	it	lt
 801279c:	9204      	strlt	r2, [sp, #16]
 801279e:	7823      	ldrb	r3, [r4, #0]
 80127a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80127a2:	d10a      	bne.n	80127ba <_vfiprintf_r+0x156>
 80127a4:	7863      	ldrb	r3, [r4, #1]
 80127a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80127a8:	d132      	bne.n	8012810 <_vfiprintf_r+0x1ac>
 80127aa:	9b03      	ldr	r3, [sp, #12]
 80127ac:	1d1a      	adds	r2, r3, #4
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	9203      	str	r2, [sp, #12]
 80127b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80127b6:	3402      	adds	r4, #2
 80127b8:	9305      	str	r3, [sp, #20]
 80127ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012890 <_vfiprintf_r+0x22c>
 80127be:	7821      	ldrb	r1, [r4, #0]
 80127c0:	2203      	movs	r2, #3
 80127c2:	4650      	mov	r0, sl
 80127c4:	f7ed fda4 	bl	8000310 <memchr>
 80127c8:	b138      	cbz	r0, 80127da <_vfiprintf_r+0x176>
 80127ca:	9b04      	ldr	r3, [sp, #16]
 80127cc:	eba0 000a 	sub.w	r0, r0, sl
 80127d0:	2240      	movs	r2, #64	@ 0x40
 80127d2:	4082      	lsls	r2, r0
 80127d4:	4313      	orrs	r3, r2
 80127d6:	3401      	adds	r4, #1
 80127d8:	9304      	str	r3, [sp, #16]
 80127da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127de:	4829      	ldr	r0, [pc, #164]	@ (8012884 <_vfiprintf_r+0x220>)
 80127e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127e4:	2206      	movs	r2, #6
 80127e6:	f7ed fd93 	bl	8000310 <memchr>
 80127ea:	2800      	cmp	r0, #0
 80127ec:	d03f      	beq.n	801286e <_vfiprintf_r+0x20a>
 80127ee:	4b26      	ldr	r3, [pc, #152]	@ (8012888 <_vfiprintf_r+0x224>)
 80127f0:	bb1b      	cbnz	r3, 801283a <_vfiprintf_r+0x1d6>
 80127f2:	9b03      	ldr	r3, [sp, #12]
 80127f4:	3307      	adds	r3, #7
 80127f6:	f023 0307 	bic.w	r3, r3, #7
 80127fa:	3308      	adds	r3, #8
 80127fc:	9303      	str	r3, [sp, #12]
 80127fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012800:	443b      	add	r3, r7
 8012802:	9309      	str	r3, [sp, #36]	@ 0x24
 8012804:	e76a      	b.n	80126dc <_vfiprintf_r+0x78>
 8012806:	fb0c 3202 	mla	r2, ip, r2, r3
 801280a:	460c      	mov	r4, r1
 801280c:	2001      	movs	r0, #1
 801280e:	e7a8      	b.n	8012762 <_vfiprintf_r+0xfe>
 8012810:	2300      	movs	r3, #0
 8012812:	3401      	adds	r4, #1
 8012814:	9305      	str	r3, [sp, #20]
 8012816:	4619      	mov	r1, r3
 8012818:	f04f 0c0a 	mov.w	ip, #10
 801281c:	4620      	mov	r0, r4
 801281e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012822:	3a30      	subs	r2, #48	@ 0x30
 8012824:	2a09      	cmp	r2, #9
 8012826:	d903      	bls.n	8012830 <_vfiprintf_r+0x1cc>
 8012828:	2b00      	cmp	r3, #0
 801282a:	d0c6      	beq.n	80127ba <_vfiprintf_r+0x156>
 801282c:	9105      	str	r1, [sp, #20]
 801282e:	e7c4      	b.n	80127ba <_vfiprintf_r+0x156>
 8012830:	fb0c 2101 	mla	r1, ip, r1, r2
 8012834:	4604      	mov	r4, r0
 8012836:	2301      	movs	r3, #1
 8012838:	e7f0      	b.n	801281c <_vfiprintf_r+0x1b8>
 801283a:	ab03      	add	r3, sp, #12
 801283c:	9300      	str	r3, [sp, #0]
 801283e:	462a      	mov	r2, r5
 8012840:	4b12      	ldr	r3, [pc, #72]	@ (801288c <_vfiprintf_r+0x228>)
 8012842:	a904      	add	r1, sp, #16
 8012844:	4630      	mov	r0, r6
 8012846:	f3af 8000 	nop.w
 801284a:	4607      	mov	r7, r0
 801284c:	1c78      	adds	r0, r7, #1
 801284e:	d1d6      	bne.n	80127fe <_vfiprintf_r+0x19a>
 8012850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012852:	07d9      	lsls	r1, r3, #31
 8012854:	d405      	bmi.n	8012862 <_vfiprintf_r+0x1fe>
 8012856:	89ab      	ldrh	r3, [r5, #12]
 8012858:	059a      	lsls	r2, r3, #22
 801285a:	d402      	bmi.n	8012862 <_vfiprintf_r+0x1fe>
 801285c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801285e:	f7ff fd07 	bl	8012270 <__retarget_lock_release_recursive>
 8012862:	89ab      	ldrh	r3, [r5, #12]
 8012864:	065b      	lsls	r3, r3, #25
 8012866:	f53f af1f 	bmi.w	80126a8 <_vfiprintf_r+0x44>
 801286a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801286c:	e71e      	b.n	80126ac <_vfiprintf_r+0x48>
 801286e:	ab03      	add	r3, sp, #12
 8012870:	9300      	str	r3, [sp, #0]
 8012872:	462a      	mov	r2, r5
 8012874:	4b05      	ldr	r3, [pc, #20]	@ (801288c <_vfiprintf_r+0x228>)
 8012876:	a904      	add	r1, sp, #16
 8012878:	4630      	mov	r0, r6
 801287a:	f000 f879 	bl	8012970 <_printf_i>
 801287e:	e7e4      	b.n	801284a <_vfiprintf_r+0x1e6>
 8012880:	08013a2e 	.word	0x08013a2e
 8012884:	08013a38 	.word	0x08013a38
 8012888:	00000000 	.word	0x00000000
 801288c:	0801263f 	.word	0x0801263f
 8012890:	08013a34 	.word	0x08013a34

08012894 <_printf_common>:
 8012894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012898:	4616      	mov	r6, r2
 801289a:	4698      	mov	r8, r3
 801289c:	688a      	ldr	r2, [r1, #8]
 801289e:	690b      	ldr	r3, [r1, #16]
 80128a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80128a4:	4293      	cmp	r3, r2
 80128a6:	bfb8      	it	lt
 80128a8:	4613      	movlt	r3, r2
 80128aa:	6033      	str	r3, [r6, #0]
 80128ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80128b0:	4607      	mov	r7, r0
 80128b2:	460c      	mov	r4, r1
 80128b4:	b10a      	cbz	r2, 80128ba <_printf_common+0x26>
 80128b6:	3301      	adds	r3, #1
 80128b8:	6033      	str	r3, [r6, #0]
 80128ba:	6823      	ldr	r3, [r4, #0]
 80128bc:	0699      	lsls	r1, r3, #26
 80128be:	bf42      	ittt	mi
 80128c0:	6833      	ldrmi	r3, [r6, #0]
 80128c2:	3302      	addmi	r3, #2
 80128c4:	6033      	strmi	r3, [r6, #0]
 80128c6:	6825      	ldr	r5, [r4, #0]
 80128c8:	f015 0506 	ands.w	r5, r5, #6
 80128cc:	d106      	bne.n	80128dc <_printf_common+0x48>
 80128ce:	f104 0a19 	add.w	sl, r4, #25
 80128d2:	68e3      	ldr	r3, [r4, #12]
 80128d4:	6832      	ldr	r2, [r6, #0]
 80128d6:	1a9b      	subs	r3, r3, r2
 80128d8:	42ab      	cmp	r3, r5
 80128da:	dc26      	bgt.n	801292a <_printf_common+0x96>
 80128dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80128e0:	6822      	ldr	r2, [r4, #0]
 80128e2:	3b00      	subs	r3, #0
 80128e4:	bf18      	it	ne
 80128e6:	2301      	movne	r3, #1
 80128e8:	0692      	lsls	r2, r2, #26
 80128ea:	d42b      	bmi.n	8012944 <_printf_common+0xb0>
 80128ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80128f0:	4641      	mov	r1, r8
 80128f2:	4638      	mov	r0, r7
 80128f4:	47c8      	blx	r9
 80128f6:	3001      	adds	r0, #1
 80128f8:	d01e      	beq.n	8012938 <_printf_common+0xa4>
 80128fa:	6823      	ldr	r3, [r4, #0]
 80128fc:	6922      	ldr	r2, [r4, #16]
 80128fe:	f003 0306 	and.w	r3, r3, #6
 8012902:	2b04      	cmp	r3, #4
 8012904:	bf02      	ittt	eq
 8012906:	68e5      	ldreq	r5, [r4, #12]
 8012908:	6833      	ldreq	r3, [r6, #0]
 801290a:	1aed      	subeq	r5, r5, r3
 801290c:	68a3      	ldr	r3, [r4, #8]
 801290e:	bf0c      	ite	eq
 8012910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012914:	2500      	movne	r5, #0
 8012916:	4293      	cmp	r3, r2
 8012918:	bfc4      	itt	gt
 801291a:	1a9b      	subgt	r3, r3, r2
 801291c:	18ed      	addgt	r5, r5, r3
 801291e:	2600      	movs	r6, #0
 8012920:	341a      	adds	r4, #26
 8012922:	42b5      	cmp	r5, r6
 8012924:	d11a      	bne.n	801295c <_printf_common+0xc8>
 8012926:	2000      	movs	r0, #0
 8012928:	e008      	b.n	801293c <_printf_common+0xa8>
 801292a:	2301      	movs	r3, #1
 801292c:	4652      	mov	r2, sl
 801292e:	4641      	mov	r1, r8
 8012930:	4638      	mov	r0, r7
 8012932:	47c8      	blx	r9
 8012934:	3001      	adds	r0, #1
 8012936:	d103      	bne.n	8012940 <_printf_common+0xac>
 8012938:	f04f 30ff 	mov.w	r0, #4294967295
 801293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012940:	3501      	adds	r5, #1
 8012942:	e7c6      	b.n	80128d2 <_printf_common+0x3e>
 8012944:	18e1      	adds	r1, r4, r3
 8012946:	1c5a      	adds	r2, r3, #1
 8012948:	2030      	movs	r0, #48	@ 0x30
 801294a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801294e:	4422      	add	r2, r4
 8012950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012958:	3302      	adds	r3, #2
 801295a:	e7c7      	b.n	80128ec <_printf_common+0x58>
 801295c:	2301      	movs	r3, #1
 801295e:	4622      	mov	r2, r4
 8012960:	4641      	mov	r1, r8
 8012962:	4638      	mov	r0, r7
 8012964:	47c8      	blx	r9
 8012966:	3001      	adds	r0, #1
 8012968:	d0e6      	beq.n	8012938 <_printf_common+0xa4>
 801296a:	3601      	adds	r6, #1
 801296c:	e7d9      	b.n	8012922 <_printf_common+0x8e>
	...

08012970 <_printf_i>:
 8012970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012974:	7e0f      	ldrb	r7, [r1, #24]
 8012976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012978:	2f78      	cmp	r7, #120	@ 0x78
 801297a:	4691      	mov	r9, r2
 801297c:	4680      	mov	r8, r0
 801297e:	460c      	mov	r4, r1
 8012980:	469a      	mov	sl, r3
 8012982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012986:	d807      	bhi.n	8012998 <_printf_i+0x28>
 8012988:	2f62      	cmp	r7, #98	@ 0x62
 801298a:	d80a      	bhi.n	80129a2 <_printf_i+0x32>
 801298c:	2f00      	cmp	r7, #0
 801298e:	f000 80d1 	beq.w	8012b34 <_printf_i+0x1c4>
 8012992:	2f58      	cmp	r7, #88	@ 0x58
 8012994:	f000 80b8 	beq.w	8012b08 <_printf_i+0x198>
 8012998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801299c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80129a0:	e03a      	b.n	8012a18 <_printf_i+0xa8>
 80129a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80129a6:	2b15      	cmp	r3, #21
 80129a8:	d8f6      	bhi.n	8012998 <_printf_i+0x28>
 80129aa:	a101      	add	r1, pc, #4	@ (adr r1, 80129b0 <_printf_i+0x40>)
 80129ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129b0:	08012a09 	.word	0x08012a09
 80129b4:	08012a1d 	.word	0x08012a1d
 80129b8:	08012999 	.word	0x08012999
 80129bc:	08012999 	.word	0x08012999
 80129c0:	08012999 	.word	0x08012999
 80129c4:	08012999 	.word	0x08012999
 80129c8:	08012a1d 	.word	0x08012a1d
 80129cc:	08012999 	.word	0x08012999
 80129d0:	08012999 	.word	0x08012999
 80129d4:	08012999 	.word	0x08012999
 80129d8:	08012999 	.word	0x08012999
 80129dc:	08012b1b 	.word	0x08012b1b
 80129e0:	08012a47 	.word	0x08012a47
 80129e4:	08012ad5 	.word	0x08012ad5
 80129e8:	08012999 	.word	0x08012999
 80129ec:	08012999 	.word	0x08012999
 80129f0:	08012b3d 	.word	0x08012b3d
 80129f4:	08012999 	.word	0x08012999
 80129f8:	08012a47 	.word	0x08012a47
 80129fc:	08012999 	.word	0x08012999
 8012a00:	08012999 	.word	0x08012999
 8012a04:	08012add 	.word	0x08012add
 8012a08:	6833      	ldr	r3, [r6, #0]
 8012a0a:	1d1a      	adds	r2, r3, #4
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	6032      	str	r2, [r6, #0]
 8012a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012a18:	2301      	movs	r3, #1
 8012a1a:	e09c      	b.n	8012b56 <_printf_i+0x1e6>
 8012a1c:	6833      	ldr	r3, [r6, #0]
 8012a1e:	6820      	ldr	r0, [r4, #0]
 8012a20:	1d19      	adds	r1, r3, #4
 8012a22:	6031      	str	r1, [r6, #0]
 8012a24:	0606      	lsls	r6, r0, #24
 8012a26:	d501      	bpl.n	8012a2c <_printf_i+0xbc>
 8012a28:	681d      	ldr	r5, [r3, #0]
 8012a2a:	e003      	b.n	8012a34 <_printf_i+0xc4>
 8012a2c:	0645      	lsls	r5, r0, #25
 8012a2e:	d5fb      	bpl.n	8012a28 <_printf_i+0xb8>
 8012a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012a34:	2d00      	cmp	r5, #0
 8012a36:	da03      	bge.n	8012a40 <_printf_i+0xd0>
 8012a38:	232d      	movs	r3, #45	@ 0x2d
 8012a3a:	426d      	negs	r5, r5
 8012a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a40:	4858      	ldr	r0, [pc, #352]	@ (8012ba4 <_printf_i+0x234>)
 8012a42:	230a      	movs	r3, #10
 8012a44:	e011      	b.n	8012a6a <_printf_i+0xfa>
 8012a46:	6821      	ldr	r1, [r4, #0]
 8012a48:	6833      	ldr	r3, [r6, #0]
 8012a4a:	0608      	lsls	r0, r1, #24
 8012a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a50:	d402      	bmi.n	8012a58 <_printf_i+0xe8>
 8012a52:	0649      	lsls	r1, r1, #25
 8012a54:	bf48      	it	mi
 8012a56:	b2ad      	uxthmi	r5, r5
 8012a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8012a5a:	4852      	ldr	r0, [pc, #328]	@ (8012ba4 <_printf_i+0x234>)
 8012a5c:	6033      	str	r3, [r6, #0]
 8012a5e:	bf14      	ite	ne
 8012a60:	230a      	movne	r3, #10
 8012a62:	2308      	moveq	r3, #8
 8012a64:	2100      	movs	r1, #0
 8012a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012a6a:	6866      	ldr	r6, [r4, #4]
 8012a6c:	60a6      	str	r6, [r4, #8]
 8012a6e:	2e00      	cmp	r6, #0
 8012a70:	db05      	blt.n	8012a7e <_printf_i+0x10e>
 8012a72:	6821      	ldr	r1, [r4, #0]
 8012a74:	432e      	orrs	r6, r5
 8012a76:	f021 0104 	bic.w	r1, r1, #4
 8012a7a:	6021      	str	r1, [r4, #0]
 8012a7c:	d04b      	beq.n	8012b16 <_printf_i+0x1a6>
 8012a7e:	4616      	mov	r6, r2
 8012a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a84:	fb03 5711 	mls	r7, r3, r1, r5
 8012a88:	5dc7      	ldrb	r7, [r0, r7]
 8012a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a8e:	462f      	mov	r7, r5
 8012a90:	42bb      	cmp	r3, r7
 8012a92:	460d      	mov	r5, r1
 8012a94:	d9f4      	bls.n	8012a80 <_printf_i+0x110>
 8012a96:	2b08      	cmp	r3, #8
 8012a98:	d10b      	bne.n	8012ab2 <_printf_i+0x142>
 8012a9a:	6823      	ldr	r3, [r4, #0]
 8012a9c:	07df      	lsls	r7, r3, #31
 8012a9e:	d508      	bpl.n	8012ab2 <_printf_i+0x142>
 8012aa0:	6923      	ldr	r3, [r4, #16]
 8012aa2:	6861      	ldr	r1, [r4, #4]
 8012aa4:	4299      	cmp	r1, r3
 8012aa6:	bfde      	ittt	le
 8012aa8:	2330      	movle	r3, #48	@ 0x30
 8012aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012ab2:	1b92      	subs	r2, r2, r6
 8012ab4:	6122      	str	r2, [r4, #16]
 8012ab6:	f8cd a000 	str.w	sl, [sp]
 8012aba:	464b      	mov	r3, r9
 8012abc:	aa03      	add	r2, sp, #12
 8012abe:	4621      	mov	r1, r4
 8012ac0:	4640      	mov	r0, r8
 8012ac2:	f7ff fee7 	bl	8012894 <_printf_common>
 8012ac6:	3001      	adds	r0, #1
 8012ac8:	d14a      	bne.n	8012b60 <_printf_i+0x1f0>
 8012aca:	f04f 30ff 	mov.w	r0, #4294967295
 8012ace:	b004      	add	sp, #16
 8012ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ad4:	6823      	ldr	r3, [r4, #0]
 8012ad6:	f043 0320 	orr.w	r3, r3, #32
 8012ada:	6023      	str	r3, [r4, #0]
 8012adc:	4832      	ldr	r0, [pc, #200]	@ (8012ba8 <_printf_i+0x238>)
 8012ade:	2778      	movs	r7, #120	@ 0x78
 8012ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012ae4:	6823      	ldr	r3, [r4, #0]
 8012ae6:	6831      	ldr	r1, [r6, #0]
 8012ae8:	061f      	lsls	r7, r3, #24
 8012aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8012aee:	d402      	bmi.n	8012af6 <_printf_i+0x186>
 8012af0:	065f      	lsls	r7, r3, #25
 8012af2:	bf48      	it	mi
 8012af4:	b2ad      	uxthmi	r5, r5
 8012af6:	6031      	str	r1, [r6, #0]
 8012af8:	07d9      	lsls	r1, r3, #31
 8012afa:	bf44      	itt	mi
 8012afc:	f043 0320 	orrmi.w	r3, r3, #32
 8012b00:	6023      	strmi	r3, [r4, #0]
 8012b02:	b11d      	cbz	r5, 8012b0c <_printf_i+0x19c>
 8012b04:	2310      	movs	r3, #16
 8012b06:	e7ad      	b.n	8012a64 <_printf_i+0xf4>
 8012b08:	4826      	ldr	r0, [pc, #152]	@ (8012ba4 <_printf_i+0x234>)
 8012b0a:	e7e9      	b.n	8012ae0 <_printf_i+0x170>
 8012b0c:	6823      	ldr	r3, [r4, #0]
 8012b0e:	f023 0320 	bic.w	r3, r3, #32
 8012b12:	6023      	str	r3, [r4, #0]
 8012b14:	e7f6      	b.n	8012b04 <_printf_i+0x194>
 8012b16:	4616      	mov	r6, r2
 8012b18:	e7bd      	b.n	8012a96 <_printf_i+0x126>
 8012b1a:	6833      	ldr	r3, [r6, #0]
 8012b1c:	6825      	ldr	r5, [r4, #0]
 8012b1e:	6961      	ldr	r1, [r4, #20]
 8012b20:	1d18      	adds	r0, r3, #4
 8012b22:	6030      	str	r0, [r6, #0]
 8012b24:	062e      	lsls	r6, r5, #24
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	d501      	bpl.n	8012b2e <_printf_i+0x1be>
 8012b2a:	6019      	str	r1, [r3, #0]
 8012b2c:	e002      	b.n	8012b34 <_printf_i+0x1c4>
 8012b2e:	0668      	lsls	r0, r5, #25
 8012b30:	d5fb      	bpl.n	8012b2a <_printf_i+0x1ba>
 8012b32:	8019      	strh	r1, [r3, #0]
 8012b34:	2300      	movs	r3, #0
 8012b36:	6123      	str	r3, [r4, #16]
 8012b38:	4616      	mov	r6, r2
 8012b3a:	e7bc      	b.n	8012ab6 <_printf_i+0x146>
 8012b3c:	6833      	ldr	r3, [r6, #0]
 8012b3e:	1d1a      	adds	r2, r3, #4
 8012b40:	6032      	str	r2, [r6, #0]
 8012b42:	681e      	ldr	r6, [r3, #0]
 8012b44:	6862      	ldr	r2, [r4, #4]
 8012b46:	2100      	movs	r1, #0
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f7ed fbe1 	bl	8000310 <memchr>
 8012b4e:	b108      	cbz	r0, 8012b54 <_printf_i+0x1e4>
 8012b50:	1b80      	subs	r0, r0, r6
 8012b52:	6060      	str	r0, [r4, #4]
 8012b54:	6863      	ldr	r3, [r4, #4]
 8012b56:	6123      	str	r3, [r4, #16]
 8012b58:	2300      	movs	r3, #0
 8012b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b5e:	e7aa      	b.n	8012ab6 <_printf_i+0x146>
 8012b60:	6923      	ldr	r3, [r4, #16]
 8012b62:	4632      	mov	r2, r6
 8012b64:	4649      	mov	r1, r9
 8012b66:	4640      	mov	r0, r8
 8012b68:	47d0      	blx	sl
 8012b6a:	3001      	adds	r0, #1
 8012b6c:	d0ad      	beq.n	8012aca <_printf_i+0x15a>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	079b      	lsls	r3, r3, #30
 8012b72:	d413      	bmi.n	8012b9c <_printf_i+0x22c>
 8012b74:	68e0      	ldr	r0, [r4, #12]
 8012b76:	9b03      	ldr	r3, [sp, #12]
 8012b78:	4298      	cmp	r0, r3
 8012b7a:	bfb8      	it	lt
 8012b7c:	4618      	movlt	r0, r3
 8012b7e:	e7a6      	b.n	8012ace <_printf_i+0x15e>
 8012b80:	2301      	movs	r3, #1
 8012b82:	4632      	mov	r2, r6
 8012b84:	4649      	mov	r1, r9
 8012b86:	4640      	mov	r0, r8
 8012b88:	47d0      	blx	sl
 8012b8a:	3001      	adds	r0, #1
 8012b8c:	d09d      	beq.n	8012aca <_printf_i+0x15a>
 8012b8e:	3501      	adds	r5, #1
 8012b90:	68e3      	ldr	r3, [r4, #12]
 8012b92:	9903      	ldr	r1, [sp, #12]
 8012b94:	1a5b      	subs	r3, r3, r1
 8012b96:	42ab      	cmp	r3, r5
 8012b98:	dcf2      	bgt.n	8012b80 <_printf_i+0x210>
 8012b9a:	e7eb      	b.n	8012b74 <_printf_i+0x204>
 8012b9c:	2500      	movs	r5, #0
 8012b9e:	f104 0619 	add.w	r6, r4, #25
 8012ba2:	e7f5      	b.n	8012b90 <_printf_i+0x220>
 8012ba4:	08013a3f 	.word	0x08013a3f
 8012ba8:	08013a50 	.word	0x08013a50

08012bac <fiprintf>:
 8012bac:	b40e      	push	{r1, r2, r3}
 8012bae:	b503      	push	{r0, r1, lr}
 8012bb0:	4601      	mov	r1, r0
 8012bb2:	ab03      	add	r3, sp, #12
 8012bb4:	4805      	ldr	r0, [pc, #20]	@ (8012bcc <fiprintf+0x20>)
 8012bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bba:	6800      	ldr	r0, [r0, #0]
 8012bbc:	9301      	str	r3, [sp, #4]
 8012bbe:	f7ff fd51 	bl	8012664 <_vfiprintf_r>
 8012bc2:	b002      	add	sp, #8
 8012bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bc8:	b003      	add	sp, #12
 8012bca:	4770      	bx	lr
 8012bcc:	240004dc 	.word	0x240004dc

08012bd0 <__swhatbuf_r>:
 8012bd0:	b570      	push	{r4, r5, r6, lr}
 8012bd2:	460c      	mov	r4, r1
 8012bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd8:	2900      	cmp	r1, #0
 8012bda:	b096      	sub	sp, #88	@ 0x58
 8012bdc:	4615      	mov	r5, r2
 8012bde:	461e      	mov	r6, r3
 8012be0:	da0d      	bge.n	8012bfe <__swhatbuf_r+0x2e>
 8012be2:	89a3      	ldrh	r3, [r4, #12]
 8012be4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012be8:	f04f 0100 	mov.w	r1, #0
 8012bec:	bf14      	ite	ne
 8012bee:	2340      	movne	r3, #64	@ 0x40
 8012bf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	6031      	str	r1, [r6, #0]
 8012bf8:	602b      	str	r3, [r5, #0]
 8012bfa:	b016      	add	sp, #88	@ 0x58
 8012bfc:	bd70      	pop	{r4, r5, r6, pc}
 8012bfe:	466a      	mov	r2, sp
 8012c00:	f000 f848 	bl	8012c94 <_fstat_r>
 8012c04:	2800      	cmp	r0, #0
 8012c06:	dbec      	blt.n	8012be2 <__swhatbuf_r+0x12>
 8012c08:	9901      	ldr	r1, [sp, #4]
 8012c0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c12:	4259      	negs	r1, r3
 8012c14:	4159      	adcs	r1, r3
 8012c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c1a:	e7eb      	b.n	8012bf4 <__swhatbuf_r+0x24>

08012c1c <__smakebuf_r>:
 8012c1c:	898b      	ldrh	r3, [r1, #12]
 8012c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c20:	079d      	lsls	r5, r3, #30
 8012c22:	4606      	mov	r6, r0
 8012c24:	460c      	mov	r4, r1
 8012c26:	d507      	bpl.n	8012c38 <__smakebuf_r+0x1c>
 8012c28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c2c:	6023      	str	r3, [r4, #0]
 8012c2e:	6123      	str	r3, [r4, #16]
 8012c30:	2301      	movs	r3, #1
 8012c32:	6163      	str	r3, [r4, #20]
 8012c34:	b003      	add	sp, #12
 8012c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c38:	ab01      	add	r3, sp, #4
 8012c3a:	466a      	mov	r2, sp
 8012c3c:	f7ff ffc8 	bl	8012bd0 <__swhatbuf_r>
 8012c40:	9f00      	ldr	r7, [sp, #0]
 8012c42:	4605      	mov	r5, r0
 8012c44:	4639      	mov	r1, r7
 8012c46:	4630      	mov	r0, r6
 8012c48:	f7fe fe18 	bl	801187c <_malloc_r>
 8012c4c:	b948      	cbnz	r0, 8012c62 <__smakebuf_r+0x46>
 8012c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c52:	059a      	lsls	r2, r3, #22
 8012c54:	d4ee      	bmi.n	8012c34 <__smakebuf_r+0x18>
 8012c56:	f023 0303 	bic.w	r3, r3, #3
 8012c5a:	f043 0302 	orr.w	r3, r3, #2
 8012c5e:	81a3      	strh	r3, [r4, #12]
 8012c60:	e7e2      	b.n	8012c28 <__smakebuf_r+0xc>
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	6020      	str	r0, [r4, #0]
 8012c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c6a:	81a3      	strh	r3, [r4, #12]
 8012c6c:	9b01      	ldr	r3, [sp, #4]
 8012c6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c72:	b15b      	cbz	r3, 8012c8c <__smakebuf_r+0x70>
 8012c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c78:	4630      	mov	r0, r6
 8012c7a:	f000 f81d 	bl	8012cb8 <_isatty_r>
 8012c7e:	b128      	cbz	r0, 8012c8c <__smakebuf_r+0x70>
 8012c80:	89a3      	ldrh	r3, [r4, #12]
 8012c82:	f023 0303 	bic.w	r3, r3, #3
 8012c86:	f043 0301 	orr.w	r3, r3, #1
 8012c8a:	81a3      	strh	r3, [r4, #12]
 8012c8c:	89a3      	ldrh	r3, [r4, #12]
 8012c8e:	431d      	orrs	r5, r3
 8012c90:	81a5      	strh	r5, [r4, #12]
 8012c92:	e7cf      	b.n	8012c34 <__smakebuf_r+0x18>

08012c94 <_fstat_r>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	4d07      	ldr	r5, [pc, #28]	@ (8012cb4 <_fstat_r+0x20>)
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	4608      	mov	r0, r1
 8012c9e:	4611      	mov	r1, r2
 8012ca0:	602b      	str	r3, [r5, #0]
 8012ca2:	f7f4 fcb9 	bl	8007618 <_fstat>
 8012ca6:	1c43      	adds	r3, r0, #1
 8012ca8:	d102      	bne.n	8012cb0 <_fstat_r+0x1c>
 8012caa:	682b      	ldr	r3, [r5, #0]
 8012cac:	b103      	cbz	r3, 8012cb0 <_fstat_r+0x1c>
 8012cae:	6023      	str	r3, [r4, #0]
 8012cb0:	bd38      	pop	{r3, r4, r5, pc}
 8012cb2:	bf00      	nop
 8012cb4:	24002490 	.word	0x24002490

08012cb8 <_isatty_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4d06      	ldr	r5, [pc, #24]	@ (8012cd4 <_isatty_r+0x1c>)
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	4608      	mov	r0, r1
 8012cc2:	602b      	str	r3, [r5, #0]
 8012cc4:	f7f4 fcb8 	bl	8007638 <_isatty>
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	d102      	bne.n	8012cd2 <_isatty_r+0x1a>
 8012ccc:	682b      	ldr	r3, [r5, #0]
 8012cce:	b103      	cbz	r3, 8012cd2 <_isatty_r+0x1a>
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	24002490 	.word	0x24002490

08012cd8 <abort>:
 8012cd8:	b508      	push	{r3, lr}
 8012cda:	2006      	movs	r0, #6
 8012cdc:	f000 f85a 	bl	8012d94 <raise>
 8012ce0:	2001      	movs	r0, #1
 8012ce2:	f7f4 fc49 	bl	8007578 <_exit>

08012ce6 <_realloc_r>:
 8012ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cea:	4607      	mov	r7, r0
 8012cec:	4614      	mov	r4, r2
 8012cee:	460d      	mov	r5, r1
 8012cf0:	b921      	cbnz	r1, 8012cfc <_realloc_r+0x16>
 8012cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf6:	4611      	mov	r1, r2
 8012cf8:	f7fe bdc0 	b.w	801187c <_malloc_r>
 8012cfc:	b92a      	cbnz	r2, 8012d0a <_realloc_r+0x24>
 8012cfe:	f7ff fae5 	bl	80122cc <_free_r>
 8012d02:	4625      	mov	r5, r4
 8012d04:	4628      	mov	r0, r5
 8012d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d0a:	f000 f85f 	bl	8012dcc <_malloc_usable_size_r>
 8012d0e:	4284      	cmp	r4, r0
 8012d10:	4606      	mov	r6, r0
 8012d12:	d802      	bhi.n	8012d1a <_realloc_r+0x34>
 8012d14:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d18:	d8f4      	bhi.n	8012d04 <_realloc_r+0x1e>
 8012d1a:	4621      	mov	r1, r4
 8012d1c:	4638      	mov	r0, r7
 8012d1e:	f7fe fdad 	bl	801187c <_malloc_r>
 8012d22:	4680      	mov	r8, r0
 8012d24:	b908      	cbnz	r0, 8012d2a <_realloc_r+0x44>
 8012d26:	4645      	mov	r5, r8
 8012d28:	e7ec      	b.n	8012d04 <_realloc_r+0x1e>
 8012d2a:	42b4      	cmp	r4, r6
 8012d2c:	4622      	mov	r2, r4
 8012d2e:	4629      	mov	r1, r5
 8012d30:	bf28      	it	cs
 8012d32:	4632      	movcs	r2, r6
 8012d34:	f7ff fa9d 	bl	8012272 <memcpy>
 8012d38:	4629      	mov	r1, r5
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	f7ff fac6 	bl	80122cc <_free_r>
 8012d40:	e7f1      	b.n	8012d26 <_realloc_r+0x40>

08012d42 <_raise_r>:
 8012d42:	291f      	cmp	r1, #31
 8012d44:	b538      	push	{r3, r4, r5, lr}
 8012d46:	4605      	mov	r5, r0
 8012d48:	460c      	mov	r4, r1
 8012d4a:	d904      	bls.n	8012d56 <_raise_r+0x14>
 8012d4c:	2316      	movs	r3, #22
 8012d4e:	6003      	str	r3, [r0, #0]
 8012d50:	f04f 30ff 	mov.w	r0, #4294967295
 8012d54:	bd38      	pop	{r3, r4, r5, pc}
 8012d56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d58:	b112      	cbz	r2, 8012d60 <_raise_r+0x1e>
 8012d5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d5e:	b94b      	cbnz	r3, 8012d74 <_raise_r+0x32>
 8012d60:	4628      	mov	r0, r5
 8012d62:	f000 f831 	bl	8012dc8 <_getpid_r>
 8012d66:	4622      	mov	r2, r4
 8012d68:	4601      	mov	r1, r0
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d70:	f000 b818 	b.w	8012da4 <_kill_r>
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d00a      	beq.n	8012d8e <_raise_r+0x4c>
 8012d78:	1c59      	adds	r1, r3, #1
 8012d7a:	d103      	bne.n	8012d84 <_raise_r+0x42>
 8012d7c:	2316      	movs	r3, #22
 8012d7e:	6003      	str	r3, [r0, #0]
 8012d80:	2001      	movs	r0, #1
 8012d82:	e7e7      	b.n	8012d54 <_raise_r+0x12>
 8012d84:	2100      	movs	r1, #0
 8012d86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	4798      	blx	r3
 8012d8e:	2000      	movs	r0, #0
 8012d90:	e7e0      	b.n	8012d54 <_raise_r+0x12>
	...

08012d94 <raise>:
 8012d94:	4b02      	ldr	r3, [pc, #8]	@ (8012da0 <raise+0xc>)
 8012d96:	4601      	mov	r1, r0
 8012d98:	6818      	ldr	r0, [r3, #0]
 8012d9a:	f7ff bfd2 	b.w	8012d42 <_raise_r>
 8012d9e:	bf00      	nop
 8012da0:	240004dc 	.word	0x240004dc

08012da4 <_kill_r>:
 8012da4:	b538      	push	{r3, r4, r5, lr}
 8012da6:	4d07      	ldr	r5, [pc, #28]	@ (8012dc4 <_kill_r+0x20>)
 8012da8:	2300      	movs	r3, #0
 8012daa:	4604      	mov	r4, r0
 8012dac:	4608      	mov	r0, r1
 8012dae:	4611      	mov	r1, r2
 8012db0:	602b      	str	r3, [r5, #0]
 8012db2:	f7f4 fbd1 	bl	8007558 <_kill>
 8012db6:	1c43      	adds	r3, r0, #1
 8012db8:	d102      	bne.n	8012dc0 <_kill_r+0x1c>
 8012dba:	682b      	ldr	r3, [r5, #0]
 8012dbc:	b103      	cbz	r3, 8012dc0 <_kill_r+0x1c>
 8012dbe:	6023      	str	r3, [r4, #0]
 8012dc0:	bd38      	pop	{r3, r4, r5, pc}
 8012dc2:	bf00      	nop
 8012dc4:	24002490 	.word	0x24002490

08012dc8 <_getpid_r>:
 8012dc8:	f7f4 bbbe 	b.w	8007548 <_getpid>

08012dcc <_malloc_usable_size_r>:
 8012dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dd0:	1f18      	subs	r0, r3, #4
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	bfbc      	itt	lt
 8012dd6:	580b      	ldrlt	r3, [r1, r0]
 8012dd8:	18c0      	addlt	r0, r0, r3
 8012dda:	4770      	bx	lr

08012ddc <_init>:
 8012ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dde:	bf00      	nop
 8012de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012de2:	bc08      	pop	{r3}
 8012de4:	469e      	mov	lr, r3
 8012de6:	4770      	bx	lr

08012de8 <_fini>:
 8012de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dea:	bf00      	nop
 8012dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dee:	bc08      	pop	{r3}
 8012df0:	469e      	mov	lr, r3
 8012df2:	4770      	bx	lr
